name: 🚀 KCS Backend CI/CD

on:
    push:
        branches: [main, dev]
    pull_request:
        branches: [main]

env:
    REGISTRY: docker.io
    IMAGE_NAME: omyratechnologies/kcs-backend
    NODE_VERSION: "20"

jobs:
    test:
        name: 🧪 Test & Quality Checks
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🟢 Setup Bun
              uses: oven-sh/setup-bun@v1
              with:
                  bun-version: latest

            - name: 📦 Install dependencies
              run: bun install --frozen-lockfile

            - name: 🔍 Lint code
              run: bun run lint

            - name: 🎨 Check formatting
              run: bun run format --check

            - name: 🔒 Security audit
              run: bun audit

            - name: 🧪 Run tests
              run: bun test --coverage

            - name: 📊 Upload coverage reports
              uses: codecov/codecov-action@v3
              with:
                  files: ./coverage/lcov.info
                  fail_ci_if_error: true

    build:
        name: 🏗️ Build & Push Docker Image
        runs-on: ubuntu-latest
        needs: test
        if: github.ref == 'refs/heads/main'

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🐳 Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: 🔑 Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: 📝 Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=raw,value=latest,enable={{is_default_branch}}
                      type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

            - name: 🏗️ Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      BUILD_NUMBER=${{ github.run_number }}
                      BUILD_TIMESTAMP=${{ github.run_id }}
                      GIT_COMMIT=${{ github.sha }}

    deploy:
        name: 🚀 Deploy to Production
        runs-on: ubuntu-latest
        needs: build
        if: github.ref == 'refs/heads/main'
        environment: production

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 🔑 Setup SSH
              uses: webfactory/ssh-agent@v0.7.0
              with:
                  ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

            - name: 🚀 Deploy to production server
              run: |
                  # Add server to known hosts
                  ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_IP }} >> ~/.ssh/known_hosts

                  # Copy files to server
                  scp -o StrictHostKeyChecking=no \
                      docker-compose.production.yml \
                      nginx.conf \
                      ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_SERVER_IP }}:/opt/kcs-backend/

                  # Deploy on server
                  ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
                    cd /opt/kcs-backend
                    
                    # Pull latest image
                    docker-compose -f docker-compose.production.yml pull
                    
                    # Restart services
                    docker-compose -f docker-compose.production.yml down
                    docker-compose -f docker-compose.production.yml up -d
                    
                    # Wait for services to be ready
                    sleep 30
                    
                    # Health check
                    curl -f http://localhost:4500/api/health || exit 1
                    
                    echo "✅ Deployment completed successfully"
                  EOF

            - name: 📢 Notify Teams on success
              if: success()
              uses: skitionek/notify-microsoft-teams@master
              with:
                  webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
                  title: "✅ KCS Backend Deployed Successfully"
                  message: |
                      **Build #${{ github.run_number }} deployed to production!**

                      **Details:**
                      - Branch: ${{ github.ref_name }}
                      - Commit: ${{ github.sha }}
                      - Deployed by: ${{ github.actor }}

                      **Links:**
                      - [Application](https://devapi.letscatchup-kcs.com)
                      - [Build Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  color: good

            - name: 📢 Notify Teams on failure
              if: failure()
              uses: skitionek/notify-microsoft-teams@master
              with:
                  webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
                  title: "❌ KCS Backend Deployment Failed"
                  message: |
                      **Build #${{ github.run_number }} deployment failed!**

                      **Details:**
                      - Branch: ${{ github.ref_name }}
                      - Commit: ${{ github.sha }}
                      - Failed by: ${{ github.actor }}

                      **Action Required:**
                      Please check the deployment logs and fix the issues.

                      **Links:**
                      - [Build Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  color: danger

    health-check:
        name: 🏥 Post-Deployment Health Check
        runs-on: ubuntu-latest
        needs: deploy
        if: github.ref == 'refs/heads/main'

        steps:
            - name: 🏥 Health check
              run: |
                  echo "🏥 Running post-deployment health checks..."

                  # Wait for application to be ready
                  sleep 10

                  # Test main API
                  curl -f https://devapi.letscatchup-kcs.com/api/health

                  # Test authentication endpoint
                  curl -f https://devapi.letscatchup-kcs.com/api/auth/health

                  # Test WebSocket endpoint
                  curl -f https://devapi.letscatchup-kcs.com/socket.io/

                  echo "✅ All health checks passed"
