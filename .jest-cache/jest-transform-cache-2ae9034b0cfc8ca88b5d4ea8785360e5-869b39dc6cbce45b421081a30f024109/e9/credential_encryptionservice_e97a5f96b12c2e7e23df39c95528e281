a5a2705d4b7a2dd3ae996fd1e81beb5a
/* istanbul ignore next */
function cov_q4kwkk4xd() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/services/credential_encryption.service.ts";
  var hash = "53df178d0e1008443cb11cc4d9f08e78b9f4a759";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/services/credential_encryption.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 65
        }
      },
      "1": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 10,
          column: 9
        }
      },
      "2": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 94
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "4": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "6": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 43
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "8": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 55
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "11": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "12": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 35,
          column: 57
        }
      },
      "13": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 73
        }
      },
      "14": {
        start: {
          line: 37,
          column: 37
        },
        end: {
          line: 37,
          column: 64
        }
      },
      "15": {
        start: {
          line: 38,
          column: 28
        },
        end: {
          line: 38,
          column: 74
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 45
        }
      },
      "17": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "18": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "19": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "20": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "21": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 47
        }
      },
      "22": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 65
        }
      },
      "23": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "24": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 77
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 37
        }
      },
      "26": {
        start: {
          line: 62,
          column: 28
        },
        end: {
          line: 62,
          column: 94
        }
      },
      "27": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 48
        }
      },
      "28": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 41
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 71
        }
      },
      "30": {
        start: {
          line: 74,
          column: 35
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "31": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 59
        }
      },
      "32": {
        start: {
          line: 83,
          column: 26
        },
        end: {
          line: 83,
          column: 70
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "34": {
        start: {
          line: 90,
          column: 23
        },
        end: {
          line: 90,
          column: 62
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "36": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "37": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "38": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "39": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 97,
          column: 119
        }
      },
      "40": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 22
        }
      },
      "41": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "42": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 47
        }
      },
      "43": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "44": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 113,
          column: 18
        }
      },
      "45": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 45
        }
      },
      "46": {
        start: {
          line: 117,
          column: 30
        },
        end: {
          line: 117,
          column: 63
        }
      },
      "47": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 64
        }
      },
      "48": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "49": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 123,
          column: 18
        }
      },
      "50": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "51": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 14
        }
      },
      "52": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "53": {
        start: {
          line: 143,
          column: 31
        },
        end: {
          line: 143,
          column: 76
        }
      },
      "54": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 67
        }
      },
      "55": {
        start: {
          line: 146,
          column: 32
        },
        end: {
          line: 146,
          column: 79
        }
      },
      "56": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 71
        }
      },
      "57": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 56
        }
      },
      "58": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 69
        }
      },
      "59": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 157,
          column: 54
        }
      },
      "60": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 158,
          column: 44
        }
      },
      "61": {
        start: {
          line: 159,
          column: 0
        },
        end: {
          line: 159,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 25
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 43
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 32
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 55
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 59
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 67
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 40
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 89
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 106
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 60
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 140
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 29
          }
        }, {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 12,
            column: 50
          }
        }],
        line: 12
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 98,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 98,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "5": {
        loc: {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 96,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 21
          },
          end: {
            line: 94,
            column: 43
          }
        }, {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 94,
            column: 66
          }
        }, {
          start: {
            line: 94,
            column: 70
          },
          end: {
            line: 94,
            column: 90
          }
        }, {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 50
          }
        }, {
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 96,
            column: 41
          }
        }],
        line: 94
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "53df178d0e1008443cb11cc4d9f08e78b9f4a759"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_q4kwkk4xd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_q4kwkk4xd();
import crypto from "node:crypto";
export class CredentialEncryptionService {
  /**
   * Get encryption key from environment variables
   */
  static getEncryptionKey() {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[0]++;
    const key =
    /* istanbul ignore next */
    (cov_q4kwkk4xd().s[0]++, process.env.PAYMENT_CREDENTIAL_ENCRYPTION_KEY);
    /* istanbul ignore next */
    cov_q4kwkk4xd().s[1]++;
    if (!key) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().b[0][0]++;
      cov_q4kwkk4xd().s[2]++;
      throw new Error("PAYMENT_CREDENTIAL_ENCRYPTION_KEY environment variable not set");
    } else
    /* istanbul ignore next */
    {
      cov_q4kwkk4xd().b[0][1]++;
    }
    // If key is base64 encoded
    cov_q4kwkk4xd().s[3]++;
    if (
    /* istanbul ignore next */
    (cov_q4kwkk4xd().b[2][0]++, key.length === 44) &&
    /* istanbul ignore next */
    (cov_q4kwkk4xd().b[2][1]++, key.endsWith("="))) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().b[1][0]++;
      cov_q4kwkk4xd().s[4]++;
      return Buffer.from(key, "base64");
    } else
    /* istanbul ignore next */
    {
      cov_q4kwkk4xd().b[1][1]++;
    }
    // If key is hex encoded
    cov_q4kwkk4xd().s[5]++;
    if (key.length === 64) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().b[3][0]++;
      cov_q4kwkk4xd().s[6]++;
      return Buffer.from(key, "hex");
    } else
    /* istanbul ignore next */
    {
      cov_q4kwkk4xd().b[3][1]++;
    }
    // Generate key from string (less secure, not recommended for production)
    cov_q4kwkk4xd().s[7]++;
    return crypto.scryptSync(key, "salt", this.KEY_LENGTH);
  }
  /**
   * Generate a new encryption key (for initial setup)
   */
  static generateEncryptionKey() {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[1]++;
    const key =
    /* istanbul ignore next */
    (cov_q4kwkk4xd().s[8]++, crypto.randomBytes(this.KEY_LENGTH));
    /* istanbul ignore next */
    cov_q4kwkk4xd().s[9]++;
    return key.toString("base64");
  }
  /**
   * Encrypt payment gateway credentials
   */
  static encryptCredentials(credentials) {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[2]++;
    cov_q4kwkk4xd().s[10]++;
    try {
      const key =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[11]++, this.getEncryptionKey());
      const iv =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[12]++, crypto.randomBytes(this.IV_LENGTH));
      const cipher =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[13]++, crypto.createCipheriv(this.ALGORITHM, key, iv));
      const credentialString =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[14]++, JSON.stringify(credentials));
      let encrypted =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[15]++, cipher.update(credentialString, "utf8", "hex"));
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[16]++;
      encrypted += cipher.final("hex");
      const tag =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[17]++, cipher.getAuthTag());
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[18]++;
      return {
        encrypted_data: encrypted,
        iv: iv.toString("hex"),
        tag: tag.toString("hex"),
        algorithm: this.ALGORITHM
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[19]++;
      throw new Error(`Failed to encrypt credentials: ${error}`);
    }
  }
  /**
   * Decrypt payment gateway credentials
   */
  static decryptCredentials(encryptedCredential) {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[3]++;
    cov_q4kwkk4xd().s[20]++;
    try {
      const key =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[21]++, this.getEncryptionKey());
      const iv =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[22]++, Buffer.from(encryptedCredential.iv, "hex"));
      const tag =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[23]++, Buffer.from(encryptedCredential.tag, "hex"));
      const decipher =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[24]++, crypto.createDecipheriv(this.ALGORITHM, key, iv));
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[25]++;
      decipher.setAuthTag(tag);
      let decrypted =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[26]++, decipher.update(encryptedCredential.encrypted_data, "hex", "utf8"));
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[27]++;
      decrypted += decipher.final("utf8");
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[28]++;
      return JSON.parse(decrypted);
    } catch (error) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[29]++;
      throw new Error(`Failed to decrypt credentials: ${error}`);
    }
  }
  /**
   * Encrypt specific gateway credentials
   */
  static encryptGatewayCredentials(gateway, credentials) {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[4]++;
    const gatewayCredentials =
    /* istanbul ignore next */
    (cov_q4kwkk4xd().s[30]++, {
      [gateway]: credentials
    });
    /* istanbul ignore next */
    cov_q4kwkk4xd().s[31]++;
    return this.encryptCredentials(gatewayCredentials);
  }
  /**
   * Decrypt specific gateway credentials
   */
  static decryptGatewayCredentials(gateway, encryptedCredential) {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[5]++;
    const decrypted =
    /* istanbul ignore next */
    (cov_q4kwkk4xd().s[32]++, this.decryptCredentials(encryptedCredential));
    /* istanbul ignore next */
    cov_q4kwkk4xd().s[33]++;
    return decrypted[gateway];
  }
  /**
   * Mask sensitive data for logging/display
   */
  static maskCredentials(credentials) {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[6]++;
    const masked =
    /* istanbul ignore next */
    (cov_q4kwkk4xd().s[34]++, JSON.parse(JSON.stringify(credentials)));
    /* istanbul ignore next */
    cov_q4kwkk4xd().s[35]++;
    for (const gateway of Object.keys(masked)) {
      const creds =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[36]++, masked[gateway]);
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[37]++;
      for (const key of Object.keys(creds)) {
        /* istanbul ignore next */
        cov_q4kwkk4xd().s[38]++;
        if ((
        /* istanbul ignore next */
        (cov_q4kwkk4xd().b[5][0]++, key.includes("secret")) ||
        /* istanbul ignore next */
        (cov_q4kwkk4xd().b[5][1]++, key.includes("key")) ||
        /* istanbul ignore next */
        (cov_q4kwkk4xd().b[5][2]++, key.includes("salt"))) &&
        /* istanbul ignore next */
        (cov_q4kwkk4xd().b[5][3]++, typeof creds[key] === "string") &&
        /* istanbul ignore next */
        (cov_q4kwkk4xd().b[5][4]++, creds[key].length > 8)) {
          /* istanbul ignore next */
          cov_q4kwkk4xd().b[4][0]++;
          cov_q4kwkk4xd().s[39]++;
          creds[key] = creds[key].slice(0, 4) + "***" + creds[key].slice(Math.max(0, creds[key].length - 4));
        } else
        /* istanbul ignore next */
        {
          cov_q4kwkk4xd().b[4][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_q4kwkk4xd().s[40]++;
    return masked;
  }
  /**
   * Validate encryption key strength
   */
  static validateEncryptionKey() {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[7]++;
    cov_q4kwkk4xd().s[41]++;
    try {
      const key =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[42]++, this.getEncryptionKey());
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[43]++;
      if (key.length !== this.KEY_LENGTH) {
        /* istanbul ignore next */
        cov_q4kwkk4xd().b[6][0]++;
        cov_q4kwkk4xd().s[44]++;
        return {
          valid: false,
          message: `Encryption key must be ${this.KEY_LENGTH} bytes (256 bits)`
        };
      } else
      /* istanbul ignore next */
      {
        cov_q4kwkk4xd().b[6][1]++;
      }
      // Test encryption/decryption
      const testData =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[45]++, {
        test: "data"
      });
      const encrypted =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[46]++, this.encryptCredentials(testData));
      const decrypted =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[47]++, this.decryptCredentials(encrypted));
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[48]++;
      if (JSON.stringify(testData) !== JSON.stringify(decrypted)) {
        /* istanbul ignore next */
        cov_q4kwkk4xd().b[7][0]++;
        cov_q4kwkk4xd().s[49]++;
        return {
          valid: false,
          message: "Encryption key validation failed - encryption/decryption mismatch"
        };
      } else
      /* istanbul ignore next */
      {
        cov_q4kwkk4xd().b[7][1]++;
      }
      cov_q4kwkk4xd().s[50]++;
      return {
        valid: true,
        message: "Encryption key is valid"
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[51]++;
      return {
        valid: false,
        message: `Encryption key validation failed: ${error}`
      };
    }
  }
  /**
   * Rotate encryption (re-encrypt with new key)
   */
  static rotateEncryption(oldEncryptedCredential, oldKey) {
    /* istanbul ignore next */
    cov_q4kwkk4xd().f[8]++;
    cov_q4kwkk4xd().s[52]++;
    try {
      // Temporarily set old key
      const currentKey =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[53]++, process.env.PAYMENT_CREDENTIAL_ENCRYPTION_KEY);
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[54]++;
      process.env.PAYMENT_CREDENTIAL_ENCRYPTION_KEY = oldKey;
      // Decrypt with old key
      const credentials =
      /* istanbul ignore next */
      (cov_q4kwkk4xd().s[55]++, this.decryptCredentials(oldEncryptedCredential));
      // Restore new key
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[56]++;
      process.env.PAYMENT_CREDENTIAL_ENCRYPTION_KEY = currentKey;
      // Encrypt with new key
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[57]++;
      return this.encryptCredentials(credentials);
    } catch (error) {
      /* istanbul ignore next */
      cov_q4kwkk4xd().s[58]++;
      throw new Error(`Failed to rotate encryption: ${error}`);
    }
  }
}
/* istanbul ignore next */
cov_q4kwkk4xd().s[59]++;
CredentialEncryptionService.ALGORITHM = "aes-256-gcm";
/* istanbul ignore next */
cov_q4kwkk4xd().s[60]++;
CredentialEncryptionService.KEY_LENGTH = 32; // 256 bits
/* istanbul ignore next */
cov_q4kwkk4xd().s[61]++;
CredentialEncryptionService.IV_LENGTH = 16; // 128 bits