7866ca9f8f02cf42eee42b0345a74fc1
/* istanbul ignore next */
function cov_1oqq3rt395() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/utils/meeting_error_monitor.ts";
  var hash = "e9e8af8f428390181645e4c3d13716df7580fb1a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/utils/meeting_error_monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 53
        }
      },
      "1": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 10,
          column: 64
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 57
        }
      },
      "3": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 50
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "5": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "6": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 59
        }
      },
      "7": {
        start: {
          line: 33,
          column: 28
        },
        end: {
          line: 33,
          column: 97
        }
      },
      "8": {
        start: {
          line: 33,
          column: 82
        },
        end: {
          line: 33,
          column: 93
        }
      },
      "9": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 34,
          column: 65
        }
      },
      "10": {
        start: {
          line: 35,
          column: 29
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "12": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 97
        }
      },
      "13": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 53,
          column: 64
        }
      },
      "14": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "15": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "16": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 45
        }
      },
      "17": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 44
        }
      },
      "18": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 62,
          column: 44
        }
      },
      "19": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 63,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 47
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 27
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 66
          },
          end: {
            line: 33,
            column: 67
          }
        },
        loc: {
          start: {
            line: 33,
            column: 82
          },
          end: {
            line: 33,
            column: 93
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 46
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 21
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 29
          },
          end: {
            line: 10,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 29
          },
          end: {
            line: 10,
            column: 59
          }
        }, {
          start: {
            line: 10,
            column: 63
          },
          end: {
            line: 10,
            column: 64
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e9e8af8f428390181645e4c3d13716df7580fb1a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1oqq3rt395 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1oqq3rt395();
/**
 * Meeting error monitoring and logging
 */
export class MeetingErrorMonitor {
  /**
   * Log and monitor meeting errors
   */
  static logError(operation, error, context) {
    /* istanbul ignore next */
    cov_1oqq3rt395().f[0]++;
    const errorKey =
    /* istanbul ignore next */
    (cov_1oqq3rt395().s[0]++, `${operation}:${error.name}`);
    const currentCount =
    /* istanbul ignore next */
    (cov_1oqq3rt395().s[1]++,
    /* istanbul ignore next */
    (cov_1oqq3rt395().b[0][0]++, this.errorCounts.get(errorKey)) ||
    /* istanbul ignore next */
    (cov_1oqq3rt395().b[0][1]++, 0));
    /* istanbul ignore next */
    cov_1oqq3rt395().s[2]++;
    this.errorCounts.set(errorKey, currentCount + 1);
    /* istanbul ignore next */
    cov_1oqq3rt395().s[3]++;
    this.lastErrors.set(errorKey, new Date());
    // Enhanced error logging
    /* istanbul ignore next */
    cov_1oqq3rt395().s[4]++;
    console.error(`[MEETING_ERROR] ${operation}:`, {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      context,
      count: currentCount + 1,
      timestamp: new Date().toISOString()
    });
    // Alert on high error rates
    /* istanbul ignore next */
    cov_1oqq3rt395().s[5]++;
    if (currentCount > 10) {
      /* istanbul ignore next */
      cov_1oqq3rt395().b[1][0]++;
      cov_1oqq3rt395().s[6]++;
      this.sendAlert(operation, error, currentCount);
    } else
    /* istanbul ignore next */
    {
      cov_1oqq3rt395().b[1][1]++;
    }
  }
  /**
   * Get error statistics
   */
  static getErrorStats() {
    /* istanbul ignore next */
    cov_1oqq3rt395().f[1]++;
    const totalErrors =
    /* istanbul ignore next */
    (cov_1oqq3rt395().s[7]++, [...this.errorCounts.values()].reduce((sum, count) => {
      /* istanbul ignore next */
      cov_1oqq3rt395().f[2]++;
      cov_1oqq3rt395().s[8]++;
      return sum + count;
    }, 0));
    const errorsByType =
    /* istanbul ignore next */
    (cov_1oqq3rt395().s[9]++, Object.fromEntries(this.errorCounts));
    const recentErrors =
    /* istanbul ignore next */
    (cov_1oqq3rt395().s[10]++, Object.fromEntries(this.lastErrors));
    /* istanbul ignore next */
    cov_1oqq3rt395().s[11]++;
    return {
      totalErrors,
      errorsByType,
      recentErrors
    };
  }
  /**
   * Send alert for critical errors
   */
  static sendAlert(operation, error, count) {
    /* istanbul ignore next */
    cov_1oqq3rt395().f[3]++;
    cov_1oqq3rt395().s[12]++;
    // In production, integrate with alerting system (e.g., Slack, PagerDuty)
    console.warn(`[MEETING_ALERT] High error rate detected: ${operation} - ${count} errors`);
  }
  /**
   * Clear old error stats (call periodically)
   */
  static cleanup() {
    /* istanbul ignore next */
    cov_1oqq3rt395().f[4]++;
    const oneHourAgo =
    /* istanbul ignore next */
    (cov_1oqq3rt395().s[13]++, new Date(Date.now() - 60 * 60 * 1000));
    /* istanbul ignore next */
    cov_1oqq3rt395().s[14]++;
    for (const [key, lastError] of this.lastErrors.entries()) {
      /* istanbul ignore next */
      cov_1oqq3rt395().s[15]++;
      if (lastError < oneHourAgo) {
        /* istanbul ignore next */
        cov_1oqq3rt395().b[2][0]++;
        cov_1oqq3rt395().s[16]++;
        this.errorCounts.delete(key);
        /* istanbul ignore next */
        cov_1oqq3rt395().s[17]++;
        this.lastErrors.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_1oqq3rt395().b[2][1]++;
      }
    }
  }
}
/* istanbul ignore next */
cov_1oqq3rt395().s[18]++;
MeetingErrorMonitor.errorCounts = new Map();
/* istanbul ignore next */
cov_1oqq3rt395().s[19]++;
MeetingErrorMonitor.lastErrors = new Map();