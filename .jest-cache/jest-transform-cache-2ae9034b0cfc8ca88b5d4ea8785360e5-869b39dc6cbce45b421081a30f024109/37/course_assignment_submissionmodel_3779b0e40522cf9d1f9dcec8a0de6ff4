0c5c9d4a8d33742f110adb2b4c9204fa
/* istanbul ignore next */
function cov_sso16xx1q() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/course_assignment_submission.model.ts";
  var hash = "3c118bf624f9816d1162a727d830bdb3bae3d2e7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/course_assignment_submission.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 41
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "1": {
        start: {
          line: 27,
          column: 45
        },
        end: {
          line: 27,
          column: 55
        }
      },
      "2": {
        start: {
          line: 28,
          column: 45
        },
        end: {
          line: 28,
          column: 55
        }
      },
      "3": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 76
        }
      },
      "4": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "5": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 76
        }
      },
      "6": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 72
        }
      },
      "7": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 39,
          column: 2
        }
      },
      "8": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "9": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "10": {
        start: {
          line: 44,
          column: 35
        },
        end: {
          line: 44,
          column: 115
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 27,
            column: 40
          }
        },
        loc: {
          start: {
            line: 27,
            column: 45
          },
          end: {
            line: 27,
            column: 55
          }
        },
        line: 27
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 39
          },
          end: {
            line: 28,
            column: 40
          }
        },
        loc: {
          start: {
            line: 28,
            column: 45
          },
          end: {
            line: 28,
            column: 55
          }
        },
        line: 28
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c118bf624f9816d1162a727d830bdb3bae3d2e7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sso16xx1q = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sso16xx1q();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const CourseAssignmentSubmissionSchema =
/* istanbul ignore next */
(cov_sso16xx1q().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  assignment_id: {
    type: String,
    required: true
  },
  course_id: {
    type: String,
    required: true
  },
  user_id: {
    type: String,
    required: true
  },
  submission_date: {
    type: Date,
    required: true
  },
  submission_content: {
    type: String,
    required: false
  },
  attachment_urls: {
    type: [String],
    required: false,
    default: []
  },
  grade: {
    type: Number,
    required: false
  },
  // null until graded
  feedback: {
    type: String,
    required: false
  },
  is_late: {
    type: Boolean,
    required: true,
    default: false
  },
  attempt_number: {
    type: Number,
    required: true,
    default: 1
  },
  time_spent_minutes: {
    type: Number,
    required: false
  },
  submission_status: {
    type: String,
    required: true,
    default: "submitted",
    enum: ["submitted", "draft", "graded", "returned"]
  },
  graded_by: {
    type: String,
    required: false
  },
  graded_date: {
    type: Date,
    required: false
  },
  is_active: {
    type: Boolean,
    required: true,
    default: true
  },
  is_deleted: {
    type: Boolean,
    required: true,
    default: false
  },
  meta_data: {
    type: Object,
    required: false,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_sso16xx1q().f[0]++;
      cov_sso16xx1q().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_sso16xx1q().f[1]++;
      cov_sso16xx1q().s[2]++;
      return new Date();
    }
  }
}));
// Create indexes for efficient querying
/* istanbul ignore next */
cov_sso16xx1q().s[3]++;
CourseAssignmentSubmissionSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_sso16xx1q().s[4]++;
CourseAssignmentSubmissionSchema.index.findByAssignmentId = {
  by: "assignment_id"
};
/* istanbul ignore next */
cov_sso16xx1q().s[5]++;
CourseAssignmentSubmissionSchema.index.findByCourseId = {
  by: "course_id"
};
/* istanbul ignore next */
cov_sso16xx1q().s[6]++;
CourseAssignmentSubmissionSchema.index.findByUserId = {
  by: "user_id"
};
/* istanbul ignore next */
cov_sso16xx1q().s[7]++;
CourseAssignmentSubmissionSchema.index.findBySubmissionDate = {
  by: "submission_date"
};
/* istanbul ignore next */
cov_sso16xx1q().s[8]++;
CourseAssignmentSubmissionSchema.index.findBySubmissionStatus = {
  by: "submission_status"
};
/* istanbul ignore next */
cov_sso16xx1q().s[9]++;
CourseAssignmentSubmissionSchema.index.findByGradedBy = {
  by: "graded_by"
};
const CourseAssignmentSubmission =
/* istanbul ignore next */
(cov_sso16xx1q().s[10]++, ottoman.model("course_assignment_submissions", CourseAssignmentSubmissionSchema));
export { CourseAssignmentSubmission };