1cc3d8bf1de6530801c63906a7bf2e87
/* istanbul ignore next */
function cov_5q7cj66cr() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/campuses.route.ts";
  var hash = "fdccfb668a161e424fefdf643336351ab3091d5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/campuses.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 12
        },
        end: {
          line: 7,
          column: 22
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 38,
          column: 84
        }
      },
      "2": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 69,
          column: 32
        }
      },
      "3": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 109,
          column: 30
        }
      },
      "4": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 149,
          column: 84
        }
      },
      "5": {
        start: {
          line: 150,
          column: 0
        },
        end: {
          line: 189,
          column: 33
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fdccfb668a161e424fefdf643336351ab3091d5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_5q7cj66cr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5q7cj66cr();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { CampusesController } from "@/controllers/campuses.controller";
// import { roleMiddleware } from "@/middlewares/role.middleware";
import { createCampusRequestBodySchema, createCampusResponseSchema, deleteCampusResponseSchema, getCampusesResponseSchema, getCampusResponseSchema, updateCampusRequestBodySchema, updateCampusResponseSchema } from "@/schema/campus";
const app =
/* istanbul ignore next */
(cov_5q7cj66cr().s[0]++, new Hono());
/* istanbul ignore next */
cov_5q7cj66cr().s[1]++;
app.post("/", describeRoute({
  tags: ["Campuses"],
  operationId: "createCampus",
  summary: "Create a new campus",
  description: "Creates a new campus in the system",
  responses: {
    200: {
      description: "Campus created successfully",
      content: {
        "application/json": {
          schema: resolver(createCampusResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("create_campus"),
zValidator("json", createCampusRequestBodySchema), CampusesController.createCampus);
/* istanbul ignore next */
cov_5q7cj66cr().s[2]++;
app.get("/", describeRoute({
  tags: ["Campuses"],
  operationId: "getCampuses",
  summary: "Get all campuses",
  description: "Retrieves all campuses in the system",
  responses: {
    200: {
      description: "List of campuses",
      content: {
        "application/json": {
          schema: resolver(getCampusesResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("get_all_campus"),
CampusesController.getCampuses);
/* istanbul ignore next */
cov_5q7cj66cr().s[3]++;
app.get("/:id", describeRoute({
  tags: ["Campuses"],
  operationId: "getCampus",
  summary: "Get a specific campus",
  description: "Retrieves a specific campus by ID",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Campus ID"
  }],
  responses: {
    200: {
      description: "Campus details",
      content: {
        "application/json": {
          schema: resolver(getCampusResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("get_campus"),
CampusesController.getCampus);
/* istanbul ignore next */
cov_5q7cj66cr().s[4]++;
app.put("/:id", describeRoute({
  tags: ["Campuses"],
  operationId: "updateCampus",
  summary: "Update a campus",
  description: "Updates a specific campus by ID",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Campus ID"
  }],
  responses: {
    200: {
      description: "Campus updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateCampusResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("update_campus"),
zValidator("json", updateCampusRequestBodySchema), CampusesController.updateCampus);
/* istanbul ignore next */
cov_5q7cj66cr().s[5]++;
app.delete("/:id", describeRoute({
  tags: ["Campuses"],
  operationId: "deleteCampus",
  summary: "Delete a campus",
  description: "Deletes a specific campus by ID",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Campus ID"
  }],
  responses: {
    200: {
      description: "Campus deleted successfully",
      content: {
        "application/json": {
          schema: resolver(deleteCampusResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("delete_campus"),
CampusesController.deleteCampus);
export default app;