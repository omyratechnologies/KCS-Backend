316f8a7227dda852acd6cc5160fc1735
/* istanbul ignore next */
function cov_17iajrmlmw() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/health.route.ts";
  var hash = "b704a055730bebac3d05a78fff2247074bc50904";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/health.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 4,
          column: 22
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 46,
          column: 34
        }
      },
      "2": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 92,
          column: 36
        }
      },
      "3": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 132,
          column: 34
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b704a055730bebac3d05a78fff2247074bc50904"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17iajrmlmw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17iajrmlmw();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { HealthController } from "@/controllers/health.controller";
const app =
/* istanbul ignore next */
(cov_17iajrmlmw().s[0]++, new Hono());
// Basic health check - no authentication required
/* istanbul ignore next */
cov_17iajrmlmw().s[1]++;
app.get("/", describeRoute({
  operationId: "getBasicHealthCheck",
  summary: "Basic health check",
  description: "Basic application health check - no authentication required",
  tags: ["Health"],
  responses: {
    200: {
      description: "Health check successful",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              success: {
                type: "boolean"
              },
              message: {
                type: "string"
              },
              timestamp: {
                type: "string"
              },
              version: {
                type: "string"
              },
              environment: {
                type: "string"
              }
            }
          }
        }
      }
    },
    500: {
      description: "Health check failed",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              success: {
                type: "boolean"
              },
              message: {
                type: "string"
              },
              error: {
                type: "string"
              },
              timestamp: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), HealthController.checkHealth);
// Database health check - no authentication required
/* istanbul ignore next */
cov_17iajrmlmw().s[2]++;
app.get("/database", describeRoute({
  operationId: "getDatabaseHealthCheck",
  summary: "Database health check",
  description: "Check database connectivity - no authentication required",
  tags: ["Health", "Database"],
  responses: {
    200: {
      description: "Database health check successful",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              success: {
                type: "boolean"
              },
              message: {
                type: "string"
              },
              timestamp: {
                type: "string"
              },
              service: {
                type: "string"
              }
            }
          }
        }
      }
    },
    500: {
      description: "Database health check failed",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              success: {
                type: "boolean"
              },
              message: {
                type: "string"
              },
              error: {
                type: "string"
              },
              timestamp: {
                type: "string"
              },
              service: {
                type: "string"
              },
              suggestions: {
                type: "array",
                items: {
                  type: "string"
                }
              }
            }
          }
        }
      }
    }
  }
}), HealthController.checkDatabase);
// WebRTC health check - no authentication required
/* istanbul ignore next */
cov_17iajrmlmw().s[3]++;
app.get("/webrtc", describeRoute({
  operationId: "getWebRTCHealthCheck",
  summary: "WebRTC service health check",
  description: "Check WebRTC service status and MediaSoup workers - no authentication required",
  tags: ["Health", "WebRTC"],
  responses: {
    200: {
      description: "WebRTC health check successful",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              success: {
                type: "boolean"
              },
              message: {
                type: "string"
              },
              timestamp: {
                type: "string"
              }
            }
          }
        }
      }
    },
    500: {
      description: "WebRTC health check failed",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              success: {
                type: "boolean"
              },
              message: {
                type: "string"
              },
              error: {
                type: "string"
              },
              timestamp: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), HealthController.checkWebRTC);
export default app;