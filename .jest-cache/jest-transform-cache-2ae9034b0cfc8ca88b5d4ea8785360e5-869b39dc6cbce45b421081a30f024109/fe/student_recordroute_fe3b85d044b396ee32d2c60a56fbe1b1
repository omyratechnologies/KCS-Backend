50a6a1614e47d493f3a2199907c55f53
/* istanbul ignore next */
function cov_u82ndhodi() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/student_record.route.ts";
  var hash = "57734f9af8a88cb3f6d501af36f95046ac7e16de";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/student_record.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 30,
          column: 107
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 54,
          column: 56
        }
      },
      "3": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 87,
          column: 50
        }
      },
      "4": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 120,
          column: 57
        }
      },
      "5": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 153,
          column: 111
        }
      },
      "6": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 186,
          column: 53
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "57734f9af8a88cb3f6d501af36f95046ac7e16de"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_u82ndhodi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_u82ndhodi();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { StudentRecordController } from "@/controllers/student_record.controller";
import { createStudentRecordRequestBodySchema, createStudentRecordResponseSchema, errorResponseSchema, getStudentRecordsResponseSchema, studentRecordSchema, updateStudentRecordRequestBodySchema, updateStudentRecordResponseSchema } from "@/schema/student-record";
const app =
/* istanbul ignore next */
(cov_u82ndhodi().s[0]++, new Hono());
/* istanbul ignore next */
cov_u82ndhodi().s[1]++;
app.post("/", describeRoute({
  operationId: "createStudentRecord",
  summary: "Create student record",
  description: "Creates a new academic record for a student",
  tags: ["Student Record"],
  responses: {
    200: {
      description: "Student record created successfully",
      content: {
        "application/json": {
          schema: resolver(createStudentRecordResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", createStudentRecordRequestBodySchema), StudentRecordController.createStudentRecord);
/* istanbul ignore next */
cov_u82ndhodi().s[2]++;
app.get("/", describeRoute({
  operationId: "getStudentRecordByCampusId",
  summary: "Get student records by campus",
  description: "Retrieves all student records for the current campus",
  tags: ["Student Record"],
  responses: {
    200: {
      description: "List of student records",
      content: {
        "application/json": {
          schema: resolver(getStudentRecordsResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), StudentRecordController.getStudentRecordByCampusId);
/* istanbul ignore next */
cov_u82ndhodi().s[3]++;
app.get("/i/:student_record_id", describeRoute({
  operationId: "getStudentRecordById",
  summary: "Get student record by ID",
  description: "Retrieves a specific student record by ID",
  tags: ["Student Record"],
  parameters: [{
    name: "student_record_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Student Record ID"
  }],
  responses: {
    200: {
      description: "Student record details",
      content: {
        "application/json": {
          schema: resolver(studentRecordSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), StudentRecordController.getStudentRecordById);
/* istanbul ignore next */
cov_u82ndhodi().s[4]++;
app.get("/student/:student_id", describeRoute({
  operationId: "getStudentRecordByStudentId",
  summary: "Get student records by student ID",
  description: "Retrieves all academic records for a specific student",
  tags: ["Student Record"],
  parameters: [{
    name: "student_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Student ID"
  }],
  responses: {
    200: {
      description: "List of student records",
      content: {
        "application/json": {
          schema: resolver(getStudentRecordsResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), StudentRecordController.getStudentRecordByStudentId);
/* istanbul ignore next */
cov_u82ndhodi().s[5]++;
app.put("/:student_record_id", describeRoute({
  operationId: "updateStudentRecordById",
  summary: "Update student record",
  description: "Updates a specific student record by ID",
  tags: ["Student Record"],
  parameters: [{
    name: "student_record_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Student Record ID"
  }],
  responses: {
    200: {
      description: "Student record updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateStudentRecordResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateStudentRecordRequestBodySchema), StudentRecordController.updateStudentRecordById);
/* istanbul ignore next */
cov_u82ndhodi().s[6]++;
app.delete("/:student_record_id", describeRoute({
  operationId: "deleteStudentRecordById",
  summary: "Delete student record",
  description: "Deletes a specific student record by ID",
  tags: ["Student Record"],
  parameters: [{
    name: "student_record_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Student Record ID"
  }],
  responses: {
    200: {
      description: "Student record deleted successfully",
      content: {
        "application/json": {
          schema: resolver(studentRecordSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), StudentRecordController.deleteStudentRecordById);
export default app;