6668248c1880febcfd6fad966cc89db8
/* istanbul ignore next */
function cov_25rmghcfr() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/fee_category.model.ts";
  var hash = "9636d9163bdfb99f2f5a49ed837f74467b717cf4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/fee_category.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "1": {
        start: {
          line: 32,
          column: 45
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "2": {
        start: {
          line: 33,
          column: 45
        },
        end: {
          line: 33,
          column: 55
        }
      },
      "3": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "4": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "5": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "6": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "7": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 32,
            column: 40
          }
        },
        loc: {
          start: {
            line: 32,
            column: 45
          },
          end: {
            line: 32,
            column: 55
          }
        },
        line: 32
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 40
          }
        },
        loc: {
          start: {
            line: 33,
            column: 45
          },
          end: {
            line: 33,
            column: 55
          }
        },
        line: 33
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9636d9163bdfb99f2f5a49ed837f74467b717cf4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25rmghcfr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25rmghcfr();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const FeeCategorySchema =
/* istanbul ignore next */
(cov_25rmghcfr().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  category_name: {
    type: String,
    required: true
  },
  category_code: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  is_mandatory: {
    type: Boolean,
    required: true,
    default: true
  },
  applicable_classes: {
    type: [String],
    required: true
  },
  academic_year: {
    type: String,
    required: true
  },
  frequency: {
    type: String,
    required: true,
    enum: ["monthly", "quarterly", "annually", "one-time"]
  },
  due_date_config: {
    type: Object,
    required: true
  },
  late_fee_config: {
    type: Object,
    required: true,
    default: {
      enabled: false
    }
  },
  discount_config: {
    type: Object,
    required: true,
    default: {
      enabled: false
    }
  },
  is_active: {
    type: Boolean,
    required: true,
    default: true
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_25rmghcfr().f[0]++;
      cov_25rmghcfr().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_25rmghcfr().f[1]++;
      cov_25rmghcfr().s[2]++;
      return new Date();
    }
  }
}));
/* istanbul ignore next */
cov_25rmghcfr().s[3]++;
FeeCategorySchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_25rmghcfr().s[4]++;
FeeCategorySchema.index.findByCategoryCode = {
  by: "category_code"
};
/* istanbul ignore next */
cov_25rmghcfr().s[5]++;
FeeCategorySchema.index.findByAcademicYear = {
  by: "academic_year"
};
/* istanbul ignore next */
cov_25rmghcfr().s[6]++;
FeeCategorySchema.index.findByCampusIdAndAcademicYear = {
  by: ["campus_id", "academic_year"]
};
const FeeCategory =
/* istanbul ignore next */
(cov_25rmghcfr().s[7]++, ottoman.model("fee_categories", FeeCategorySchema));
export { FeeCategory };