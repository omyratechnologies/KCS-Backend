7c5f7fe76ee58819476f7907f8007ef7
/* istanbul ignore next */
function cov_upjpsv0ka() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/class_quiz_session.model.ts";
  var hash = "ee370738b7fffa51704459983692e834182c13c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/class_quiz_session.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "1": {
        start: {
          line: 26,
          column: 45
        },
        end: {
          line: 26,
          column: 55
        }
      },
      "2": {
        start: {
          line: 27,
          column: 45
        },
        end: {
          line: 27,
          column: 55
        }
      },
      "3": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 66
        }
      },
      "4": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 64
        }
      },
      "5": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 62
        }
      },
      "6": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 33,
          column: 62
        }
      },
      "7": {
        start: {
          line: 34,
          column: 0
        },
        end: {
          line: 34,
          column: 74
        }
      },
      "8": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "9": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "10": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 39,
          column: 2
        }
      },
      "11": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 40,
          column: 84
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 26,
            column: 40
          }
        },
        loc: {
          start: {
            line: 26,
            column: 45
          },
          end: {
            line: 26,
            column: 55
          }
        },
        line: 26
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 27,
            column: 40
          }
        },
        loc: {
          start: {
            line: 27,
            column: 45
          },
          end: {
            line: 27,
            column: 55
          }
        },
        line: 27
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ee370738b7fffa51704459983692e834182c13c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_upjpsv0ka = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_upjpsv0ka();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const ClassQuizSessionSchema =
/* istanbul ignore next */
(cov_upjpsv0ka().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  class_id: {
    type: String,
    required: true
  },
  quiz_id: {
    type: String,
    required: true
  },
  user_id: {
    type: String,
    required: true
  },
  session_token: {
    type: String,
    required: true
  },
  status: {
    type: String,
    required: true,
    enum: ["not_started", "in_progress", "completed", "expired", "abandoned"]
  },
  started_at: {
    type: Date,
    required: false
  },
  completed_at: {
    type: Date,
    required: false
  },
  expires_at: {
    type: Date,
    required: false
  },
  time_limit_minutes: {
    type: Number,
    required: false
  },
  remaining_time_seconds: {
    type: Number,
    required: false
  },
  last_activity_at: {
    type: Date,
    required: true
  },
  answers_count: {
    type: Number,
    required: true,
    default: 0
  },
  total_questions: {
    type: Number,
    required: true
  },
  current_question_index: {
    type: Number,
    required: true,
    default: 0
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  is_active: {
    type: Boolean,
    required: true,
    default: true
  },
  is_deleted: {
    type: Boolean,
    required: true,
    default: false
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_upjpsv0ka().f[0]++;
      cov_upjpsv0ka().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_upjpsv0ka().f[1]++;
      cov_upjpsv0ka().s[2]++;
      return new Date();
    }
  }
}));
// Indexes for efficient querying
/* istanbul ignore next */
cov_upjpsv0ka().s[3]++;
ClassQuizSessionSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_upjpsv0ka().s[4]++;
ClassQuizSessionSchema.index.findByClassId = {
  by: "class_id"
};
/* istanbul ignore next */
cov_upjpsv0ka().s[5]++;
ClassQuizSessionSchema.index.findByQuizId = {
  by: "quiz_id"
};
/* istanbul ignore next */
cov_upjpsv0ka().s[6]++;
ClassQuizSessionSchema.index.findByUserId = {
  by: "user_id"
};
/* istanbul ignore next */
cov_upjpsv0ka().s[7]++;
ClassQuizSessionSchema.index.findBySessionToken = {
  by: "session_token"
};
/* istanbul ignore next */
cov_upjpsv0ka().s[8]++;
ClassQuizSessionSchema.index.findByStatus = {
  by: "status"
};
/* istanbul ignore next */
cov_upjpsv0ka().s[9]++;
ClassQuizSessionSchema.index.findByUserAndQuiz = {
  by: ["user_id", "quiz_id"]
};
/* istanbul ignore next */
cov_upjpsv0ka().s[10]++;
ClassQuizSessionSchema.index.findByQuizAndStatus = {
  by: ["quiz_id", "status"]
};
const ClassQuizSession =
/* istanbul ignore next */
(cov_upjpsv0ka().s[11]++, ottoman.model("class_quiz_session", ClassQuizSessionSchema));
export { ClassQuizSession };