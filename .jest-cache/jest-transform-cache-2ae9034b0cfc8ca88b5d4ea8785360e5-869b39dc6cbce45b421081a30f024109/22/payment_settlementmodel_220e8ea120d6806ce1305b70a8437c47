ec8a337b895d2b9fa7a35d778db5b6d8
/* istanbul ignore next */
function cov_7wwh3832u() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/payment_settlement.model.ts";
  var hash = "6c5bc19238a63f27aacec7b45da321181a9cb693";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/payment_settlement.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 32
        },
        end: {
          line: 64,
          column: 2
        }
      },
      "1": {
        start: {
          line: 62,
          column: 45
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "2": {
        start: {
          line: 63,
          column: 45
        },
        end: {
          line: 63,
          column: 55
        }
      },
      "3": {
        start: {
          line: 65,
          column: 42
        },
        end: {
          line: 118,
          column: 2
        }
      },
      "4": {
        start: {
          line: 116,
          column: 45
        },
        end: {
          line: 116,
          column: 55
        }
      },
      "5": {
        start: {
          line: 117,
          column: 45
        },
        end: {
          line: 117,
          column: 55
        }
      },
      "6": {
        start: {
          line: 119,
          column: 30
        },
        end: {
          line: 177,
          column: 2
        }
      },
      "7": {
        start: {
          line: 176,
          column: 45
        },
        end: {
          line: 176,
          column: 55
        }
      },
      "8": {
        start: {
          line: 178,
          column: 35
        },
        end: {
          line: 232,
          column: 2
        }
      },
      "9": {
        start: {
          line: 230,
          column: 45
        },
        end: {
          line: 230,
          column: 55
        }
      },
      "10": {
        start: {
          line: 231,
          column: 45
        },
        end: {
          line: 231,
          column: 55
        }
      },
      "11": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 235,
          column: 67
        }
      },
      "12": {
        start: {
          line: 236,
          column: 0
        },
        end: {
          line: 236,
          column: 79
        }
      },
      "13": {
        start: {
          line: 237,
          column: 0
        },
        end: {
          line: 237,
          column: 73
        }
      },
      "14": {
        start: {
          line: 238,
          column: 0
        },
        end: {
          line: 238,
          column: 73
        }
      },
      "15": {
        start: {
          line: 239,
          column: 0
        },
        end: {
          line: 239,
          column: 76
        }
      },
      "16": {
        start: {
          line: 241,
          column: 0
        },
        end: {
          line: 241,
          column: 77
        }
      },
      "17": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 244,
          column: 2
        }
      },
      "18": {
        start: {
          line: 245,
          column: 0
        },
        end: {
          line: 245,
          column: 72
        }
      },
      "19": {
        start: {
          line: 246,
          column: 0
        },
        end: {
          line: 246,
          column: 77
        }
      },
      "20": {
        start: {
          line: 248,
          column: 0
        },
        end: {
          line: 248,
          column: 65
        }
      },
      "21": {
        start: {
          line: 249,
          column: 0
        },
        end: {
          line: 249,
          column: 67
        }
      },
      "22": {
        start: {
          line: 250,
          column: 0
        },
        end: {
          line: 250,
          column: 70
        }
      },
      "23": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 251,
          column: 64
        }
      },
      "24": {
        start: {
          line: 252,
          column: 0
        },
        end: {
          line: 252,
          column: 62
        }
      },
      "25": {
        start: {
          line: 254,
          column: 0
        },
        end: {
          line: 254,
          column: 70
        }
      },
      "26": {
        start: {
          line: 255,
          column: 0
        },
        end: {
          line: 255,
          column: 72
        }
      },
      "27": {
        start: {
          line: 256,
          column: 0
        },
        end: {
          line: 256,
          column: 69
        }
      },
      "28": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 257,
          column: 65
        }
      },
      "29": {
        start: {
          line: 258,
          column: 0
        },
        end: {
          line: 258,
          column: 67
        }
      },
      "30": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 87
        }
      },
      "31": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 261,
          column: 118
        }
      },
      "32": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 82
        }
      },
      "33": {
        start: {
          line: 263,
          column: 29
        },
        end: {
          line: 263,
          column: 97
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 62,
            column: 39
          },
          end: {
            line: 62,
            column: 40
          }
        },
        loc: {
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 62,
            column: 55
          }
        },
        line: 62
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 63,
            column: 39
          },
          end: {
            line: 63,
            column: 40
          }
        },
        loc: {
          start: {
            line: 63,
            column: 45
          },
          end: {
            line: 63,
            column: 55
          }
        },
        line: 63
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 116,
            column: 39
          },
          end: {
            line: 116,
            column: 40
          }
        },
        loc: {
          start: {
            line: 116,
            column: 45
          },
          end: {
            line: 116,
            column: 55
          }
        },
        line: 116
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 117,
            column: 39
          },
          end: {
            line: 117,
            column: 40
          }
        },
        loc: {
          start: {
            line: 117,
            column: 45
          },
          end: {
            line: 117,
            column: 55
          }
        },
        line: 117
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 176,
            column: 39
          },
          end: {
            line: 176,
            column: 40
          }
        },
        loc: {
          start: {
            line: 176,
            column: 45
          },
          end: {
            line: 176,
            column: 55
          }
        },
        line: 176
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 230,
            column: 39
          },
          end: {
            line: 230,
            column: 40
          }
        },
        loc: {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 230,
            column: 55
          }
        },
        line: 230
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 231,
            column: 39
          },
          end: {
            line: 231,
            column: 40
          }
        },
        loc: {
          start: {
            line: 231,
            column: 45
          },
          end: {
            line: 231,
            column: 55
          }
        },
        line: 231
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6c5bc19238a63f27aacec7b45da321181a9cb693"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7wwh3832u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7wwh3832u();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
// ========================= DATABASE SCHEMAS =========================
const PaymentSettlementSchema =
/* istanbul ignore next */
(cov_7wwh3832u().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  settlement_batch_id: {
    type: String,
    required: true
  },
  settlement_date: {
    type: Date,
    required: true
  },
  settlement_period_start: {
    type: Date,
    required: true
  },
  settlement_period_end: {
    type: Date,
    required: true
  },
  settlement_status: {
    type: String,
    required: true,
    enum: ["pending", "processing", "completed", "failed", "cancelled"],
    default: "pending"
  },
  total_transaction_amount: {
    type: Number,
    required: true
  },
  total_gateway_fees: {
    type: Number,
    required: true
  },
  total_platform_fees: {
    type: Number,
    required: true
  },
  total_taxes: {
    type: Number,
    required: true
  },
  net_settlement_amount: {
    type: Number,
    required: true
  },
  currency: {
    type: String,
    required: true,
    default: "INR"
  },
  gateway_provider: {
    type: String,
    required: true,
    enum: ["razorpay", "payu", "cashfree"]
  },
  gateway_settlement_id: {
    type: String,
    required: false
  },
  gateway_settlement_reference: {
    type: String,
    required: false
  },
  school_bank_details: {
    type: Object,
    required: true
  },
  transaction_summary: {
    type: Object,
    required: true
  },
  processing_details: {
    type: Object,
    required: true
  },
  compliance_details: {
    type: Object,
    required: true,
    default: {}
  },
  security_metadata: {
    type: Object,
    required: true,
    default: {}
  },
  notification_status: {
    type: Object,
    required: true,
    default: {
      school_notified: false,
      email_notification_status: "pending",
      sms_notification_status: "pending",
      webhook_notification_status: "pending"
    }
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[0]++;
      cov_7wwh3832u().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[1]++;
      cov_7wwh3832u().s[2]++;
      return new Date();
    }
  }
}));
const PaymentGatewayConfigurationSchema =
/* istanbul ignore next */
(cov_7wwh3832u().s[3]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  gateway_provider: {
    type: String,
    required: true,
    enum: ["razorpay", "payu", "cashfree"]
  },
  gateway_mode: {
    type: String,
    required: true,
    enum: ["test", "live"],
    default: "test"
  },
  status: {
    type: String,
    required: true,
    enum: ["active", "inactive", "suspended", "under_review"],
    default: "inactive"
  },
  is_primary: {
    type: Boolean,
    required: true,
    default: false
  },
  configuration_details: {
    type: Object,
    required: true
  },
  gateway_settings: {
    type: Object,
    required: true
  },
  fee_structure: {
    type: Object,
    required: true
  },
  security_configuration: {
    type: Object,
    required: true
  },
  testing_details: {
    type: Object,
    required: true,
    default: {
      last_test_status: "not_tested",
      connectivity_status: "disconnected",
      health_check_status: "unhealthy",
      last_health_check: new Date()
    }
  },
  compliance_settings: {
    type: Object,
    required: true
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[2]++;
      cov_7wwh3832u().s[4]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[3]++;
      cov_7wwh3832u().s[5]++;
      return new Date();
    }
  }
}));
const PaymentAuditLogSchema =
/* istanbul ignore next */
(cov_7wwh3832u().s[6]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  event_type: {
    type: String,
    required: true,
    enum: ["payment_initiated", "payment_completed", "payment_failed", "settlement_initiated", "settlement_completed", "settlement_failed", "gateway_configured", "credentials_updated", "webhook_received", "refund_initiated", "refund_completed", "security_event", "compliance_check", "audit_review"]
  },
  event_category: {
    type: String,
    required: true,
    enum: ["payment", "settlement", "security", "compliance", "configuration"]
  },
  severity: {
    type: String,
    required: true,
    enum: ["low", "medium", "high", "critical"]
  },
  event_details: {
    type: Object,
    required: true
  },
  security_context: {
    type: Object,
    required: true
  },
  system_context: {
    type: Object,
    required: true
  },
  data_changes: {
    type: Object,
    required: false
  },
  compliance_tags: {
    type: [String],
    required: true,
    default: []
  },
  retention_period_days: {
    type: Number,
    required: true,
    default: 2555
  },
  // 7 years
  is_sensitive_data: {
    type: Boolean,
    required: true,
    default: false
  },
  data_classification: {
    type: String,
    required: true,
    enum: ["public", "internal", "confidential", "restricted"],
    default: "internal"
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[4]++;
      cov_7wwh3832u().s[7]++;
      return new Date();
    }
  }
}));
const PaymentSecurityEventSchema =
/* istanbul ignore next */
(cov_7wwh3832u().s[8]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  event_type: {
    type: String,
    required: true,
    enum: ["suspicious_activity", "credential_breach", "unauthorized_access", "fraud_attempt", "data_leak", "system_intrusion", "compliance_violation", "encryption_failure", "webhook_tampering", "api_abuse"]
  },
  severity: {
    type: String,
    required: true,
    enum: ["low", "medium", "high", "critical"]
  },
  status: {
    type: String,
    required: true,
    enum: ["detected", "investigating", "resolved", "false_positive"],
    default: "detected"
  },
  threat_details: {
    type: Object,
    required: true
  },
  detection_details: {
    type: Object,
    required: true
  },
  response_details: {
    type: Object,
    required: false
  },
  notification_details: {
    type: Object,
    required: true,
    default: {
      internal_team_notified: false,
      school_notified: false,
      regulatory_reported: false,
      escalation_level: 0
    }
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[5]++;
      cov_7wwh3832u().s[9]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_7wwh3832u().f[6]++;
      cov_7wwh3832u().s[10]++;
      return new Date();
    }
  }
}));
// ========================= INDEXES =========================
// Payment Settlement Indexes
/* istanbul ignore next */
cov_7wwh3832u().s[11]++;
PaymentSettlementSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_7wwh3832u().s[12]++;
PaymentSettlementSchema.index.findBySettlementDate = {
  by: "settlement_date"
};
/* istanbul ignore next */
cov_7wwh3832u().s[13]++;
PaymentSettlementSchema.index.findByStatus = {
  by: "settlement_status"
};
/* istanbul ignore next */
cov_7wwh3832u().s[14]++;
PaymentSettlementSchema.index.findByGateway = {
  by: "gateway_provider"
};
/* istanbul ignore next */
cov_7wwh3832u().s[15]++;
PaymentSettlementSchema.index.findByBatchId = {
  by: "settlement_batch_id"
};
// Gateway Configuration Indexes
/* istanbul ignore next */
cov_7wwh3832u().s[16]++;
PaymentGatewayConfigurationSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_7wwh3832u().s[17]++;
PaymentGatewayConfigurationSchema.index.findByGateway = {
  by: "gateway_provider"
};
/* istanbul ignore next */
cov_7wwh3832u().s[18]++;
PaymentGatewayConfigurationSchema.index.findByStatus = {
  by: "status"
};
/* istanbul ignore next */
cov_7wwh3832u().s[19]++;
PaymentGatewayConfigurationSchema.index.findByPrimary = {
  by: "is_primary"
};
// Audit Log Indexes
/* istanbul ignore next */
cov_7wwh3832u().s[20]++;
PaymentAuditLogSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_7wwh3832u().s[21]++;
PaymentAuditLogSchema.index.findByEventType = {
  by: "event_type"
};
/* istanbul ignore next */
cov_7wwh3832u().s[22]++;
PaymentAuditLogSchema.index.findByCategory = {
  by: "event_category"
};
/* istanbul ignore next */
cov_7wwh3832u().s[23]++;
PaymentAuditLogSchema.index.findBySeverity = {
  by: "severity"
};
/* istanbul ignore next */
cov_7wwh3832u().s[24]++;
PaymentAuditLogSchema.index.findByDate = {
  by: "created_at"
};
// Security Event Indexes
/* istanbul ignore next */
cov_7wwh3832u().s[25]++;
PaymentSecurityEventSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_7wwh3832u().s[26]++;
PaymentSecurityEventSchema.index.findByEventType = {
  by: "event_type"
};
/* istanbul ignore next */
cov_7wwh3832u().s[27]++;
PaymentSecurityEventSchema.index.findBySeverity = {
  by: "severity"
};
/* istanbul ignore next */
cov_7wwh3832u().s[28]++;
PaymentSecurityEventSchema.index.findByStatus = {
  by: "status"
};
/* istanbul ignore next */
cov_7wwh3832u().s[29]++;
PaymentSecurityEventSchema.index.findByDate = {
  by: "created_at"
};
// ========================= MODELS =========================
const PaymentSettlement =
/* istanbul ignore next */
(cov_7wwh3832u().s[30]++, ottoman.model("payment_settlements", PaymentSettlementSchema));
const PaymentGatewayConfiguration =
/* istanbul ignore next */
(cov_7wwh3832u().s[31]++, ottoman.model("payment_gateway_configurations", PaymentGatewayConfigurationSchema));
const PaymentAuditLog =
/* istanbul ignore next */
(cov_7wwh3832u().s[32]++, ottoman.model("payment_audit_logs", PaymentAuditLogSchema));
const PaymentSecurityEvent =
/* istanbul ignore next */
(cov_7wwh3832u().s[33]++, ottoman.model("payment_security_events", PaymentSecurityEventSchema));
export { PaymentAuditLog, PaymentGatewayConfiguration, PaymentSecurityEvent, PaymentSettlement };