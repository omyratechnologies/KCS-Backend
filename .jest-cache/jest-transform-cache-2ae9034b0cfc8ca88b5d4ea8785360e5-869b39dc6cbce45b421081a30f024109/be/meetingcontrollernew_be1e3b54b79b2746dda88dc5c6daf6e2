dcfb4d2b415584a24aded8b13045e377
/* istanbul ignore next */
function cov_2r0ukrajml() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/meeting.controller.new.ts";
  var hash = "8da6a3f4ca955e1371b6424e3bc56237255d5d1a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/meeting.controller.new.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 23
        }
      },
      "1": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "2": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "3": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "4": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "5": {
        start: {
          line: 26,
          column: 181
        },
        end: {
          line: 26,
          column: 201
        }
      },
      "6": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 42,
          column: 10
        }
      },
      "7": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "8": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 56
        }
      },
      "9": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 16
        }
      },
      "10": {
        start: {
          line: 60,
          column: 0
        },
        end: {
          line: 78,
          column: 2
        }
      },
      "11": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "12": {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "13": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 45
        }
      },
      "14": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 83
        }
      },
      "15": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "16": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 57
        }
      },
      "17": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 16
        }
      },
      "18": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 108,
          column: 2
        }
      },
      "19": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "20": {
        start: {
          line: 84,
          column: 31
        },
        end: {
          line: 84,
          column: 46
        }
      },
      "21": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 71
        }
      },
      "22": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "23": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "24": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "25": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 76
        }
      },
      "26": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "27": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "28": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 56
        }
      },
      "29": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 16
        }
      },
      "30": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 129,
          column: 2
        }
      },
      "31": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "32": {
        start: {
          line: 114,
          column: 31
        },
        end: {
          line: 114,
          column: 49
        }
      },
      "33": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 115,
          column: 87
        }
      },
      "34": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "35": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 69
        }
      },
      "36": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 127,
          column: 16
        }
      },
      "37": {
        start: {
          line: 133,
          column: 0
        },
        end: {
          line: 152,
          column: 2
        }
      },
      "38": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "39": {
        start: {
          line: 135,
          column: 31
        },
        end: {
          line: 135,
          column: 46
        }
      },
      "40": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 42
        }
      },
      "41": {
        start: {
          line: 137,
          column: 21
        },
        end: {
          line: 137,
          column: 41
        }
      },
      "42": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 85
        }
      },
      "43": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "44": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 56
        }
      },
      "45": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 16
        }
      },
      "46": {
        start: {
          line: 156,
          column: 0
        },
        end: {
          line: 174,
          column: 2
        }
      },
      "47": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 173,
          column: 5
        }
      },
      "48": {
        start: {
          line: 158,
          column: 31
        },
        end: {
          line: 158,
          column: 46
        }
      },
      "49": {
        start: {
          line: 159,
          column: 24
        },
        end: {
          line: 159,
          column: 42
        }
      },
      "50": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 160,
          column: 79
        }
      },
      "51": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "52": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "53": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 16
        }
      },
      "54": {
        start: {
          line: 178,
          column: 0
        },
        end: {
          line: 196,
          column: 2
        }
      },
      "55": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "56": {
        start: {
          line: 180,
          column: 31
        },
        end: {
          line: 180,
          column: 46
        }
      },
      "57": {
        start: {
          line: 181,
          column: 24
        },
        end: {
          line: 181,
          column: 42
        }
      },
      "58": {
        start: {
          line: 182,
          column: 24
        },
        end: {
          line: 182,
          column: 78
        }
      },
      "59": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "60": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 56
        }
      },
      "61": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 194,
          column: 16
        }
      },
      "62": {
        start: {
          line: 200,
          column: 0
        },
        end: {
          line: 218,
          column: 2
        }
      },
      "63": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 217,
          column: 5
        }
      },
      "64": {
        start: {
          line: 202,
          column: 31
        },
        end: {
          line: 202,
          column: 46
        }
      },
      "65": {
        start: {
          line: 203,
          column: 24
        },
        end: {
          line: 203,
          column: 42
        }
      },
      "66": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 76
        }
      },
      "67": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "68": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 54
        }
      },
      "69": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 216,
          column: 16
        }
      },
      "70": {
        start: {
          line: 222,
          column: 0
        },
        end: {
          line: 239,
          column: 2
        }
      },
      "71": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 238,
          column: 5
        }
      },
      "72": {
        start: {
          line: 224,
          column: 31
        },
        end: {
          line: 224,
          column: 46
        }
      },
      "73": {
        start: {
          line: 225,
          column: 29
        },
        end: {
          line: 225,
          column: 84
        }
      },
      "74": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 230,
          column: 11
        }
      },
      "75": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 61
        }
      },
      "76": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 237,
          column: 16
        }
      },
      "77": {
        start: {
          line: 243,
          column: 0
        },
        end: {
          line: 261,
          column: 2
        }
      },
      "78": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "79": {
        start: {
          line: 245,
          column: 31
        },
        end: {
          line: 245,
          column: 46
        }
      },
      "80": {
        start: {
          line: 246,
          column: 22
        },
        end: {
          line: 246,
          column: 59
        }
      },
      "81": {
        start: {
          line: 247,
          column: 28
        },
        end: {
          line: 247,
          column: 82
        }
      },
      "82": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      },
      "83": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 61
        }
      },
      "84": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 259,
          column: 16
        }
      },
      "85": {
        start: {
          line: 265,
          column: 0
        },
        end: {
          line: 282,
          column: 2
        }
      },
      "86": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 281,
          column: 5
        }
      },
      "87": {
        start: {
          line: 267,
          column: 31
        },
        end: {
          line: 267,
          column: 46
        }
      },
      "88": {
        start: {
          line: 268,
          column: 27
        },
        end: {
          line: 268,
          column: 80
        }
      },
      "89": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "90": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 59
        }
      },
      "91": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 280,
          column: 16
        }
      },
      "92": {
        start: {
          line: 286,
          column: 0
        },
        end: {
          line: 302,
          column: 2
        }
      },
      "93": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 301,
          column: 5
        }
      },
      "94": {
        start: {
          line: 288,
          column: 31
        },
        end: {
          line: 288,
          column: 46
        }
      },
      "95": {
        start: {
          line: 289,
          column: 26
        },
        end: {
          line: 289,
          column: 78
        }
      },
      "96": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 293,
          column: 11
        }
      },
      "97": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 58
        }
      },
      "98": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 300,
          column: 16
        }
      },
      "99": {
        start: {
          line: 306,
          column: 0
        },
        end: {
          line: 331,
          column: 2
        }
      },
      "100": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 330,
          column: 5
        }
      },
      "101": {
        start: {
          line: 308,
          column: 31
        },
        end: {
          line: 308,
          column: 46
        }
      },
      "102": {
        start: {
          line: 309,
          column: 24
        },
        end: {
          line: 309,
          column: 42
        }
      },
      "103": {
        start: {
          line: 310,
          column: 24
        },
        end: {
          line: 310,
          column: 71
        }
      },
      "104": {
        start: {
          line: 312,
          column: 32
        },
        end: {
          line: 312,
          column: 78
        }
      },
      "105": {
        start: {
          line: 314,
          column: 29
        },
        end: {
          line: 314,
          column: 158
        }
      },
      "106": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 322,
          column: 11
        }
      },
      "107": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 62
        }
      },
      "108": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 329,
          column: 16
        }
      },
      "109": {
        start: {
          line: 335,
          column: 0
        },
        end: {
          line: 351,
          column: 2
        }
      },
      "110": {
        start: {
          line: 336,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "111": {
        start: {
          line: 337,
          column: 31
        },
        end: {
          line: 337,
          column: 46
        }
      },
      "112": {
        start: {
          line: 338,
          column: 22
        },
        end: {
          line: 338,
          column: 69
        }
      },
      "113": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 342,
          column: 11
        }
      },
      "114": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 59
        }
      },
      "115": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 349,
          column: 16
        }
      },
      "116": {
        start: {
          line: 355,
          column: 0
        },
        end: {
          line: 379,
          column: 2
        }
      },
      "117": {
        start: {
          line: 356,
          column: 4
        },
        end: {
          line: 378,
          column: 5
        }
      },
      "118": {
        start: {
          line: 357,
          column: 26
        },
        end: {
          line: 357,
          column: 46
        }
      },
      "119": {
        start: {
          line: 358,
          column: 26
        },
        end: {
          line: 358,
          column: 46
        }
      },
      "120": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "121": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 364,
          column: 20
        }
      },
      "122": {
        start: {
          line: 366,
          column: 22
        },
        end: {
          line: 366,
          column: 110
        }
      },
      "123": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 370,
          column: 11
        }
      },
      "124": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 61
        }
      },
      "125": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 377,
          column: 16
        }
      },
      "126": {
        start: {
          line: 383,
          column: 0
        },
        end: {
          line: 406,
          column: 2
        }
      },
      "127": {
        start: {
          line: 384,
          column: 4
        },
        end: {
          line: 405,
          column: 5
        }
      },
      "128": {
        start: {
          line: 385,
          column: 29
        },
        end: {
          line: 385,
          column: 60
        }
      },
      "129": {
        start: {
          line: 386,
          column: 28
        },
        end: {
          line: 386,
          column: 52
        }
      },
      "130": {
        start: {
          line: 387,
          column: 30
        },
        end: {
          line: 387,
          column: 132
        }
      },
      "131": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 396,
          column: 11
        }
      },
      "132": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 55
        }
      },
      "133": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 404,
          column: 16
        }
      },
      "134": {
        start: {
          line: 410,
          column: 0
        },
        end: {
          line: 464,
          column: 2
        }
      },
      "135": {
        start: {
          line: 412,
          column: 4
        },
        end: {
          line: 463,
          column: 5
        }
      },
      "136": {
        start: {
          line: 413,
          column: 31
        },
        end: {
          line: 413,
          column: 46
        }
      },
      "137": {
        start: {
          line: 414,
          column: 37
        },
        end: {
          line: 414,
          column: 57
        }
      },
      "138": {
        start: {
          line: 415,
          column: 24
        },
        end: {
          line: 415,
          column: 42
        }
      },
      "139": {
        start: {
          line: 416,
          column: 26
        },
        end: {
          line: 416,
          column: 46
        }
      },
      "140": {
        start: {
          line: 418,
          column: 24
        },
        end: {
          line: 418,
          column: 71
        }
      },
      "141": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "142": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 423,
          column: 20
        }
      },
      "143": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "144": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 430,
          column: 20
        }
      },
      "145": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "146": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 437,
          column: 20
        }
      },
      "147": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 455,
          column: 11
        }
      },
      "148": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 55
        }
      },
      "149": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 462,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 20,
            column: 34
          },
          end: {
            line: 20,
            column: 35
          }
        },
        loc: {
          start: {
            line: 20,
            column: 49
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 60,
            column: 36
          }
        },
        loc: {
          start: {
            line: 60,
            column: 50
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 60
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 82,
            column: 35
          },
          end: {
            line: 82,
            column: 36
          }
        },
        loc: {
          start: {
            line: 82,
            column: 50
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 82
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 112,
            column: 46
          },
          end: {
            line: 112,
            column: 47
          }
        },
        loc: {
          start: {
            line: 112,
            column: 61
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 112
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 133,
            column: 34
          },
          end: {
            line: 133,
            column: 35
          }
        },
        loc: {
          start: {
            line: 133,
            column: 49
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 133
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 156,
            column: 34
          },
          end: {
            line: 156,
            column: 35
          }
        },
        loc: {
          start: {
            line: 156,
            column: 49
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 156
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 178,
            column: 33
          },
          end: {
            line: 178,
            column: 34
          }
        },
        loc: {
          start: {
            line: 178,
            column: 48
          },
          end: {
            line: 196,
            column: 1
          }
        },
        line: 178
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 200,
            column: 31
          },
          end: {
            line: 200,
            column: 32
          }
        },
        loc: {
          start: {
            line: 200,
            column: 46
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 200
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 222,
            column: 43
          },
          end: {
            line: 222,
            column: 44
          }
        },
        loc: {
          start: {
            line: 222,
            column: 58
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 222
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 243,
            column: 35
          },
          end: {
            line: 243,
            column: 36
          }
        },
        loc: {
          start: {
            line: 243,
            column: 50
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 243
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 265,
            column: 41
          },
          end: {
            line: 265,
            column: 42
          }
        },
        loc: {
          start: {
            line: 265,
            column: 56
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 265
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 286,
            column: 40
          },
          end: {
            line: 286,
            column: 41
          }
        },
        loc: {
          start: {
            line: 286,
            column: 55
          },
          end: {
            line: 302,
            column: 1
          }
        },
        line: 286
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 306,
            column: 36
          },
          end: {
            line: 306,
            column: 37
          }
        },
        loc: {
          start: {
            line: 306,
            column: 51
          },
          end: {
            line: 331,
            column: 1
          }
        },
        line: 306
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 335,
            column: 40
          },
          end: {
            line: 335,
            column: 41
          }
        },
        loc: {
          start: {
            line: 335,
            column: 55
          },
          end: {
            line: 351,
            column: 1
          }
        },
        line: 335
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 355,
            column: 35
          },
          end: {
            line: 355,
            column: 36
          }
        },
        loc: {
          start: {
            line: 355,
            column: 50
          },
          end: {
            line: 379,
            column: 1
          }
        },
        line: 355
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 383,
            column: 35
          },
          end: {
            line: 383,
            column: 36
          }
        },
        loc: {
          start: {
            line: 383,
            column: 50
          },
          end: {
            line: 406,
            column: 1
          }
        },
        line: 383
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 410,
            column: 32
          },
          end: {
            line: 410,
            column: 33
          }
        },
        loc: {
          start: {
            line: 410,
            column: 47
          },
          end: {
            line: 464,
            column: 1
          }
        },
        line: 410
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 26,
            column: 34
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 36
          },
          end: {
            line: 26,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 55
          },
          end: {
            line: 26,
            column: 58
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 78
          },
          end: {
            line: 26,
            column: 106
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 101
          },
          end: {
            line: 26,
            column: 106
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 108
          },
          end: {
            line: 26,
            column: 137
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 132
          },
          end: {
            line: 26,
            column: 137
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 139
          },
          end: {
            line: 26,
            column: 152
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 150
          },
          end: {
            line: 26,
            column: 152
          }
        }],
        line: 26
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 154
          },
          end: {
            line: 26,
            column: 175
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 26,
            column: 173
          },
          end: {
            line: 26,
            column: 175
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 53
          },
          end: {
            line: 46,
            column: 62
          }
        }, {
          start: {
            line: 46,
            column: 65
          },
          end: {
            line: 46,
            column: 76
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 53,
            column: 21
          },
          end: {
            line: 53,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 46
          },
          end: {
            line: 53,
            column: 59
          }
        }, {
          start: {
            line: 53,
            column: 62
          },
          end: {
            line: 53,
            column: 88
          }
        }],
        line: 53
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 21
          },
          end: {
            line: 75,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 46
          },
          end: {
            line: 75,
            column: 59
          }
        }, {
          start: {
            line: 75,
            column: 62
          },
          end: {
            line: 75,
            column: 88
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 105,
            column: 21
          },
          end: {
            line: 105,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 105,
            column: 59
          }
        }, {
          start: {
            line: 105,
            column: 62
          },
          end: {
            line: 105,
            column: 81
          }
        }],
        line: 105
      },
      "11": {
        loc: {
          start: {
            line: 126,
            column: 21
          },
          end: {
            line: 126,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 46
          },
          end: {
            line: 126,
            column: 59
          }
        }, {
          start: {
            line: 126,
            column: 62
          },
          end: {
            line: 126,
            column: 81
          }
        }],
        line: 126
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 149,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 46
          },
          end: {
            line: 149,
            column: 59
          }
        }, {
          start: {
            line: 149,
            column: 62
          },
          end: {
            line: 149,
            column: 88
          }
        }],
        line: 149
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 21
          },
          end: {
            line: 171,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 46
          },
          end: {
            line: 171,
            column: 59
          }
        }, {
          start: {
            line: 171,
            column: 62
          },
          end: {
            line: 171,
            column: 88
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 193,
            column: 21
          },
          end: {
            line: 193,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 46
          },
          end: {
            line: 193,
            column: 59
          }
        }, {
          start: {
            line: 193,
            column: 62
          },
          end: {
            line: 193,
            column: 87
          }
        }],
        line: 193
      },
      "15": {
        loc: {
          start: {
            line: 215,
            column: 21
          },
          end: {
            line: 215,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 46
          },
          end: {
            line: 215,
            column: 59
          }
        }, {
          start: {
            line: 215,
            column: 62
          },
          end: {
            line: 215,
            column: 85
          }
        }],
        line: 215
      },
      "16": {
        loc: {
          start: {
            line: 246,
            column: 22
          },
          end: {
            line: 246,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 22
          },
          end: {
            line: 246,
            column: 52
          }
        }, {
          start: {
            line: 246,
            column: 56
          },
          end: {
            line: 246,
            column: 59
          }
        }],
        line: 246
      },
      "17": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 365,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 365,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "18": {
        loc: {
          start: {
            line: 366,
            column: 58
          },
          end: {
            line: 366,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 366,
            column: 88
          },
          end: {
            line: 366,
            column: 97
          }
        }, {
          start: {
            line: 366,
            column: 100
          },
          end: {
            line: 366,
            column: 109
          }
        }],
        line: 366
      },
      "19": {
        loc: {
          start: {
            line: 387,
            column: 30
          },
          end: {
            line: 387,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 387,
            column: 101
          },
          end: {
            line: 387,
            column: 110
          }
        }, {
          start: {
            line: 387,
            column: 113
          },
          end: {
            line: 387,
            column: 132
          }
        }],
        line: 387
      },
      "20": {
        loc: {
          start: {
            line: 387,
            column: 30
          },
          end: {
            line: 387,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 387,
            column: 30
          },
          end: {
            line: 387,
            column: 63
          }
        }, {
          start: {
            line: 387,
            column: 67
          },
          end: {
            line: 387,
            column: 98
          }
        }],
        line: 387
      },
      "21": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "22": {
        loc: {
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "23": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 426,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 426,
            column: 36
          }
        }, {
          start: {
            line: 426,
            column: 40
          },
          end: {
            line: 426,
            column: 85
          }
        }],
        line: 426
      },
      "24": {
        loc: {
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 438,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 433
      },
      "25": {
        loc: {
          start: {
            line: 433,
            column: 12
          },
          end: {
            line: 433,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 433,
            column: 12
          },
          end: {
            line: 433,
            column: 46
          }
        }, {
          start: {
            line: 433,
            column: 50
          },
          end: {
            line: 433,
            column: 88
          }
        }],
        line: 433
      },
      "26": {
        loc: {
          start: {
            line: 449,
            column: 42
          },
          end: {
            line: 449,
            column: 131
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 43
          },
          end: {
            line: 449,
            column: 125
          }
        }, {
          start: {
            line: 449,
            column: 130
          },
          end: {
            line: 449,
            column: 131
          }
        }],
        line: 449
      },
      "27": {
        loc: {
          start: {
            line: 449,
            column: 43
          },
          end: {
            line: 449,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 449,
            column: 107
          },
          end: {
            line: 449,
            column: 113
          }
        }, {
          start: {
            line: 449,
            column: 116
          },
          end: {
            line: 449,
            column: 125
          }
        }],
        line: 449
      },
      "28": {
        loc: {
          start: {
            line: 449,
            column: 43
          },
          end: {
            line: 449,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 449,
            column: 43
          },
          end: {
            line: 449,
            column: 87
          }
        }, {
          start: {
            line: 449,
            column: 91
          },
          end: {
            line: 449,
            column: 104
          }
        }],
        line: 449
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8da6a3f4ca955e1371b6424e3bc56237255d5d1a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2r0ukrajml = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2r0ukrajml();
var _a;
import { MeetingService } from "@/services/meeting.service";
import { SocketService } from "@/services/socket.service";
import { WebRTCService } from "@/services/webrtc.service";
/**
 * 🎪 Enhanced Meeting Controller for Real-time Video Conferencing
 *
 * Provides REST API endpoints for:
 * - Advanced meeting management
 * - Real-time WebRTC coordination
 * - Meeting analytics and reporting
 * - System health monitoring
 */
export class MeetingController {}
/* istanbul ignore next */
cov_2r0ukrajml().s[0]++;
_a = MeetingController;
/**
 * Create a new meeting with enhanced real-time features
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[1]++;
MeetingController.createMeeting = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[0]++;
  cov_2r0ukrajml().s[2]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[3]++, ctx.get("campus_id"));
    const creator_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[4]++, ctx.get("user_id"));
    const {
      meeting_description,
      meeting_end_time,
      meeting_location,
      meeting_meta_data,
      meeting_name,
      meeting_start_time,
      participants,
      // Enhanced options
      meeting_type =
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[0][0]++, "scheduled"),
      max_participants =
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[1][0]++, 100),
      meeting_password,
      waiting_room_enabled =
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[2][0]++, false),
      require_host_approval =
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[3][0]++, false),
      features =
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[4][0]++, {}),
      recording_config =
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[5][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[5]++, await ctx.req.json());
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[6]++, await MeetingService.createMeeting(campus_id, creator_id, {
      meeting_description,
      meeting_end_time: new Date(meeting_end_time),
      meeting_location,
      meeting_meta_data,
      meeting_name,
      meeting_start_time: new Date(meeting_start_time),
      participants,
      meeting_type,
      max_participants,
      meeting_password,
      waiting_room_enabled,
      require_host_approval,
      features,
      recording_config
    }));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[7]++;
    return ctx.json({
      success: true,
      data: meeting,
      message: `${meeting_type === "instant" ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[6][0]++, "Instant") :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[6][1]++, "Scheduled")} meeting created successfully`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[8]++;
    console.error("Error creating meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[9]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[7][1]++, "Failed to create meeting")
    }, 500);
  }
};
/**
 * Get all meetings with real-time status
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[10]++;
MeetingController.getAllMeetings = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[1]++;
  cov_2r0ukrajml().s[11]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[12]++, ctx.get("campus_id"));
    const creator_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[13]++, ctx.get("user_id"));
    const meetings =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[14]++, await MeetingService.getAllMeetings(campus_id, creator_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[15]++;
    return ctx.json({
      success: true,
      data: meetings,
      count: meetings.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[16]++;
    console.error("Error fetching meetings:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[17]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[8][1]++, "Failed to fetch meetings")
    }, 500);
  }
};
/**
 * Get meeting by ID with full details
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[18]++;
MeetingController.getMeetingById = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[2]++;
  cov_2r0ukrajml().s[19]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[20]++, ctx.req.param());
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[21]++, await MeetingService.getMeetingById(meeting_id));
    // Add real-time statistics if meeting is live
    let liveStats =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[22]++, null);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[23]++;
    if (meeting.meeting_status === "live") {
      /* istanbul ignore next */
      cov_2r0ukrajml().b[9][0]++;
      cov_2r0ukrajml().s[24]++;
      try {
        /* istanbul ignore next */
        cov_2r0ukrajml().s[25]++;
        liveStats = await WebRTCService.getMeetingStats(meeting_id);
      } catch (error) {
        /* istanbul ignore next */
        cov_2r0ukrajml().s[26]++;
        console.warn("Failed to get live stats:", error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_2r0ukrajml().b[9][1]++;
    }
    cov_2r0ukrajml().s[27]++;
    return ctx.json({
      success: true,
      data: Object.assign(Object.assign({}, meeting), {
        liveStats
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[28]++;
    console.error("Error fetching meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[29]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[10][1]++, "Meeting not found")
    }, 404);
  }
};
/**
 * Get meetings where user is a participant
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[30]++;
MeetingController.getMeetingByParticipantId = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[3]++;
  cov_2r0ukrajml().s[31]++;
  try {
    const participant_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[32]++, ctx.get("user_id"));
    const meetings =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[33]++, await MeetingService.getMeetingByParticipantId(participant_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[34]++;
    return ctx.json({
      success: true,
      data: meetings,
      count: meetings.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[35]++;
    console.error("Error fetching participant meetings:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[36]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[11][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[11][1]++, "No meetings found")
    }, 404);
  }
};
/**
 * Update meeting with audit trail
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[37]++;
MeetingController.updateMeeting = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[4]++;
  cov_2r0ukrajml().s[38]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[39]++, ctx.req.param());
    const user_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[40]++, ctx.get("user_id"));
    const data =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[41]++, await ctx.req.json());
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[42]++, await MeetingService.updateMeeting(meeting_id, data, user_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[43]++;
    return ctx.json({
      success: true,
      data: meeting,
      message: "Meeting updated successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[44]++;
    console.error("Error updating meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[45]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[12][1]++, "Failed to update meeting")
    }, 500);
  }
};
/**
 * Delete meeting (soft delete)
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[46]++;
MeetingController.deleteMeeting = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[5]++;
  cov_2r0ukrajml().s[47]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[48]++, ctx.req.param());
    const user_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[49]++, ctx.get("user_id"));
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[50]++, await MeetingService.deleteMeeting(meeting_id, user_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[51]++;
    return ctx.json({
      success: true,
      data: meeting,
      message: "Meeting deleted successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[52]++;
    console.error("Error deleting meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[53]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[13][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[13][1]++, "Failed to delete meeting")
    }, 500);
  }
};
/**
 * Start a scheduled meeting
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[54]++;
MeetingController.startMeeting = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[6]++;
  cov_2r0ukrajml().s[55]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[56]++, ctx.req.param());
    const user_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[57]++, ctx.get("user_id"));
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[58]++, await MeetingService.startMeeting(meeting_id, user_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[59]++;
    return ctx.json({
      success: true,
      data: meeting,
      message: "Meeting started successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[60]++;
    console.error("Error starting meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[61]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[14][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[14][1]++, "Failed to start meeting")
    }, 500);
  }
};
/**
 * End a live meeting
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[62]++;
MeetingController.endMeeting = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[7]++;
  cov_2r0ukrajml().s[63]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[64]++, ctx.req.param());
    const user_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[65]++, ctx.get("user_id"));
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[66]++, await MeetingService.endMeeting(meeting_id, user_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[67]++;
    return ctx.json({
      success: true,
      data: meeting,
      message: "Meeting ended successfully"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[68]++;
    console.error("Error ending meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[69]++;
    return ctx.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2r0ukrajml().b[15][1]++, "Failed to end meeting")
    }, 500);
  }
};
/**
 * Get meeting participants with real-time status
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[70]++;
MeetingController.getMeetingParticipants = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[8]++;
  cov_2r0ukrajml().s[71]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[72]++, ctx.req.param());
    const participants =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[73]++, await MeetingService.getMeetingParticipants(meeting_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[74]++;
    return ctx.json({
      success: true,
      data: participants,
      count: participants.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[75]++;
    console.error("Error fetching participants:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[76]++;
    return ctx.json({
      success: false,
      message: "Failed to fetch participants"
    }, 500);
  }
};
/**
 * Get meeting chat history
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[77]++;
MeetingController.getMeetingChat = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[9]++;
  cov_2r0ukrajml().s[78]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[79]++, ctx.req.param());
    const limit =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[80]++,
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[16][0]++, Number(ctx.req.query("limit"))) ||
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[16][1]++, 100));
    const chatHistory =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[81]++, await MeetingService.getMeetingChat(meeting_id, limit));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[82]++;
    return ctx.json({
      success: true,
      data: chatHistory,
      count: chatHistory.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[83]++;
    console.error("Error fetching chat history:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[84]++;
    return ctx.json({
      success: false,
      message: "Failed to fetch chat history"
    }, 500);
  }
};
/**
 * Get meeting recordings
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[85]++;
MeetingController.getMeetingRecordings = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[10]++;
  cov_2r0ukrajml().s[86]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[87]++, ctx.req.param());
    const recordings =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[88]++, await MeetingService.getMeetingRecordings(meeting_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[89]++;
    return ctx.json({
      success: true,
      data: recordings,
      count: recordings.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[90]++;
    console.error("Error fetching recordings:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[91]++;
    return ctx.json({
      success: false,
      message: "Failed to fetch recordings"
    }, 500);
  }
};
/**
 * Get detailed meeting analytics
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[92]++;
MeetingController.getMeetingAnalytics = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[11]++;
  cov_2r0ukrajml().s[93]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[94]++, ctx.req.param());
    const analytics =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[95]++, await MeetingService.getMeetingAnalytics(meeting_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[96]++;
    return ctx.json({
      success: true,
      data: analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[97]++;
    console.error("Error fetching analytics:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[98]++;
    return ctx.json({
      success: false,
      message: "Failed to fetch analytics"
    }, 500);
  }
};
/**
 * Get WebRTC configuration for a meeting
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[99]++;
MeetingController.getWebRTCConfig = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[12]++;
  cov_2r0ukrajml().s[100]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[101]++, ctx.req.param());
    const user_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[102]++, ctx.get("user_id"));
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[103]++, await MeetingService.getMeetingById(meeting_id));
    // Generate TURN credentials for this user
    const turnCredentials =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[104]++, WebRTCService.generateTurnCredentials(user_id));
    // Enhance WebRTC config with TURN servers
    const webrtcConfig =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[105]++, Object.assign(Object.assign({}, meeting.webrtc_config), {
      ice_servers: [...meeting.webrtc_config.ice_servers, turnCredentials]
    }));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[106]++;
    return ctx.json({
      success: true,
      data: {
        webrtcConfig,
        meetingFeatures: meeting.features,
        maxParticipants: meeting.max_participants
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[107]++;
    console.error("Error fetching WebRTC config:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[108]++;
    return ctx.json({
      success: false,
      message: "Failed to get WebRTC configuration"
    }, 500);
  }
};
/**
 * Get real-time meeting statistics
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[109]++;
MeetingController.getLiveMeetingStats = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[13]++;
  cov_2r0ukrajml().s[110]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[111]++, ctx.req.param());
    const stats =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[112]++, await WebRTCService.getMeetingStats(meeting_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[113]++;
    return ctx.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[114]++;
    console.error("Error fetching live stats:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[115]++;
    return ctx.json({
      success: false,
      message: "Failed to fetch live statistics"
    }, 500);
  }
};
/**
 * Get system-wide meeting statistics (Admin only)
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[116]++;
MeetingController.getSystemStats = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[14]++;
  cov_2r0ukrajml().s[117]++;
  try {
    const user_type =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[118]++, ctx.get("user_type"));
    const campus_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[119]++, ctx.get("campus_id"));
    // Only admins can view system stats
    /* istanbul ignore next */
    cov_2r0ukrajml().s[120]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_2r0ukrajml().b[17][0]++;
      cov_2r0ukrajml().s[121]++;
      return ctx.json({
        success: false,
        message: "Access denied"
      }, 403);
    } else
    /* istanbul ignore next */
    {
      cov_2r0ukrajml().b[17][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[122]++, await MeetingService.getSystemStats(user_type === "Super Admin" ?
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[18][0]++, undefined) :
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[18][1]++, campus_id)));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[123]++;
    return ctx.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[124]++;
    console.error("Error fetching system stats:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[125]++;
    return ctx.json({
      success: false,
      message: "Failed to fetch system statistics"
    }, 500);
  }
};
/**
 * Health check for meeting infrastructure
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[126]++;
MeetingController.getHealthCheck = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[15]++;
  cov_2r0ukrajml().s[127]++;
  try {
    const webrtcHealth =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[128]++, WebRTCService.getHealthStatus());
    const socketStats =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[129]++, SocketService.getStats());
    const overallStatus =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[130]++,
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[20][0]++, webrtcHealth.status === "healthy") &&
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[20][1]++, socketStats.connectedUsers >= 0) ?
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[19][0]++, "healthy") :
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[19][1]++, webrtcHealth.status));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[131]++;
    return ctx.json({
      success: true,
      status: overallStatus,
      data: {
        webrtc: webrtcHealth,
        sockets: socketStats,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[132]++;
    console.error("Error in health check:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[133]++;
    return ctx.json({
      success: false,
      status: "unhealthy",
      message: "Health check failed"
    }, 500);
  }
};
/**
 * Join meeting with validation
 */
/* istanbul ignore next */
cov_2r0ukrajml().s[134]++;
MeetingController.joinMeeting = async ctx => {
  /* istanbul ignore next */
  cov_2r0ukrajml().f[16]++;
  var _b;
  /* istanbul ignore next */
  cov_2r0ukrajml().s[135]++;
  try {
    const {
      meeting_id
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[136]++, ctx.req.param());
    const {
      meeting_password
    } =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[137]++, await ctx.req.json());
    const user_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[138]++, ctx.get("user_id"));
    const campus_id =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[139]++, ctx.get("campus_id"));
    // Verify meeting exists and user has access
    const meeting =
    /* istanbul ignore next */
    (cov_2r0ukrajml().s[140]++, await MeetingService.getMeetingById(meeting_id));
    /* istanbul ignore next */
    cov_2r0ukrajml().s[141]++;
    if (meeting.campus_id !== campus_id) {
      /* istanbul ignore next */
      cov_2r0ukrajml().b[21][0]++;
      cov_2r0ukrajml().s[142]++;
      return ctx.json({
        success: false,
        message: "Access denied"
      }, 403);
    } else
    /* istanbul ignore next */
    {
      cov_2r0ukrajml().b[21][1]++;
    }
    // Check password if required
    cov_2r0ukrajml().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[23][0]++, meeting.meeting_password) &&
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[23][1]++, meeting.meeting_password !== meeting_password)) {
      /* istanbul ignore next */
      cov_2r0ukrajml().b[22][0]++;
      cov_2r0ukrajml().s[144]++;
      return ctx.json({
        success: false,
        message: "Invalid meeting password"
      }, 401);
    } else
    /* istanbul ignore next */
    {
      cov_2r0ukrajml().b[22][1]++;
    }
    // Check if meeting is active
    cov_2r0ukrajml().s[145]++;
    if (
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[25][0]++, meeting.meeting_status === "ended") ||
    /* istanbul ignore next */
    (cov_2r0ukrajml().b[25][1]++, meeting.meeting_status === "cancelled")) {
      /* istanbul ignore next */
      cov_2r0ukrajml().b[24][0]++;
      cov_2r0ukrajml().s[146]++;
      return ctx.json({
        success: false,
        message: "Meeting has ended"
      }, 410);
    } else
    /* istanbul ignore next */
    {
      cov_2r0ukrajml().b[24][1]++;
    }
    // Return join information
    cov_2r0ukrajml().s[147]++;
    return ctx.json({
      success: true,
      data: {
        meeting: {
          id: meeting.id,
          name: meeting.meeting_name,
          status: meeting.meeting_status,
          features: meeting.features,
          max_participants: meeting.max_participants,
          current_participants:
          /* istanbul ignore next */
          (cov_2r0ukrajml().b[26][0]++,
          /* istanbul ignore next */
          (cov_2r0ukrajml().b[28][0]++, (_b = meeting.current_participants) === null) ||
          /* istanbul ignore next */
          (cov_2r0ukrajml().b[28][1]++, _b === void 0) ?
          /* istanbul ignore next */
          (cov_2r0ukrajml().b[27][0]++, void 0) :
          /* istanbul ignore next */
          (cov_2r0ukrajml().b[27][1]++, _b.length)) ||
          /* istanbul ignore next */
          (cov_2r0ukrajml().b[26][1]++, 0)
        },
        canJoin: true,
        requiresPassword: !!meeting.meeting_password,
        waitingRoomEnabled: meeting.waiting_room_enabled
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2r0ukrajml().s[148]++;
    console.error("Error joining meeting:", error);
    /* istanbul ignore next */
    cov_2r0ukrajml().s[149]++;
    return ctx.json({
      success: false,
      message: "Failed to join meeting"
    }, 500);
  }
};