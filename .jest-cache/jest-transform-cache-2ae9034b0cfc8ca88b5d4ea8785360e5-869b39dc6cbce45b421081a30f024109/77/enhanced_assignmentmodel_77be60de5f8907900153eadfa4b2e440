3a5582780e8124bc87a682508b484b8c
/* istanbul ignore next */
function cov_1g2sd3kkee() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/enhanced_assignment.model.ts";
  var hash = "a7f2f9f46141e445986c1c2d0fc702c78a8d85b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/enhanced_assignment.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 33
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "1": {
        start: {
          line: 34,
          column: 45
        },
        end: {
          line: 34,
          column: 55
        }
      },
      "2": {
        start: {
          line: 35,
          column: 45
        },
        end: {
          line: 35,
          column: 55
        }
      },
      "3": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 68
        }
      },
      "4": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 66
        }
      },
      "5": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 68
        }
      },
      "6": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 70
        }
      },
      "7": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 42,
          column: 64
        }
      },
      "8": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 43,
          column: 66
        }
      },
      "9": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 44,
          column: 67
        }
      },
      "10": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 45,
          column: 70
        }
      },
      "11": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 48,
          column: 2
        }
      },
      "12": {
        start: {
          line: 50,
          column: 43
        },
        end: {
          line: 67,
          column: 2
        }
      },
      "13": {
        start: {
          line: 65,
          column: 45
        },
        end: {
          line: 65,
          column: 55
        }
      },
      "14": {
        start: {
          line: 66,
          column: 45
        },
        end: {
          line: 66,
          column: 55
        }
      },
      "15": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 71,
          column: 2
        }
      },
      "16": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 72,
          column: 78
        }
      },
      "17": {
        start: {
          line: 73,
          column: 0
        },
        end: {
          line: 73,
          column: 74
        }
      },
      "18": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 74,
          column: 78
        }
      },
      "19": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 77,
          column: 2
        }
      },
      "20": {
        start: {
          line: 78,
          column: 0
        },
        end: {
          line: 78,
          column: 77
        }
      },
      "21": {
        start: {
          line: 79,
          column: 0
        },
        end: {
          line: 79,
          column: 78
        }
      },
      "22": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 90
        }
      },
      "23": {
        start: {
          line: 82,
          column: 37
        },
        end: {
          line: 82,
          column: 121
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 34,
            column: 39
          },
          end: {
            line: 34,
            column: 40
          }
        },
        loc: {
          start: {
            line: 34,
            column: 45
          },
          end: {
            line: 34,
            column: 55
          }
        },
        line: 34
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 35,
            column: 40
          }
        },
        loc: {
          start: {
            line: 35,
            column: 45
          },
          end: {
            line: 35,
            column: 55
          }
        },
        line: 35
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 39
          },
          end: {
            line: 65,
            column: 40
          }
        },
        loc: {
          start: {
            line: 65,
            column: 45
          },
          end: {
            line: 65,
            column: 55
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 39
          },
          end: {
            line: 66,
            column: 40
          }
        },
        loc: {
          start: {
            line: 66,
            column: 45
          },
          end: {
            line: 66,
            column: 55
          }
        },
        line: 66
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a7f2f9f46141e445986c1c2d0fc702c78a8d85b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1g2sd3kkee = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1g2sd3kkee();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
// Enhanced Assignment Schema
const EnhancedAssignmentSchema =
/* istanbul ignore next */
(cov_1g2sd3kkee().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  class_id: {
    type: String,
    required: false
  },
  // Optional for course assignments
  course_id: {
    type: String,
    required: false
  },
  // Optional for class assignments
  subject_id: {
    type: String,
    required: true
  },
  user_id: {
    type: String,
    required: true
  },
  // Teacher who created
  title: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  instructions: {
    type: String,
    required: false
  },
  due_date: {
    type: Date,
    required: true
  },
  max_score: {
    type: Number,
    required: false
  },
  is_graded: {
    type: Boolean,
    required: true,
    default: true
  },
  allow_late_submission: {
    type: Boolean,
    required: true,
    default: false
  },
  attachment_urls: {
    type: [String],
    required: false,
    default: []
  },
  priority: {
    type: String,
    required: true,
    default: "medium",
    enum: ["low", "medium", "high"]
  },
  assignment_type: {
    type: String,
    required: true,
    default: "homework",
    enum: ["homework", "project", "quiz", "exam", "presentation"]
  },
  estimated_duration_minutes: {
    type: Number,
    required: false
  },
  meta_data: {
    type: Object,
    required: false,
    default: {}
  },
  is_active: {
    type: Boolean,
    required: true,
    default: true
  },
  is_deleted: {
    type: Boolean,
    required: true,
    default: false
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1g2sd3kkee().f[0]++;
      cov_1g2sd3kkee().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1g2sd3kkee().f[1]++;
      cov_1g2sd3kkee().s[2]++;
      return new Date();
    }
  }
}));
// Indexes for Enhanced Assignment
/* istanbul ignore next */
cov_1g2sd3kkee().s[3]++;
EnhancedAssignmentSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[4]++;
EnhancedAssignmentSchema.index.findByClassId = {
  by: "class_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[5]++;
EnhancedAssignmentSchema.index.findByCourseId = {
  by: "course_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[6]++;
EnhancedAssignmentSchema.index.findBySubjectId = {
  by: "subject_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[7]++;
EnhancedAssignmentSchema.index.findByUserId = {
  by: "user_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[8]++;
EnhancedAssignmentSchema.index.findByDueDate = {
  by: "due_date"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[9]++;
EnhancedAssignmentSchema.index.findByPriority = {
  by: "priority"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[10]++;
EnhancedAssignmentSchema.index.findByType = {
  by: "assignment_type"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[11]++;
EnhancedAssignmentSchema.index.findByStatus = {
  by: ["is_active", "is_deleted"]
};
// Enhanced Assignment Submission Schema
const EnhancedAssignmentSubmissionSchema =
/* istanbul ignore next */
(cov_1g2sd3kkee().s[12]++, new Schema({
  assignment_id: {
    type: String,
    required: true
  },
  campus_id: {
    type: String,
    required: true
  },
  user_id: {
    type: String,
    required: true
  },
  // Student who submitted
  submission_date: {
    type: Date,
    required: true
  },
  submission_content: {
    type: String,
    required: false
  },
  attachment_urls: {
    type: [String],
    required: false,
    default: []
  },
  grade: {
    type: Number,
    required: false
  },
  feedback: {
    type: String,
    required: false
  },
  is_late: {
    type: Boolean,
    required: true,
    default: false
  },
  attempt_number: {
    type: Number,
    required: true,
    default: 1
  },
  time_spent_minutes: {
    type: Number,
    required: false
  },
  meta_data: {
    type: Object,
    required: false,
    default: {}
  },
  graded_by: {
    type: String,
    required: false
  },
  // Teacher who graded
  graded_date: {
    type: Date,
    required: false
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1g2sd3kkee().f[2]++;
      cov_1g2sd3kkee().s[13]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1g2sd3kkee().f[3]++;
      cov_1g2sd3kkee().s[14]++;
      return new Date();
    }
  }
}));
// Indexes for Enhanced Assignment Submission
/* istanbul ignore next */
cov_1g2sd3kkee().s[15]++;
EnhancedAssignmentSubmissionSchema.index.findByAssignmentId = {
  by: "assignment_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[16]++;
EnhancedAssignmentSubmissionSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[17]++;
EnhancedAssignmentSubmissionSchema.index.findByUserId = {
  by: "user_id"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[18]++;
EnhancedAssignmentSubmissionSchema.index.findByGradedBy = {
  by: "graded_by"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[19]++;
EnhancedAssignmentSubmissionSchema.index.findBySubmissionDate = {
  by: "submission_date"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[20]++;
EnhancedAssignmentSubmissionSchema.index.findByGradeStatus = {
  by: "grade"
};
/* istanbul ignore next */
cov_1g2sd3kkee().s[21]++;
EnhancedAssignmentSubmissionSchema.index.findByLateStatus = {
  by: "is_late"
};
// Models
const EnhancedAssignment =
/* istanbul ignore next */
(cov_1g2sd3kkee().s[22]++, ottoman.model("enhanced_assignments", EnhancedAssignmentSchema));
const EnhancedAssignmentSubmission =
/* istanbul ignore next */
(cov_1g2sd3kkee().s[23]++, ottoman.model("enhanced_assignment_submissions", EnhancedAssignmentSubmissionSchema));
export { EnhancedAssignment, EnhancedAssignmentSubmission };