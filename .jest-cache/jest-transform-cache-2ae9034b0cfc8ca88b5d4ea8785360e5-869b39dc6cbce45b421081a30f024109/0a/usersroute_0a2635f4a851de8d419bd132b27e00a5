de3ad4ba9faca4ace6c3a58e41039d82
/* istanbul ignore next */
function cov_1g5stlqy6x() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/users.route.ts";
  var hash = "bdfb5e969a022878bcc5f883d737b443a27ffbf9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/users.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 12
        },
        end: {
          line: 7,
          column: 22
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 51,
          column: 78
        }
      },
      "2": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 82,
          column: 26
        }
      },
      "3": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 122,
          column: 25
        }
      },
      "4": {
        start: {
          line: 123,
          column: 0
        },
        end: {
          line: 162,
          column: 78
        }
      },
      "5": {
        start: {
          line: 163,
          column: 0
        },
        end: {
          line: 202,
          column: 29
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bdfb5e969a022878bcc5f883d737b443a27ffbf9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1g5stlqy6x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1g5stlqy6x();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { UsersController } from "@/controllers/users.controller";
// import { roleMiddleware } from "@/middlewares/role.middleware";
import { createUserRequestBodySchema, createUserResponseSchema, deleteUserResponseSchema, getUserResponseSchema, getUsersResponseSchema, updateUserRequestBodySchema, updateUserResponseSchema } from "@/schema/user";
const app =
/* istanbul ignore next */
(cov_1g5stlqy6x().s[0]++, new Hono());
/* istanbul ignore next */
cov_1g5stlqy6x().s[1]++;
app.post("/", describeRoute({
  tags: ["Users"],
  operationId: "createUser",
  summary: "Create a new user",
  description: "Creates a new user in the system",
  responses: {
    200: {
      description: "User created successfully",
      content: {
        "application/json": {
          schema: resolver(createUserResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    },
    401: {
      description: "Unauthorized",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("create_users"),
zValidator("json", createUserRequestBodySchema), UsersController.createUsers);
/* istanbul ignore next */
cov_1g5stlqy6x().s[2]++;
app.get("/", describeRoute({
  tags: ["Users"],
  operationId: "getUsers",
  summary: "Get all users",
  description: "Retrieves all users for the current campus",
  responses: {
    200: {
      description: "List of users",
      content: {
        "application/json": {
          schema: resolver(getUsersResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("get_users"),
UsersController.getUsers);
/* istanbul ignore next */
cov_1g5stlqy6x().s[3]++;
app.get("/i/:id", describeRoute({
  tags: ["Users"],
  operationId: "getUser",
  summary: "Get a specific user",
  description: "Retrieves a specific user by ID",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "User ID"
  }],
  responses: {
    200: {
      description: "User details",
      content: {
        "application/json": {
          schema: resolver(getUserResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("get_user"),
UsersController.getUser);
/* istanbul ignore next */
cov_1g5stlqy6x().s[4]++;
app.put("/:id", describeRoute({
  tags: ["Users"],
  operationId: "updateUser",
  summary: "Update a user",
  description: "Updates a specific user by ID",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "User ID"
  }],
  responses: {
    200: {
      description: "User updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateUserResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("update_users"),
zValidator("json", updateUserRequestBodySchema), UsersController.updateUsers);
/* istanbul ignore next */
cov_1g5stlqy6x().s[5]++;
app.delete("/:id", describeRoute({
  tags: ["Users"],
  operationId: "deleteUser",
  summary: "Delete a user",
  description: "Deletes a specific user by ID",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "User ID"
  }],
  responses: {
    200: {
      description: "User deleted successfully",
      content: {
        "application/json": {
          schema: resolver(deleteUserResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}),
// roleMiddleware("delete_users"),
UsersController.deleteUsers);
export default app;