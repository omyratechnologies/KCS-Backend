bf23483b3475cca35b65d5b1d2f303a1
/* istanbul ignore next */
function cov_1fc7o4iueo() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/auth.route.ts";
  var hash = "557b6f9ee3190e1d141c30a5505fe6d63df2ebac";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/auth.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 12
        },
        end: {
          line: 7,
          column: 22
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 23,
          column: 70
        }
      },
      "2": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 39,
          column: 88
        }
      },
      "3": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 55,
          column: 86
        }
      },
      "4": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 71,
          column: 84
        }
      },
      "5": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 72,
          column: 26
        }
      },
      "6": {
        start: {
          line: 73,
          column: 0
        },
        end: {
          line: 88,
          column: 27
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "557b6f9ee3190e1d141c30a5505fe6d63df2ebac"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fc7o4iueo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fc7o4iueo();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { AuthController } from "@/controllers/auth.controller";
import { authMiddleware } from "@/middlewares/auth.middleware";
import { forgotPasswordRequestBodySchema, forgotPasswordResponseSchema, loginRequestBodySchema, loginResponseSchema, meResponseSchema, refreshTokenRequestBodySchema, refreshTokenResponseSchema, resetPasswordRequestBodySchema, resetPasswordResponseSchema } from "@/schema/auth";
const app =
/* istanbul ignore next */
(cov_1fc7o4iueo().s[0]++, new Hono());
/* istanbul ignore next */
cov_1fc7o4iueo().s[1]++;
app.post("/login", describeRoute({
  operationId: "login",
  summary: "Login",
  description: "Login to Account",
  tags: ["Auth"],
  responses: {
    200: {
      description: "Login",
      content: {
        "application/json": {
          schema: resolver(loginResponseSchema)
        }
      }
    }
  }
}), zValidator("json", loginRequestBodySchema), AuthController.login);
/* istanbul ignore next */
cov_1fc7o4iueo().s[2]++;
app.post("/forgot", describeRoute({
  operationId: "forgotPassword",
  summary: "Forgot Password",
  description: "Forgot Password",
  tags: ["Auth"],
  responses: {
    200: {
      description: "Forgot Password",
      content: {
        "application/json": {
          schema: resolver(forgotPasswordResponseSchema)
        }
      }
    }
  }
}), zValidator("json", forgotPasswordRequestBodySchema), AuthController.forgotPassword);
/* istanbul ignore next */
cov_1fc7o4iueo().s[3]++;
app.post("/reset", describeRoute({
  operationId: "resetPassword",
  summary: "Reset Password",
  description: "Reset Password",
  tags: ["Auth"],
  responses: {
    200: {
      description: "Reset Password",
      content: {
        "application/json": {
          schema: resolver(resetPasswordResponseSchema)
        }
      }
    }
  }
}), zValidator("json", resetPasswordRequestBodySchema), AuthController.resetPassword);
/* istanbul ignore next */
cov_1fc7o4iueo().s[4]++;
app.post("/refresh", describeRoute({
  operationId: "refreshToken",
  summary: "Refresh Token",
  description: "Refresh Token",
  tags: ["Auth"],
  responses: {
    200: {
      description: "Refresh Token",
      content: {
        "application/json": {
          schema: resolver(refreshTokenResponseSchema)
        }
      }
    }
  }
}), zValidator("json", refreshTokenRequestBodySchema), AuthController.refreshToken);
/* istanbul ignore next */
cov_1fc7o4iueo().s[5]++;
app.use(authMiddleware());
/* istanbul ignore next */
cov_1fc7o4iueo().s[6]++;
app.get("/me", describeRoute({
  operationId: "me",
  summary: "Me",
  description: "Get Me",
  tags: ["Auth"],
  responses: {
    200: {
      description: "Me",
      content: {
        "application/json": {
          schema: resolver(meResponseSchema)
        }
      }
    }
  }
}), AuthController.whoami);
export default app;