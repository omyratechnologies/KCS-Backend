a5f999eddf66739d7cf2d69a1cd82364
/* istanbul ignore next */
function cov_2bxqra7ujp() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/payment_transaction.model.ts";
  var hash = "3bf77b78d49e6289093a71737fdfe9341956552a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/payment_transaction.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 33
        },
        end: {
          line: 43,
          column: 2
        }
      },
      "1": {
        start: {
          line: 34,
          column: 63
        },
        end: {
          line: 34,
          column: 73
        }
      },
      "2": {
        start: {
          line: 41,
          column: 45
        },
        end: {
          line: 41,
          column: 55
        }
      },
      "3": {
        start: {
          line: 42,
          column: 45
        },
        end: {
          line: 42,
          column: 55
        }
      },
      "4": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 44,
          column: 68
        }
      },
      "5": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 45,
          column: 62
        }
      },
      "6": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 46,
          column: 70
        }
      },
      "7": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 68
        }
      },
      "8": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 63
        }
      },
      "9": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 49,
          column: 80
        }
      },
      "10": {
        start: {
          line: 50,
          column: 0
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "11": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 55,
          column: 2
        }
      },
      "12": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 78
        }
      },
      "13": {
        start: {
          line: 57,
          column: 27
        },
        end: {
          line: 57,
          column: 90
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 34,
            column: 57
          },
          end: {
            line: 34,
            column: 58
          }
        },
        loc: {
          start: {
            line: 34,
            column: 63
          },
          end: {
            line: 34,
            column: 73
          }
        },
        line: 34
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 41,
            column: 39
          },
          end: {
            line: 41,
            column: 40
          }
        },
        loc: {
          start: {
            line: 41,
            column: 45
          },
          end: {
            line: 41,
            column: 55
          }
        },
        line: 41
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 39
          },
          end: {
            line: 42,
            column: 40
          }
        },
        loc: {
          start: {
            line: 42,
            column: 45
          },
          end: {
            line: 42,
            column: 55
          }
        },
        line: 42
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3bf77b78d49e6289093a71737fdfe9341956552a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bxqra7ujp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bxqra7ujp();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const PaymentTransactionSchema =
/* istanbul ignore next */
(cov_2bxqra7ujp().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  fee_id: {
    type: String,
    required: true
  },
  student_id: {
    type: String,
    required: true
  },
  parent_id: {
    type: String,
    required: false
  },
  payment_gateway: {
    type: String,
    required: true,
    enum: ["razorpay", "payu", "cashfree"]
  },
  gateway_transaction_id: {
    type: String,
    required: false
  },
  gateway_order_id: {
    type: String,
    required: false
  },
  gateway_payment_id: {
    type: String,
    required: false
  },
  amount: {
    type: Number,
    required: true
  },
  currency: {
    type: String,
    required: true,
    default: "INR"
  },
  status: {
    type: String,
    required: true,
    enum: ["pending", "success", "failed", "cancelled", "refunded"],
    default: "pending"
  },
  payment_method: {
    type: String,
    required: false,
    enum: ["card", "netbanking", "upi", "wallet", "emi"]
  },
  payment_details: {
    type: Object,
    required: true,
    default: {}
  },
  initiated_at: {
    type: Date,
    required: true,
    default: () => {
      /* istanbul ignore next */
      cov_2bxqra7ujp().f[0]++;
      cov_2bxqra7ujp().s[1]++;
      return new Date();
    }
  },
  completed_at: {
    type: Date,
    required: false
  },
  webhook_verified: {
    type: Boolean,
    required: true,
    default: false
  },
  invoice_generated: {
    type: Boolean,
    required: true,
    default: false
  },
  invoice_url: {
    type: String,
    required: false
  },
  receipt_number: {
    type: String,
    required: false
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_2bxqra7ujp().f[1]++;
      cov_2bxqra7ujp().s[2]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_2bxqra7ujp().f[2]++;
      cov_2bxqra7ujp().s[3]++;
      return new Date();
    }
  }
}));
/* istanbul ignore next */
cov_2bxqra7ujp().s[4]++;
PaymentTransactionSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[5]++;
PaymentTransactionSchema.index.findByFeeId = {
  by: "fee_id"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[6]++;
PaymentTransactionSchema.index.findByStudentId = {
  by: "student_id"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[7]++;
PaymentTransactionSchema.index.findByParentId = {
  by: "parent_id"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[8]++;
PaymentTransactionSchema.index.findByStatus = {
  by: "status"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[9]++;
PaymentTransactionSchema.index.findByPaymentGateway = {
  by: "payment_gateway"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[10]++;
PaymentTransactionSchema.index.findByGatewayTransactionId = {
  by: "gateway_transaction_id"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[11]++;
PaymentTransactionSchema.index.findByGatewayOrderId = {
  by: "gateway_order_id"
};
/* istanbul ignore next */
cov_2bxqra7ujp().s[12]++;
PaymentTransactionSchema.index.findByReceiptNumber = {
  by: "receipt_number"
};
const PaymentTransaction =
/* istanbul ignore next */
(cov_2bxqra7ujp().s[13]++, ottoman.model("payment_transactions", PaymentTransactionSchema));
export { PaymentTransaction };