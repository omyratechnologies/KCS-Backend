305229a88594e74e1bc86d2a348d8e41
/* istanbul ignore next */
function cov_1gek7rlykw() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/services/fee.service.ts";
  var hash = "040dabdc3fadc38276efde22cec6749396cce566";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/services/fee.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 16
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "2": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "3": {
        start: {
          line: 12,
          column: 53
        },
        end: {
          line: 12,
          column: 70
        }
      },
      "4": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "6": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "7": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "8": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 31,
          column: 6
        }
      },
      "9": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "10": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 41
        }
      },
      "11": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 20
        }
      },
      "12": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 44,
          column: 2
        }
      },
      "13": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 46
        }
      },
      "14": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 43
        }
      },
      "16": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 23
          },
          end: {
            line: 7,
            column: 24
          }
        },
        loc: {
          start: {
            line: 7,
            column: 59
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 38
          },
          end: {
            line: 12,
            column: 39
          }
        },
        loc: {
          start: {
            line: 12,
            column: 53
          },
          end: {
            line: 12,
            column: 70
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 26,
            column: 29
          }
        },
        loc: {
          start: {
            line: 26,
            column: 47
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 23
          },
          end: {
            line: 38,
            column: 24
          }
        },
        loc: {
          start: {
            line: 38,
            column: 43
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 38
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "040dabdc3fadc38276efde22cec6749396cce566"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gek7rlykw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gek7rlykw();
var _a;
import { Fee } from "@/models/fee.model";
export class FeeService {}
/* istanbul ignore next */
cov_1gek7rlykw().s[0]++;
_a = FeeService;
// create fee
/* istanbul ignore next */
cov_1gek7rlykw().s[1]++;
FeeService.createFee = async (campus_id, user_id, data) => {
  /* istanbul ignore next */
  cov_1gek7rlykw().f[0]++;
  const fee =
  /* istanbul ignore next */
  (cov_1gek7rlykw().s[2]++, await Fee.create({
    campus_id,
    items: data.items,
    meta_data: data.meta_data,
    due_amount: data.items.reduce((acc, item) => {
      /* istanbul ignore next */
      cov_1gek7rlykw().f[1]++;
      cov_1gek7rlykw().s[3]++;
      return acc + item.amount;
    }, 0),
    paid_amount: 0,
    payment_status: "unpaid",
    user_id,
    is_paid: false,
    created_at: new Date(),
    updated_at: new Date()
  }));
  /* istanbul ignore next */
  cov_1gek7rlykw().s[4]++;
  if (!fee) {
    /* istanbul ignore next */
    cov_1gek7rlykw().b[0][0]++;
    cov_1gek7rlykw().s[5]++;
    throw new Error("Fee not created");
  } else
  /* istanbul ignore next */
  {
    cov_1gek7rlykw().b[0][1]++;
  }
  cov_1gek7rlykw().s[6]++;
  return fee;
};
// get fee by user_id
/* istanbul ignore next */
cov_1gek7rlykw().s[7]++;
FeeService.getFeeByUserId = async user_id => {
  /* istanbul ignore next */
  cov_1gek7rlykw().f[2]++;
  const fee =
  /* istanbul ignore next */
  (cov_1gek7rlykw().s[8]++, await Fee.find({
    user_id,
    is_paid: false
  }, {
    sort: {
      updated_at: "DESC"
    }
  }));
  /* istanbul ignore next */
  cov_1gek7rlykw().s[9]++;
  if (fee.rows.length === 0) {
    /* istanbul ignore next */
    cov_1gek7rlykw().b[1][0]++;
    cov_1gek7rlykw().s[10]++;
    throw new Error("Fee not found");
  } else
  /* istanbul ignore next */
  {
    cov_1gek7rlykw().b[1][1]++;
  }
  cov_1gek7rlykw().s[11]++;
  return fee.rows;
};
// update fee by id
/* istanbul ignore next */
cov_1gek7rlykw().s[12]++;
FeeService.updateFee = async (id, data) => {
  /* istanbul ignore next */
  cov_1gek7rlykw().f[3]++;
  const fee =
  /* istanbul ignore next */
  (cov_1gek7rlykw().s[13]++, await Fee.updateById(id, data));
  /* istanbul ignore next */
  cov_1gek7rlykw().s[14]++;
  if (!fee) {
    /* istanbul ignore next */
    cov_1gek7rlykw().b[2][0]++;
    cov_1gek7rlykw().s[15]++;
    throw new Error("Fee not updated");
  } else
  /* istanbul ignore next */
  {
    cov_1gek7rlykw().b[2][1]++;
  }
  cov_1gek7rlykw().s[16]++;
  return fee;
};