207fbaa3f76eb38289c54d84637e3434
/* istanbul ignore next */
function cov_1im058q91l() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/payment.route.ts";
  var hash = "c1e7731828d6b732c9d0bf54dca4e4bbccc22576";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/payment.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 12
        },
        end: {
          line: 7,
          column: 22
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 27,
          column: 101
        }
      },
      "2": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "3": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 60,
          column: 93
        }
      },
      "4": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 79,
          column: 40
        }
      },
      "5": {
        start: {
          line: 80,
          column: 0
        },
        end: {
          line: 104,
          column: 93
        }
      },
      "6": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 121,
          column: 93
        }
      },
      "7": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 156,
          column: 39
        }
      },
      "8": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 173,
          column: 95
        }
      },
      "9": {
        start: {
          line: 175,
          column: 0
        },
        end: {
          line: 190,
          column: 89
        }
      },
      "10": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 216,
          column: 85
        }
      },
      "11": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 252,
          column: 41
        }
      },
      "12": {
        start: {
          line: 254,
          column: 0
        },
        end: {
          line: 288,
          column: 38
        }
      },
      "13": {
        start: {
          line: 290,
          column: 0
        },
        end: {
          line: 305,
          column: 44
        }
      },
      "14": {
        start: {
          line: 307,
          column: 0
        },
        end: {
          line: 331,
          column: 39
        }
      },
      "15": {
        start: {
          line: 333,
          column: 0
        },
        end: {
          line: 351,
          column: 50
        }
      },
      "16": {
        start: {
          line: 352,
          column: 0
        },
        end: {
          line: 370,
          column: 44
        }
      },
      "17": {
        start: {
          line: 371,
          column: 0
        },
        end: {
          line: 389,
          column: 41
        }
      },
      "18": {
        start: {
          line: 390,
          column: 0
        },
        end: {
          line: 408,
          column: 42
        }
      },
      "19": {
        start: {
          line: 409,
          column: 0
        },
        end: {
          line: 427,
          column: 48
        }
      },
      "20": {
        start: {
          line: 429,
          column: 0
        },
        end: {
          line: 447,
          column: 44
        }
      },
      "21": {
        start: {
          line: 448,
          column: 0
        },
        end: {
          line: 469,
          column: 47
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c1e7731828d6b732c9d0bf54dca4e4bbccc22576"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1im058q91l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1im058q91l();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { PaymentController } from "@/controllers/payment.controller";
import { paymentMonitoringMiddleware } from "@/middlewares/payment_monitoring.middleware";
import { availableGatewaysResponseSchema, createBankDetailsRequestSchema, createFeeCategoryRequestSchema, createFeeTemplateRequestSchema, feeCategorySchema, feeTemplateSchema, generateFeesRequestSchema, initiatePaymentRequestSchema, paymentHistoryResponseSchema, schoolBankDetailsSchema, studentFeesResponseSchema, successResponseSchema, verifyPaymentRequestSchema } from "@/schema/payment";
const app =
/* istanbul ignore next */
(cov_1im058q91l().s[0]++, new Hono());
// School Bank Details Management (Admin only)
/* istanbul ignore next */
cov_1im058q91l().s[1]++;
app.post("/school-bank-details", describeRoute({
  tags: ["Payment Management"],
  operationId: "createSchoolBankDetails",
  summary: "Create or update school bank details",
  description: "School admin can add/update bank account details for payment collection",
  responses: {
    200: {
      description: "Bank details saved successfully",
      content: {
        "application/json": {
          schema: resolver(schoolBankDetailsSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), zValidator("json", createBankDetailsRequestSchema), PaymentController.createOrUpdateBankDetails);
/* istanbul ignore next */
cov_1im058q91l().s[2]++;
app.get("/school-bank-details", describeRoute({
  tags: ["Payment Management"],
  operationId: "getSchoolBankDetails",
  summary: "Get school bank details",
  description: "Retrieve current school bank account details",
  responses: {
    200: {
      description: "Bank details retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(schoolBankDetailsSchema)
        }
      }
    }
  }
}), PaymentController.getBankDetails);
// Fee Categories Management (Admin only)
/* istanbul ignore next */
cov_1im058q91l().s[3]++;
app.post("/fee-categories", describeRoute({
  tags: ["Payment Management"],
  operationId: "createFeeCategory",
  summary: "Create fee category",
  description: "Create a new fee category (e.g., Tuition, Transportation, etc.)",
  responses: {
    200: {
      description: "Fee category created successfully",
      content: {
        "application/json": {
          schema: resolver(feeCategorySchema)
        }
      }
    }
  }
}), zValidator("json", createFeeCategoryRequestSchema), PaymentController.createFeeCategory);
/* istanbul ignore next */
cov_1im058q91l().s[4]++;
app.get("/fee-categories", describeRoute({
  tags: ["Payment Management"],
  operationId: "getFeeCategories",
  summary: "Get all fee categories",
  description: "Retrieve all fee categories for the school",
  responses: {
    200: {
      description: "Fee categories retrieved successfully",
      content: {
        "application/json": {
          schema: {
            type: "array",
            items: {
              $ref: "#/components/schemas/FeeCategory"
            }
          }
        }
      }
    }
  }
}), PaymentController.getFeeCategories);
/* istanbul ignore next */
cov_1im058q91l().s[5]++;
app.put("/fee-categories/:id", describeRoute({
  tags: ["Payment Management"],
  operationId: "updateFeeCategory",
  summary: "Update fee category",
  description: "Update an existing fee category",
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Fee category ID"
  }],
  responses: {
    200: {
      description: "Fee category updated successfully",
      content: {
        "application/json": {
          schema: resolver(feeCategorySchema)
        }
      }
    }
  }
}), zValidator("json", createFeeCategoryRequestSchema), PaymentController.updateFeeCategory);
// Fee Templates Management (Admin only)
/* istanbul ignore next */
cov_1im058q91l().s[6]++;
app.post("/fee-templates", describeRoute({
  tags: ["Payment Management"],
  operationId: "createFeeTemplate",
  summary: "Create fee template",
  description: "Create a fee template for specific class/academic year",
  responses: {
    200: {
      description: "Fee template created successfully",
      content: {
        "application/json": {
          schema: resolver(feeTemplateSchema)
        }
      }
    }
  }
}), zValidator("json", createFeeTemplateRequestSchema), PaymentController.createFeeTemplate);
/* istanbul ignore next */
cov_1im058q91l().s[7]++;
app.get("/fee-templates", describeRoute({
  tags: ["Payment Management"],
  operationId: "getFeeTemplates",
  summary: "Get fee templates",
  description: "Retrieve fee templates with optional filtering",
  parameters: [{
    name: "class_id",
    in: "query",
    required: false,
    schema: {
      type: "string"
    },
    description: "Filter by class ID"
  }, {
    name: "academic_year",
    in: "query",
    required: false,
    schema: {
      type: "string"
    },
    description: "Filter by academic year"
  }],
  responses: {
    200: {
      description: "Fee templates retrieved successfully",
      content: {
        "application/json": {
          schema: {
            type: "array",
            items: {
              $ref: "#/components/schemas/FeeTemplate"
            }
          }
        }
      }
    }
  }
}), PaymentController.getFeeTemplates);
// Fee Generation (Admin only)
/* istanbul ignore next */
cov_1im058q91l().s[8]++;
app.post("/generate-fees", describeRoute({
  tags: ["Payment Management"],
  operationId: "generateFees",
  summary: "Generate fees from template",
  description: "Generate individual fee records for students based on template",
  responses: {
    200: {
      description: "Fees generated successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    }
  }
}), zValidator("json", generateFeesRequestSchema), PaymentController.generateFeesFromTemplate);
// Payment Initiation (Students/Parents)
/* istanbul ignore next */
cov_1im058q91l().s[9]++;
app.post("/initiate-payment", paymentMonitoringMiddleware, describeRoute({
  tags: ["Payment Processing"],
  operationId: "initiatePayment",
  summary: "Initiate payment",
  description: "Start payment process for a fee",
  responses: {
    200: {
      description: "Payment initiated successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    }
  }
}), zValidator("json", initiatePaymentRequestSchema), PaymentController.initiatePayment);
// Payment Verification (Webhook/Callback)
/* istanbul ignore next */
cov_1im058q91l().s[10]++;
app.post("/verify-payment/:transaction_id", paymentMonitoringMiddleware, describeRoute({
  tags: ["Payment Processing"],
  operationId: "verifyPayment",
  summary: "Verify payment",
  description: "Verify payment completion and update records",
  parameters: [{
    name: "transaction_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Transaction ID"
  }],
  responses: {
    200: {
      description: "Payment verified successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    }
  }
}), zValidator("json", verifyPaymentRequestSchema), PaymentController.verifyPayment);
// Payment History (Students/Parents/Admin)
/* istanbul ignore next */
cov_1im058q91l().s[11]++;
app.get("/payment-history", describeRoute({
  tags: ["Payment Information"],
  operationId: "getPaymentHistory",
  summary: "Get payment history",
  description: "Retrieve payment history for student/parent",
  parameters: [{
    name: "student_id",
    in: "query",
    required: false,
    schema: {
      type: "string"
    },
    description: "Student ID (for admin/parent viewing)"
  }, {
    name: "status",
    in: "query",
    required: false,
    schema: {
      type: "string",
      enum: ["pending", "completed", "failed"]
    },
    description: "Filter by payment status"
  }],
  responses: {
    200: {
      description: "Payment history retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(paymentHistoryResponseSchema)
        }
      }
    }
  }
}), PaymentController.getPaymentHistory);
// Student Fees (Students/Parents/Admin)
/* istanbul ignore next */
cov_1im058q91l().s[12]++;
app.get("/student-fees", describeRoute({
  tags: ["Payment Information"],
  operationId: "getStudentFees",
  summary: "Get student fees",
  description: "Retrieve pending and paid fees for a student",
  parameters: [{
    name: "student_id",
    in: "query",
    required: false,
    schema: {
      type: "string"
    },
    description: "Student ID (for admin/parent viewing)"
  }, {
    name: "status",
    in: "query",
    required: false,
    schema: {
      type: "string",
      enum: ["unpaid", "partial", "paid", "overdue"]
    },
    description: "Filter by fee status"
  }],
  responses: {
    200: {
      description: "Student fees retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(studentFeesResponseSchema)
        }
      }
    }
  }
}), PaymentController.getStudentFees);
// Payment Gateways (Public)
/* istanbul ignore next */
cov_1im058q91l().s[13]++;
app.get("/available-gateways", describeRoute({
  tags: ["Payment Information"],
  operationId: "getAvailableGateways",
  summary: "Get available payment gateways",
  description: "Retrieve list of available payment gateways for the school",
  responses: {
    200: {
      description: "Available gateways retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(availableGatewaysResponseSchema)
        }
      }
    }
  }
}), PaymentController.getAvailableGateways);
// Download Invoice (Students/Parents/Admin)
/* istanbul ignore next */
cov_1im058q91l().s[14]++;
app.get("/invoices/:invoice_id/download", describeRoute({
  tags: ["Payment Information"],
  operationId: "downloadInvoice",
  summary: "Download invoice PDF",
  description: "Download payment invoice as PDF",
  parameters: [{
    name: "invoice_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Invoice ID"
  }],
  responses: {
    200: {
      description: "Invoice PDF download",
      content: {
        "application/pdf": {
          schema: {
            type: "string",
            format: "binary"
          }
        }
      }
    }
  }
}), PaymentController.downloadInvoice);
// Gateway Configuration (Admin only)
/* istanbul ignore next */
cov_1im058q91l().s[15]++;
app.post("/secure-credentials", paymentMonitoringMiddleware, describeRoute({
  tags: ["Gateway Management"],
  operationId: "configureSecureCredentials",
  summary: "Configure payment gateway credentials",
  description: "Admin can configure secure payment gateway credentials",
  responses: {
    200: {
      description: "Gateway credentials configured successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), PaymentController.configureSecureCredentials);
/* istanbul ignore next */
cov_1im058q91l().s[16]++;
app.get("/credentials/masked", describeRoute({
  tags: ["Gateway Management"],
  operationId: "getMaskedCredentials",
  summary: "Get masked payment gateway credentials",
  description: "Admin can view masked gateway credentials for verification",
  responses: {
    200: {
      description: "Masked credentials retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), PaymentController.getMaskedCredentials);
/* istanbul ignore next */
cov_1im058q91l().s[17]++;
app.get("/security-status", describeRoute({
  tags: ["Security Management"],
  operationId: "getSecurityStatus",
  summary: "Get security status of payment system",
  description: "Admin can check security status and encryption health",
  responses: {
    200: {
      description: "Security status retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), PaymentController.getSecurityStatus);
/* istanbul ignore next */
cov_1im058q91l().s[18]++;
app.get("/validate-encryption", describeRoute({
  tags: ["Security Management"],
  operationId: "validateEncryption",
  summary: "Validate encryption setup",
  description: "Admin can validate encryption configuration and health",
  responses: {
    200: {
      description: "Security status retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), PaymentController.validateEncryption);
/* istanbul ignore next */
cov_1im058q91l().s[19]++;
app.post("/migrate-credentials", describeRoute({
  tags: ["Security Management"],
  operationId: "migrateLegacyCredentials",
  summary: "Migrate legacy credentials",
  description: "Admin can migrate legacy credentials to new encryption format",
  responses: {
    200: {
      description: "Credentials migration completed",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), PaymentController.migrateLegacyCredentials);
// Security Dashboard and Monitoring (Admin only)
/* istanbul ignore next */
cov_1im058q91l().s[20]++;
app.get("/security/dashboard", describeRoute({
  tags: ["Payment Security"],
  operationId: "getSecurityDashboard",
  summary: "Get comprehensive security dashboard",
  description: "Admin can view payment security metrics, recent events, and audit logs",
  responses: {
    200: {
      description: "Security dashboard data retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    }
  }
}), PaymentController.getSecurityDashboard);
/* istanbul ignore next */
cov_1im058q91l().s[21]++;
app.get("/security/events/:event_id", describeRoute({
  tags: ["Payment Security"],
  operationId: "getSecurityEventDetails",
  summary: "Get detailed security event information",
  description: "Admin can view detailed information about a specific security event",
  responses: {
    200: {
      description: "Security event details retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(successResponseSchema)
        }
      }
    },
    403: {
      description: "Unauthorized - Admin access required"
    },
    404: {
      description: "Security event not found"
    }
  }
}), PaymentController.getSecurityEventDetails);
export default app;