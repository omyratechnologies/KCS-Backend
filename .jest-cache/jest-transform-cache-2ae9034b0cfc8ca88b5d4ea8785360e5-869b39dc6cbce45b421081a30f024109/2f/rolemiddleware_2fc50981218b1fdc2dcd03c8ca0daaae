014613c8b6a604eb252e81681f640d65
/* istanbul ignore next */
function cov_12ylb8hgi0() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/middlewares/role.middleware.ts";
  var hash = "c7c46340ae1050935a452beaa7c25f3b2da7e06d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/middlewares/role.middleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 30
        },
        end: {
          line: 20,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "2": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 4,
          column: 46
        }
      },
      "3": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 7,
          column: 9
        }
      },
      "4": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 60
        }
      },
      "5": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 11,
          column: 9
        }
      },
      "7": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 60
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "9": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "10": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 60
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 30
          },
          end: {
            line: 2,
            column: 31
          }
        },
        loc: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 12
          }
        },
        loc: {
          start: {
            line: 3,
            column: 32
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 3
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 7,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 7,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 11,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 11,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: 15,
            column: 13
          },
          end: {
            line: 17,
            column: 9
          }
        }],
        line: 12
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c7c46340ae1050935a452beaa7c25f3b2da7e06d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12ylb8hgi0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12ylb8hgi0();
import { actionMap } from "@/store/role.store";
/* istanbul ignore next */
cov_12ylb8hgi0().s[0]++;
export const roleMiddleware = actionName => {
  /* istanbul ignore next */
  cov_12ylb8hgi0().f[0]++;
  cov_12ylb8hgi0().s[1]++;
  return async (ctx, next) => {
    /* istanbul ignore next */
    cov_12ylb8hgi0().f[1]++;
    const user_type =
    /* istanbul ignore next */
    (cov_12ylb8hgi0().s[2]++, ctx.get("user_type"));
    /* istanbul ignore next */
    cov_12ylb8hgi0().s[3]++;
    if (!user_type) {
      /* istanbul ignore next */
      cov_12ylb8hgi0().b[0][0]++;
      cov_12ylb8hgi0().s[4]++;
      return ctx.json({
        error: "Unauthorized"
      }, 401);
    } else
    /* istanbul ignore next */
    {
      cov_12ylb8hgi0().b[0][1]++;
    }
    const actions =
    /* istanbul ignore next */
    (cov_12ylb8hgi0().s[5]++, actionMap[user_type]);
    /* istanbul ignore next */
    cov_12ylb8hgi0().s[6]++;
    if (!actions) {
      /* istanbul ignore next */
      cov_12ylb8hgi0().b[1][0]++;
      cov_12ylb8hgi0().s[7]++;
      return ctx.json({
        error: "Unauthorized"
      }, 401);
    } else
    /* istanbul ignore next */
    {
      cov_12ylb8hgi0().b[1][1]++;
    }
    cov_12ylb8hgi0().s[8]++;
    if (actions.includes(actionName)) {
      /* istanbul ignore next */
      cov_12ylb8hgi0().b[2][0]++;
      cov_12ylb8hgi0().s[9]++;
      ctx.set("action", actionName);
    } else {
      /* istanbul ignore next */
      cov_12ylb8hgi0().b[2][1]++;
      cov_12ylb8hgi0().s[10]++;
      return ctx.json({
        error: "Unauthorized"
      }, 401);
    }
    /* istanbul ignore next */
    cov_12ylb8hgi0().s[11]++;
    await next();
  };
};