853aaa49b281f572b2651b172685c444
/* istanbul ignore next */
function cov_ll3usoof8() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/auth.controller.ts";
  var hash = "5327a04dc0233f43aba5c5897435de418223ea57";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/auth.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "1": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "2": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "3": {
        start: {
          line: 12,
          column: 39
        },
        end: {
          line: 12,
          column: 57
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 15,
          column: 9
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 66
        }
      },
      "6": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 19,
          column: 10
        }
      },
      "7": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "8": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "10": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "11": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 39,
          column: 20
        }
      },
      "12": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "13": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "14": {
        start: {
          line: 45,
          column: 26
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 49
        }
      },
      "17": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "18": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "19": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "20": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 20
        }
      },
      "21": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 86,
          column: 2
        }
      },
      "22": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "23": {
        start: {
          line: 66,
          column: 41
        },
        end: {
          line: 66,
          column: 59
        }
      },
      "24": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "25": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 68
        }
      },
      "26": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "29": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 83,
          column: 20
        }
      },
      "30": {
        start: {
          line: 87,
          column: 0
        },
        end: {
          line: 117,
          column: 2
        }
      },
      "31": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 116,
          column: 5
        }
      },
      "32": {
        start: {
          line: 89,
          column: 34
        },
        end: {
          line: 89,
          column: 52
        }
      },
      "33": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "34": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 57
        }
      },
      "35": {
        start: {
          line: 93,
          column: 37
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "36": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 68
        }
      },
      "37": {
        start: {
          line: 97,
          column: 22
        },
        end: {
          line: 102,
          column: 38
        }
      },
      "38": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "39": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "40": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 114,
          column: 20
        }
      },
      "41": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 133,
          column: 2
        }
      },
      "42": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "43": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 121,
          column: 40
        }
      },
      "44": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 29
        }
      },
      "45": {
        start: {
          line: 123,
          column: 21
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "46": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 28
        }
      },
      "47": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "48": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 130,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 24
          }
        },
        loc: {
          start: {
            line: 10,
            column: 36
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 33
          }
        },
        loc: {
          start: {
            line: 43,
            column: 45
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 31
          },
          end: {
            line: 64,
            column: 32
          }
        },
        loc: {
          start: {
            line: 64,
            column: 44
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 87,
            column: 30
          },
          end: {
            line: 87,
            column: 31
          }
        },
        loc: {
          start: {
            line: 87,
            column: 43
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 87
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 119,
            column: 24
          },
          end: {
            line: 119,
            column: 25
          }
        },
        loc: {
          start: {
            line: 119,
            column: 37
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 21
          }
        }, {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 34
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 18
          }
        }, {
          start: {
            line: 67,
            column: 22
          },
          end: {
            line: 67,
            column: 26
          }
        }, {
          start: {
            line: 67,
            column: 30
          },
          end: {
            line: 67,
            column: 39
          }
        }],
        line: 67
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "9": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "10": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5327a04dc0233f43aba5c5897435de418223ea57"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ll3usoof8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ll3usoof8();
var _a;
import { sign } from "hono/jwt";
import { AuthService } from "@/services/auth.service";
import { UserService } from "@/services/users.service";
import { config } from "@/utils/env";
export class AuthController {}
/* istanbul ignore next */
cov_ll3usoof8().s[0]++;
_a = AuthController;
// Create
/* istanbul ignore next */
cov_ll3usoof8().s[1]++;
AuthController.login = async c => {
  /* istanbul ignore next */
  cov_ll3usoof8().f[0]++;
  cov_ll3usoof8().s[2]++;
  try {
    const {
      login_id,
      password
    } =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[3]++, await c.req.json());
    /* istanbul ignore next */
    cov_ll3usoof8().s[4]++;
    if (
    /* istanbul ignore next */
    (cov_ll3usoof8().b[1][0]++, !login_id) ||
    /* istanbul ignore next */
    (cov_ll3usoof8().b[1][1]++, !password)) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[0][0]++;
      cov_ll3usoof8().s[5]++;
      throw new Error("Login ID and password are required");
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[0][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[6]++, await AuthService.login({
      login_id,
      password
    }));
    // 7 days
    const exp =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[7]++, Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7);
    const token =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[8]++, await sign({
      user_id: user.user.id,
      user_type: user.user.user_type,
      session_id: user.session_id,
      exp
    }, config.JWT_SECRET, "HS512"));
    /* istanbul ignore next */
    cov_ll3usoof8().s[9]++;
    return c.json({
      access_token: token,
      refresh_token: user.refresh_token,
      expires_in: exp,
      type: "Bearer"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ll3usoof8().s[10]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[2][0]++;
      cov_ll3usoof8().s[11]++;
      return c.json({
        message: error.message
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[2][1]++;
    }
  }
};
/* istanbul ignore next */
cov_ll3usoof8().s[12]++;
AuthController.forgotPassword = async c => {
  /* istanbul ignore next */
  cov_ll3usoof8().f[1]++;
  cov_ll3usoof8().s[13]++;
  try {
    const {
      email
    } =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[14]++, await c.req.json());
    /* istanbul ignore next */
    cov_ll3usoof8().s[15]++;
    if (!email) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[3][0]++;
      cov_ll3usoof8().s[16]++;
      throw new Error("Email is required");
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[3][1]++;
    }
    cov_ll3usoof8().s[17]++;
    await AuthService.forgotPassword({
      email
    });
    /* istanbul ignore next */
    cov_ll3usoof8().s[18]++;
    return c.json({
      message: "Password reset email sent"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ll3usoof8().s[19]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[4][0]++;
      cov_ll3usoof8().s[20]++;
      return c.json({
        message: error.message
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[4][1]++;
    }
  }
};
/* istanbul ignore next */
cov_ll3usoof8().s[21]++;
AuthController.resetPassword = async c => {
  /* istanbul ignore next */
  cov_ll3usoof8().f[2]++;
  cov_ll3usoof8().s[22]++;
  try {
    const {
      email,
      otp,
      password
    } =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[23]++, await c.req.json());
    /* istanbul ignore next */
    cov_ll3usoof8().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_ll3usoof8().b[6][0]++, !email) ||
    /* istanbul ignore next */
    (cov_ll3usoof8().b[6][1]++, !otp) ||
    /* istanbul ignore next */
    (cov_ll3usoof8().b[6][2]++, !password)) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[5][0]++;
      cov_ll3usoof8().s[25]++;
      throw new Error("Email, OTP and password are required");
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[5][1]++;
    }
    cov_ll3usoof8().s[26]++;
    await AuthService.resetPassword({
      email,
      otp,
      password
    });
    /* istanbul ignore next */
    cov_ll3usoof8().s[27]++;
    return c.json({
      message: "Password reset successful"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ll3usoof8().s[28]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[7][0]++;
      cov_ll3usoof8().s[29]++;
      return c.json({
        message: error.message
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[7][1]++;
    }
  }
};
/* istanbul ignore next */
cov_ll3usoof8().s[30]++;
AuthController.refreshToken = async c => {
  /* istanbul ignore next */
  cov_ll3usoof8().f[3]++;
  cov_ll3usoof8().s[31]++;
  try {
    const {
      refresh_token
    } =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[32]++, await c.req.json());
    /* istanbul ignore next */
    cov_ll3usoof8().s[33]++;
    if (!refresh_token) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[8][0]++;
      cov_ll3usoof8().s[34]++;
      throw new Error("Refresh token is required");
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[8][1]++;
    }
    const {
      user,
      session_id
    } =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[35]++, await AuthService.refreshToken({
      refresh_token
    }));
    const exp =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[36]++, Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 7);
    const token =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[37]++, await sign({
      user_id: user.id,
      user_type: user.user_type,
      session_id,
      exp
    }, config.JWT_SECRET, "HS512"));
    /* istanbul ignore next */
    cov_ll3usoof8().s[38]++;
    return c.json({
      access_token: token,
      refresh_token,
      expires_in: exp,
      type: "Bearer"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_ll3usoof8().s[39]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[9][0]++;
      cov_ll3usoof8().s[40]++;
      return c.json({
        message: error.message
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[9][1]++;
    }
  }
};
// get current user
/* istanbul ignore next */
cov_ll3usoof8().s[41]++;
AuthController.whoami = async c => {
  /* istanbul ignore next */
  cov_ll3usoof8().f[4]++;
  cov_ll3usoof8().s[42]++;
  try {
    const user_id =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[43]++, c.get("user_id"));
    /* istanbul ignore next */
    cov_ll3usoof8().s[44]++;
    console.log(user_id);
    const user =
    /* istanbul ignore next */
    (cov_ll3usoof8().s[45]++, await UserService.getUser(user_id));
    /* istanbul ignore next */
    cov_ll3usoof8().s[46]++;
    return c.json(user);
  } catch (error) {
    /* istanbul ignore next */
    cov_ll3usoof8().s[47]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_ll3usoof8().b[10][0]++;
      cov_ll3usoof8().s[48]++;
      return c.json({
        message: error.message
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_ll3usoof8().b[10][1]++;
    }
  }
};