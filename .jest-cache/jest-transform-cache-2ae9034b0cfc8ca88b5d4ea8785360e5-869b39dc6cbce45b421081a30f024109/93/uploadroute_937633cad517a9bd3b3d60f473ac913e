78640a7f10fe25830d8b9f691087f31e
/* istanbul ignore next */
function cov_162xrub3vc() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/upload.route.ts";
  var hash = "274c1c1350491319638207b6194135a25231d4a5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/upload.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 30,
          column: 33
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 71,
          column: 35
        }
      },
      "3": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 104,
          column: 32
        }
      },
      "4": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 128,
          column: 40
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "274c1c1350491319638207b6194135a25231d4a5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_162xrub3vc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_162xrub3vc();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver } from "hono-openapi/zod";
import { UploadController } from "@/controllers/upload.controller";
import { createUploadResponseSchema, errorResponseSchema, getUploadsResponseSchema, uploadSchema } from "@/schema/upload";
const app =
/* istanbul ignore next */
(cov_162xrub3vc().s[0]++, new Hono());
/* istanbul ignore next */
cov_162xrub3vc().s[1]++;
app.get("/user", describeRoute({
  operationId: "getUploads",
  summary: "Get uploads by user",
  description: "Retrieves all uploads for the current user",
  tags: ["Upload"],
  responses: {
    200: {
      description: "List of uploads",
      content: {
        "application/json": {
          schema: resolver(getUploadsResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), UploadController.getUploads);
/* istanbul ignore next */
cov_162xrub3vc().s[2]++;
app.put("/", describeRoute({
  operationId: "createUpload",
  summary: "Upload a file",
  description: "Uploads a new file to the system",
  tags: ["Upload"],
  requestBody: {
    content: {
      "multipart/form-data": {
        schema: {
          type: "object",
          properties: {
            file: {
              type: "string",
              format: "binary",
              description: "File to upload"
            }
          },
          required: ["file"]
        }
      }
    }
  },
  responses: {
    200: {
      description: "File uploaded successfully",
      content: {
        "application/json": {
          schema: resolver(createUploadResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), UploadController.createUpload);
/* istanbul ignore next */
cov_162xrub3vc().s[3]++;
app.get("/i/:upload_id", describeRoute({
  operationId: "getUpload",
  summary: "Get upload by ID",
  description: "Retrieves a specific upload by ID",
  tags: ["Upload"],
  parameters: [{
    name: "upload_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Upload ID"
  }],
  responses: {
    200: {
      description: "Upload details",
      content: {
        "application/json": {
          schema: resolver(uploadSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), UploadController.getUpload);
/* istanbul ignore next */
cov_162xrub3vc().s[4]++;
app.get("/campus", describeRoute({
  operationId: "getUploadByCampus",
  summary: "Get uploads by campus",
  description: "Retrieves all uploads for the current campus",
  tags: ["Upload"],
  responses: {
    200: {
      description: "List of uploads",
      content: {
        "application/json": {
          schema: resolver(getUploadsResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), UploadController.getUploadByCampus);
export default app;