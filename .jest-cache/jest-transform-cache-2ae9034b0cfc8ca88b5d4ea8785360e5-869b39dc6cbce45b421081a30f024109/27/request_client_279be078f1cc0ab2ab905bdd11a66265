ee0b978e7309836e1ab14e1f0d0ce968
/* istanbul ignore next */
function cov_1ip3ps6sj() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/utils/request_client.ts";
  var hash = "bebcf30db35b8121acae92d2802602ef40f39d18";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/utils/request_client.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "2": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 10,
          column: 50
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "5": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "6": {
        start: {
          line: 25,
          column: 41
        },
        end: {
          line: 42,
          column: 1
        }
      },
      "7": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "8": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 50
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "11": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 47
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 23
          },
          end: {
            line: 8,
            column: 24
          }
        },
        loc: {
          start: {
            line: 8,
            column: 47
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 25,
            column: 42
          }
        },
        loc: {
          start: {
            line: 25,
            column: 65
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bebcf30db35b8121acae92d2802602ef40f39d18"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ip3ps6sj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ip3ps6sj();
import fetch, { Headers } from "node-fetch";
/**
 * Make a request to the given url with the given options
 * @param url URL to make the request to
 * @param options Options to pass to the fetch function
 * @returns The response from the request
 */
/* istanbul ignore next */
cov_1ip3ps6sj().s[0]++;
export const request = async (url, options) => {
  /* istanbul ignore next */
  cov_1ip3ps6sj().f[0]++;
  cov_1ip3ps6sj().s[1]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_1ip3ps6sj().s[2]++, await fetch(url, options));
    /* istanbul ignore next */
    cov_1ip3ps6sj().s[3]++;
    return await response.json();
  } catch (error) {
    /* istanbul ignore next */
    cov_1ip3ps6sj().s[4]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1ip3ps6sj().b[0][0]++;
      cov_1ip3ps6sj().s[5]++;
      throw new TypeError(error.message);
    } else
    /* istanbul ignore next */
    {
      cov_1ip3ps6sj().b[0][1]++;
    }
  }
};
/**
 * Make a request to the given url with the given options and return the response and headers
 * @param url URL to make the request to
 * @param options Options to pass to the fetch function
 * @returns The response and headers from the request
 */
/* istanbul ignore next */
cov_1ip3ps6sj().s[6]++;
export const requestWithResponseHeader = async (url, options) => {
  /* istanbul ignore next */
  cov_1ip3ps6sj().f[1]++;
  cov_1ip3ps6sj().s[7]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_1ip3ps6sj().s[8]++, await fetch(url, options));
    /* istanbul ignore next */
    cov_1ip3ps6sj().s[9]++;
    return {
      response: await response.json(),
      headers: response.headers
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1ip3ps6sj().s[10]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1ip3ps6sj().b[1][0]++;
      cov_1ip3ps6sj().s[11]++;
      throw new TypeError(error.message);
    } else
    /* istanbul ignore next */
    {
      cov_1ip3ps6sj().b[1][1]++;
    }
    cov_1ip3ps6sj().s[12]++;
    return {
      response: " ",
      headers: new Headers()
    };
  }
};