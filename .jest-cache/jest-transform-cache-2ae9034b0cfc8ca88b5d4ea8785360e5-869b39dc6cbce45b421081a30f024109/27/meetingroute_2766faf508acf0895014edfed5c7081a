512e213dc18c9339912d85a1effaaa85
/* istanbul ignore next */
function cov_yfa62kiyp() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/meeting.route.ts";
  var hash = "8835556ce842f910ed1720de93deb458f74a3beb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/meeting.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "1": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 43
        }
      },
      "2": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "3": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "4": {
        start: {
          line: 20,
          column: 36
        },
        end: {
          line: 62,
          column: 2
        }
      },
      "5": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 80
        }
      },
      "6": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "7": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 83
        }
      },
      "8": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 16
        }
      },
      "9": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 68,
          column: 2
        }
      },
      "10": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 67,
          column: 80
        }
      },
      "11": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 72,
          column: 2
        }
      },
      "12": {
        start: {
          line: 73,
          column: 36
        },
        end: {
          line: 103,
          column: 2
        }
      },
      "13": {
        start: {
          line: 84,
          column: 32
        },
        end: {
          line: 84,
          column: 84
        }
      },
      "14": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 80
        }
      },
      "15": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "16": {
        start: {
          line: 100,
          column: 42
        },
        end: {
          line: 100,
          column: 62
        }
      },
      "17": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 105,
          column: 34
        }
      },
      "18": {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 130,
          column: 86
        }
      },
      "19": {
        start: {
          line: 132,
          column: 0
        },
        end: {
          line: 147,
          column: 38
        }
      },
      "20": {
        start: {
          line: 149,
          column: 0
        },
        end: {
          line: 172,
          column: 38
        }
      },
      "21": {
        start: {
          line: 174,
          column: 0
        },
        end: {
          line: 189,
          column: 49
        }
      },
      "22": {
        start: {
          line: 191,
          column: 0
        },
        end: {
          line: 206,
          column: 89
        }
      },
      "23": {
        start: {
          line: 208,
          column: 0
        },
        end: {
          line: 223,
          column: 37
        }
      },
      "24": {
        start: {
          line: 225,
          column: 0
        },
        end: {
          line: 240,
          column: 36
        }
      },
      "25": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 257,
          column: 34
        }
      },
      "26": {
        start: {
          line: 259,
          column: 0
        },
        end: {
          line: 274,
          column: 74
        }
      },
      "27": {
        start: {
          line: 276,
          column: 0
        },
        end: {
          line: 291,
          column: 46
        }
      },
      "28": {
        start: {
          line: 293,
          column: 0
        },
        end: {
          line: 308,
          column: 38
        }
      },
      "29": {
        start: {
          line: 310,
          column: 0
        },
        end: {
          line: 325,
          column: 44
        }
      },
      "30": {
        start: {
          line: 327,
          column: 0
        },
        end: {
          line: 342,
          column: 43
        }
      },
      "31": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 359,
          column: 39
        }
      },
      "32": {
        start: {
          line: 361,
          column: 0
        },
        end: {
          line: 376,
          column: 43
        }
      },
      "33": {
        start: {
          line: 379,
          column: 0
        },
        end: {
          line: 414,
          column: 40
        }
      },
      "34": {
        start: {
          line: 416,
          column: 0
        },
        end: {
          line: 444,
          column: 43
        }
      },
      "35": {
        start: {
          line: 446,
          column: 0
        },
        end: {
          line: 482,
          column: 46
        }
      },
      "36": {
        start: {
          line: 484,
          column: 0
        },
        end: {
          line: 504,
          column: 41
        }
      },
      "37": {
        start: {
          line: 506,
          column: 0
        },
        end: {
          line: 521,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 29,
            column: 19
          },
          end: {
            line: 29,
            column: 20
          }
        },
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 80
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        loc: {
          start: {
            line: 55,
            column: 22
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 55
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 67,
            column: 20
          }
        },
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 80
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 23
          },
          end: {
            line: 84,
            column: 24
          }
        },
        loc: {
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 84
          }
        },
        line: 84
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 19
          },
          end: {
            line: 94,
            column: 20
          }
        },
        loc: {
          start: {
            line: 94,
            column: 28
          },
          end: {
            line: 94,
            column: 80
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        loc: {
          start: {
            line: 98,
            column: 22
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 35
          },
          end: {
            line: 100,
            column: 36
          }
        },
        loc: {
          start: {
            line: 100,
            column: 42
          },
          end: {
            line: 100,
            column: 62
          }
        },
        line: 100
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 61
          },
          end: {
            line: 29,
            column: 67
          }
        }, {
          start: {
            line: 29,
            column: 70
          },
          end: {
            line: 29,
            column: 80
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 40
          }
        }, {
          start: {
            line: 29,
            column: 44
          },
          end: {
            line: 29,
            column: 58
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 31
          }
        }, {
          start: {
            line: 56,
            column: 35
          },
          end: {
            line: 56,
            column: 56
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 61
          },
          end: {
            line: 67,
            column: 67
          }
        }, {
          start: {
            line: 67,
            column: 70
          },
          end: {
            line: 67,
            column: 80
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 67,
            column: 40
          }
        }, {
          start: {
            line: 67,
            column: 44
          },
          end: {
            line: 67,
            column: 58
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 65
          },
          end: {
            line: 84,
            column: 71
          }
        }, {
          start: {
            line: 84,
            column: 74
          },
          end: {
            line: 84,
            column: 84
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 44
          }
        }, {
          start: {
            line: 84,
            column: 48
          },
          end: {
            line: 84,
            column: 62
          }
        }],
        line: 84
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 28
          },
          end: {
            line: 94,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 61
          },
          end: {
            line: 94,
            column: 67
          }
        }, {
          start: {
            line: 94,
            column: 70
          },
          end: {
            line: 94,
            column: 80
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 28
          },
          end: {
            line: 94,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 28
          },
          end: {
            line: 94,
            column: 40
          }
        }, {
          start: {
            line: 94,
            column: 44
          },
          end: {
            line: 94,
            column: 58
          }
        }],
        line: 94
      },
      "10": {
        loc: {
          start: {
            line: 100,
            column: 42
          },
          end: {
            line: 100,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 42
          },
          end: {
            line: 100,
            column: 51
          }
        }, {
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 62
          }
        }],
        line: 100
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8835556ce842f910ed1720de93deb458f74a3beb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yfa62kiyp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yfa62kiyp();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { z } from "zod";
// Removed compress import due to CompressionStream compatibility issues
import { MeetingController } from "@/controllers/meeting.controller";
import { meetingAccessControl, meetingSecurityMiddleware } from "@/middlewares/meeting_security.middleware";
import { meetingRateLimit } from "@/middlewares/rate_limiting.middleware";
import { createMeetingRequestBodySchema, createMeetingResponseSchema, errorResponseSchema, getMeetingsResponseSchema, meetingSchema, updateMeetingRequestBodySchema, updateMeetingResponseSchema } from "@/schema/meeting";
/**
 * 🎪 Enhanced Meeting Routes for Real-time Video Conferencing
 */
const app =
/* istanbul ignore next */
(cov_yfa62kiyp().s[0]++, new Hono());
// Apply middleware stack (removed compress due to CompressionStream issues)
// app.use("/*", compress()); // Response compression - DISABLED DUE TO COMPATIBILITY
/* istanbul ignore next */
cov_yfa62kiyp().s[1]++;
app.use("/*", meetingSecurityMiddleware()); // Security headers
/* istanbul ignore next */
cov_yfa62kiyp().s[2]++;
app.use("/*", meetingRateLimit()); // Rate limiting
/* istanbul ignore next */
cov_yfa62kiyp().s[3]++;
app.use("/*", meetingAccessControl()); // Access control
// Enhanced meeting creation schema with strict validation
const enhancedCreateMeetingSchema =
/* istanbul ignore next */
(cov_yfa62kiyp().s[4]++, createMeetingRequestBodySchema.extend({
  meeting_type: z.enum(["scheduled", "instant", "recurring"]).optional(),
  max_participants: z.number().min(2).max(10000).optional(),
  meeting_password: z.string().min(6).max(50).optional().transform(val => {
    /* istanbul ignore next */
    cov_yfa62kiyp().f[0]++;
    cov_yfa62kiyp().s[5]++;
    return /* istanbul ignore next */(cov_yfa62kiyp().b[1][0]++, val === null) ||
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[1][1]++, val === void 0) ?
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[0][0]++, void 0) :
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[0][1]++, val.trim());
  }),
  waiting_room_enabled: z.boolean().optional(),
  require_host_approval: z.boolean().optional(),
  features: z.object({
    video_enabled: z.boolean().optional(),
    audio_enabled: z.boolean().optional(),
    screen_sharing_enabled: z.boolean().optional(),
    chat_enabled: z.boolean().optional(),
    recording_enabled: z.boolean().optional(),
    breakout_rooms_enabled: z.boolean().optional(),
    whiteboard_enabled: z.boolean().optional(),
    hand_raise_enabled: z.boolean().optional()
  }).optional(),
  recording_config: z.object({
    auto_record: z.boolean().optional(),
    record_video: z.boolean().optional(),
    record_audio: z.boolean().optional(),
    record_chat: z.boolean().optional(),
    storage_location: z.enum(["local", "cloud"]).optional(),
    retention_days: z.number().min(1).max(365).optional()
  }).optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_yfa62kiyp().f[1]++;
  cov_yfa62kiyp().s[6]++;
  if (
  /* istanbul ignore next */
  (cov_yfa62kiyp().b[3][0]++, data.meeting_start_time) &&
  /* istanbul ignore next */
  (cov_yfa62kiyp().b[3][1]++, data.meeting_end_time)) {
    /* istanbul ignore next */
    cov_yfa62kiyp().b[2][0]++;
    cov_yfa62kiyp().s[7]++;
    return new Date(data.meeting_start_time) < new Date(data.meeting_end_time);
  } else
  /* istanbul ignore next */
  {
    cov_yfa62kiyp().b[2][1]++;
  }
  cov_yfa62kiyp().s[8]++;
  return true;
}, {
  message: "Meeting end time must be after start time"
}));
const joinMeetingSchema =
/* istanbul ignore next */
(cov_yfa62kiyp().s[9]++, z.object({
  meeting_password: z.string().optional().transform(val => {
    /* istanbul ignore next */
    cov_yfa62kiyp().f[2]++;
    cov_yfa62kiyp().s[10]++;
    return /* istanbul ignore next */(cov_yfa62kiyp().b[5][0]++, val === null) ||
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[5][1]++, val === void 0) ?
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[4][0]++, void 0) :
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[4][1]++, val.trim());
  })
}));
// Parameter validation schemas
const meetingIdSchema =
/* istanbul ignore next */
(cov_yfa62kiyp().s[11]++, z.object({
  meeting_id: z.string().min(1, "Meeting ID is required")
}));
const participantManagementSchema =
/* istanbul ignore next */
(cov_yfa62kiyp().s[12]++, z.object({
  participants: z.array(z.object({
    user_id: z.string().optional(),
    email: z.string().email().optional(),
    name: z.string().min(1).max(100).optional().transform(val => {
      /* istanbul ignore next */
      cov_yfa62kiyp().f[3]++;
      cov_yfa62kiyp().s[13]++;
      return /* istanbul ignore next */(cov_yfa62kiyp().b[7][0]++, val === null) ||
      /* istanbul ignore next */
      (cov_yfa62kiyp().b[7][1]++, val === void 0) ?
      /* istanbul ignore next */
      (cov_yfa62kiyp().b[6][0]++, void 0) :
      /* istanbul ignore next */
      (cov_yfa62kiyp().b[6][1]++, val.trim());
    }),
    phone: z.string().optional(),
    role: z.enum(["host", "co_host", "presenter", "attendee"]).optional()
  })).min(1, "At least one participant is required"),
  send_invitation: z.boolean().optional(),
  invitation_message: z.string().max(500).optional().transform(val => {
    /* istanbul ignore next */
    cov_yfa62kiyp().f[4]++;
    cov_yfa62kiyp().s[14]++;
    return /* istanbul ignore next */(cov_yfa62kiyp().b[9][0]++, val === null) ||
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[9][1]++, val === void 0) ?
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[8][0]++, void 0) :
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[8][1]++, val.trim());
  }),
  participant_role: z.enum(["host", "co_host", "presenter", "attendee"]).optional(),
  notify_existing_participants: z.boolean().optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_yfa62kiyp().f[5]++;
  cov_yfa62kiyp().s[15]++;
  // Ensure each participant has either user_id or email
  return data.participants.every(p => {
    /* istanbul ignore next */
    cov_yfa62kiyp().f[6]++;
    cov_yfa62kiyp().s[16]++;
    return /* istanbul ignore next */(cov_yfa62kiyp().b[10][0]++, p.user_id) ||
    /* istanbul ignore next */
    (cov_yfa62kiyp().b[10][1]++, p.email);
  });
}, {
  message: "Each participant must have either user_id or email"
}));
// Apply rate limiting middleware
/* istanbul ignore next */
cov_yfa62kiyp().s[17]++;
app.use("/*", meetingRateLimit());
// Create meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[18]++;
app.post("/", describeRoute({
  operationId: "createMeeting",
  summary: "Create a new meeting with enhanced features",
  description: "Creates a meeting with real-time video conferencing capabilities",
  tags: ["Meeting"],
  responses: {
    200: {
      description: "Meeting created successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", enhancedCreateMeetingSchema), MeetingController.createMeeting);
// Get all meetings
/* istanbul ignore next */
cov_yfa62kiyp().s[19]++;
app.get("/", describeRoute({
  operationId: "getAllMeetings",
  summary: "Get all meetings",
  description: "Retrieves all meetings with real-time status",
  tags: ["Meeting"],
  responses: {
    200: {
      description: "Meetings retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(getMeetingsResponseSchema)
        }
      }
    }
  }
}), MeetingController.getAllMeetings);
// Get meeting by ID
/* istanbul ignore next */
cov_yfa62kiyp().s[20]++;
app.get("/:meeting_id", describeRoute({
  operationId: "getMeetingById",
  summary: "Get meeting by ID",
  description: "Retrieves detailed meeting information",
  tags: ["Meeting"],
  responses: {
    200: {
      description: "Meeting retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(meetingSchema)
        }
      }
    },
    404: {
      description: "Meeting not found",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), MeetingController.getMeetingById);
// Get meetings by participant
/* istanbul ignore next */
cov_yfa62kiyp().s[21]++;
app.get("/participant/:participant_id?", describeRoute({
  operationId: "getMeetingByParticipantId",
  summary: "Get meetings for participant",
  description: "Retrieves meetings for a participant",
  tags: ["Meeting"],
  responses: {
    200: {
      description: "Meetings retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(getMeetingsResponseSchema)
        }
      }
    }
  }
}), MeetingController.getMeetingByParticipantId);
// Update meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[22]++;
app.put("/:meeting_id", describeRoute({
  operationId: "updateMeeting",
  summary: "Update meeting",
  description: "Updates meeting details",
  tags: ["Meeting"],
  responses: {
    200: {
      description: "Meeting updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateMeetingResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateMeetingRequestBodySchema), MeetingController.updateMeeting);
// Delete meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[23]++;
app.delete("/:meeting_id", describeRoute({
  operationId: "deleteMeeting",
  summary: "Delete meeting",
  description: "Soft deletes a meeting",
  tags: ["Meeting"],
  responses: {
    200: {
      description: "Meeting deleted successfully",
      content: {
        "application/json": {
          schema: resolver(meetingSchema)
        }
      }
    }
  }
}), MeetingController.deleteMeeting);
// Start meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[24]++;
app.post("/:meeting_id/start", describeRoute({
  operationId: "startMeeting",
  summary: "Start meeting",
  description: "Starts a scheduled meeting",
  tags: ["Meeting", "Live"],
  responses: {
    200: {
      description: "Meeting started successfully",
      content: {
        "application/json": {
          schema: resolver(meetingSchema)
        }
      }
    }
  }
}), MeetingController.startMeeting);
// End meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[25]++;
app.post("/:meeting_id/end", describeRoute({
  operationId: "endMeeting",
  summary: "End meeting",
  description: "Ends a live meeting",
  tags: ["Meeting", "Live"],
  responses: {
    200: {
      description: "Meeting ended successfully",
      content: {
        "application/json": {
          schema: resolver(meetingSchema)
        }
      }
    }
  }
}), MeetingController.endMeeting);
// Join meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[26]++;
app.post("/:meeting_id/join", describeRoute({
  operationId: "joinMeeting",
  summary: "Join meeting",
  description: "Validates access and joins meeting",
  tags: ["Meeting", "Live"],
  responses: {
    200: {
      description: "Join validation successful",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    }
  }
}), zValidator("json", joinMeetingSchema), MeetingController.joinMeeting);
// Get participants
/* istanbul ignore next */
cov_yfa62kiyp().s[27]++;
app.get("/:meeting_id/participants", describeRoute({
  operationId: "getMeetingParticipants",
  summary: "Get meeting participants",
  description: "Retrieves meeting participants",
  tags: ["Meeting", "Participants"],
  responses: {
    200: {
      description: "Participants retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(getMeetingsResponseSchema)
        }
      }
    }
  }
}), MeetingController.getMeetingParticipants);
// Get chat history
/* istanbul ignore next */
cov_yfa62kiyp().s[28]++;
app.get("/:meeting_id/chat", describeRoute({
  operationId: "getMeetingChat",
  summary: "Get meeting chat",
  description: "Retrieves chat history",
  tags: ["Meeting", "Chat"],
  responses: {
    200: {
      description: "Chat retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(getMeetingsResponseSchema)
        }
      }
    }
  }
}), MeetingController.getMeetingChat);
// Get recordings
/* istanbul ignore next */
cov_yfa62kiyp().s[29]++;
app.get("/:meeting_id/recordings", describeRoute({
  operationId: "getMeetingRecordings",
  summary: "Get meeting recordings",
  description: "Retrieves meeting recordings",
  tags: ["Meeting", "Recordings"],
  responses: {
    200: {
      description: "Recordings retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(getMeetingsResponseSchema)
        }
      }
    }
  }
}), MeetingController.getMeetingRecordings);
// Get analytics
/* istanbul ignore next */
cov_yfa62kiyp().s[30]++;
app.get("/:meeting_id/analytics", describeRoute({
  operationId: "getMeetingAnalytics",
  summary: "Get meeting analytics",
  description: "Retrieves meeting analytics",
  tags: ["Meeting", "Analytics"],
  responses: {
    200: {
      description: "Analytics retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    }
  }
}), MeetingController.getMeetingAnalytics);
// Get WebRTC config
/* istanbul ignore next */
cov_yfa62kiyp().s[31]++;
app.get("/:meeting_id/webrtc-config", describeRoute({
  operationId: "getWebRTCConfig",
  summary: "Get WebRTC configuration",
  description: "Retrieves WebRTC configuration",
  tags: ["Meeting", "WebRTC"],
  responses: {
    200: {
      description: "Configuration retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    }
  }
}), MeetingController.getWebRTCConfig);
// Get live stats
/* istanbul ignore next */
cov_yfa62kiyp().s[32]++;
app.get("/:meeting_id/live-stats", describeRoute({
  operationId: "getLiveMeetingStats",
  summary: "Get live meeting statistics",
  description: "Retrieves real-time statistics",
  tags: ["Meeting", "Live", "Statistics"],
  responses: {
    200: {
      description: "Statistics retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    }
  }
}), MeetingController.getLiveMeetingStats);
// Microsoft Teams-style participant management routes
// Add participants to meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[33]++;
app.post("/:id/participants", describeRoute({
  operationId: "addParticipants",
  summary: "Add participants to meeting",
  description: "Add people to meeting like Microsoft Teams - works for both scheduled and live meetings",
  tags: ["Meeting", "Participants"],
  responses: {
    200: {
      description: "Participants added successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    },
    403: {
      description: "Access denied - only hosts/co-hosts can add participants",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", z.object({
  participants: z.array(z.object({
    user_id: z.string().optional(),
    email: z.string().email().optional(),
    name: z.string().optional(),
    phone: z.string().optional(),
    role: z.enum(["host", "co_host", "presenter", "attendee"]).optional()
  })),
  send_invitation: z.boolean().optional(),
  invitation_message: z.string().optional(),
  participant_role: z.enum(["host", "co_host", "presenter", "attendee"]).optional(),
  notify_existing_participants: z.boolean().optional()
})), MeetingController.addParticipants);
// Remove participants from meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[34]++;
app.delete("/:id/participants", describeRoute({
  operationId: "removeParticipants",
  summary: "Remove participants from meeting",
  description: "Remove people from meeting like Microsoft Teams",
  tags: ["Meeting", "Participants"],
  responses: {
    200: {
      description: "Participants removed successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    },
    403: {
      description: "Access denied - only hosts/co-hosts can remove participants",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", z.object({
  participant_ids: z.array(z.string()),
  notify_removed_participants: z.boolean().optional(),
  notify_existing_participants: z.boolean().optional(),
  reason: z.string().optional()
})), MeetingController.removeParticipants);
// Update participant role
/* istanbul ignore next */
cov_yfa62kiyp().s[35]++;
app.patch("/:id/participants/:participant_id/role", describeRoute({
  operationId: "updateParticipantRole",
  summary: "Update participant role",
  description: "Change participant role and permissions like Microsoft Teams",
  tags: ["Meeting", "Participants"],
  responses: {
    200: {
      description: "Participant role updated successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    },
    403: {
      description: "Access denied - only hosts can change roles",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", z.object({
  new_role: z.enum(["host", "co_host", "presenter", "attendee"]),
  permissions: z.object({
    can_share_screen: z.boolean().optional(),
    can_unmute_others: z.boolean().optional(),
    can_manage_participants: z.boolean().optional(),
    can_record: z.boolean().optional(),
    can_manage_breakout_rooms: z.boolean().optional()
  }).optional(),
  notify_participant: z.boolean().optional(),
  notify_others: z.boolean().optional()
})), MeetingController.updateParticipantRole);
// Search users to add to meeting
/* istanbul ignore next */
cov_yfa62kiyp().s[36]++;
app.post("/:id/search-users", describeRoute({
  operationId: "searchUsersToAdd",
  summary: "Search users to add to meeting",
  description: "Search campus directory to find people to add like Microsoft Teams",
  tags: ["Meeting", "Participants", "Search"],
  responses: {
    200: {
      description: "Users found successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    }
  }
}), zValidator("json", z.object({
  query: z.string(),
  exclude_current_participants: z.boolean().optional(),
  limit: z.number().optional(),
  user_types: z.array(z.string()).optional()
})), MeetingController.searchUsersToAdd);
// Get system stats
/* istanbul ignore next */
cov_yfa62kiyp().s[37]++;
app.get("/system/stats", describeRoute({
  operationId: "getSystemStats",
  summary: "Get system statistics",
  description: "Retrieves system-wide statistics",
  tags: ["Meeting", "Admin", "Statistics"],
  responses: {
    200: {
      description: "System statistics retrieved successfully",
      content: {
        "application/json": {
          schema: resolver(createMeetingResponseSchema)
        }
      }
    }
  }
}), MeetingController.getSystemStats);
export default app;