87a27db02a36d5d12472dbc8a507d128
/* istanbul ignore next */
function cov_1sozc211kw() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/document_store.route.ts";
  var hash = "b6707cb493793644e4ea374d315a5a94cdfb1c04";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/document_store.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 30,
          column: 107
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 54,
          column: 49
        }
      },
      "3": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 78,
          column: 56
        }
      },
      "4": {
        start: {
          line: 79,
          column: 0
        },
        end: {
          line: 102,
          column: 56
        }
      },
      "5": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 135,
          column: 50
        }
      },
      "6": {
        start: {
          line: 136,
          column: 0
        },
        end: {
          line: 168,
          column: 107
        }
      },
      "7": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 201,
          column: 49
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b6707cb493793644e4ea374d315a5a94cdfb1c04"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sozc211kw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sozc211kw();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { DocumentStoreController } from "@/controllers/document_store.controller";
import { createDocumentStoreRequestBodySchema, createDocumentStoreResponseSchema, deleteDocumentStoreResponseSchema, documentStoreSchema, errorResponseSchema, getDocumentStoresResponseSchema, updateDocumentStoreRequestBodySchema, updateDocumentStoreResponseSchema } from "@/schema/document-store";
const app =
/* istanbul ignore next */
(cov_1sozc211kw().s[0]++, new Hono());
/* istanbul ignore next */
cov_1sozc211kw().s[1]++;
app.post("/", describeRoute({
  operationId: "createDocumentStore",
  summary: "Create a new document",
  description: "Creates a new document in the document store",
  tags: ["DocumentStore"],
  responses: {
    200: {
      description: "Document created successfully",
      content: {
        "application/json": {
          schema: resolver(createDocumentStoreResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", createDocumentStoreRequestBodySchema), DocumentStoreController.createDocumentStore);
/* istanbul ignore next */
cov_1sozc211kw().s[2]++;
app.get("/", describeRoute({
  operationId: "getAllDocumentStore",
  summary: "Get all documents",
  description: "Retrieves all documents in the document store for a campus",
  tags: ["DocumentStore"],
  responses: {
    200: {
      description: "List of documents",
      content: {
        "application/json": {
          schema: resolver(getDocumentStoresResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DocumentStoreController.getAllDocumentStore);
/* istanbul ignore next */
cov_1sozc211kw().s[3]++;
app.get("/u/issued_to", describeRoute({
  operationId: "getDocumentStoreByIssuedTo",
  summary: "Get documents by issued to",
  description: "Retrieves all documents issued to the current user",
  tags: ["DocumentStore"],
  responses: {
    200: {
      description: "List of documents issued to user",
      content: {
        "application/json": {
          schema: resolver(getDocumentStoresResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DocumentStoreController.getDocumentStoreByIssuedTo);
/* istanbul ignore next */
cov_1sozc211kw().s[4]++;
app.get("/u/issuer_id", describeRoute({
  operationId: "getDocumentStoreByIssuerId",
  summary: "Get documents by issuer",
  description: "Retrieves all documents issued by the current user",
  tags: ["DocumentStore"],
  responses: {
    200: {
      description: "List of documents issued by user",
      content: {
        "application/json": {
          schema: resolver(getDocumentStoresResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DocumentStoreController.getDocumentStoreByIssuerId);
/* istanbul ignore next */
cov_1sozc211kw().s[5]++;
app.get("/:id", describeRoute({
  operationId: "getDocumentStoreById",
  summary: "Get document by ID",
  description: "Retrieves a specific document by ID",
  tags: ["DocumentStore"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Document ID"
  }],
  responses: {
    200: {
      description: "Document details",
      content: {
        "application/json": {
          schema: resolver(documentStoreSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DocumentStoreController.getDocumentStoreById);
/* istanbul ignore next */
cov_1sozc211kw().s[6]++;
app.patch("/:id", describeRoute({
  operationId: "updateDocumentStore",
  summary: "Update a document",
  description: "Updates a specific document by ID",
  tags: ["DocumentStore"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Document ID"
  }],
  responses: {
    200: {
      description: "Document updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateDocumentStoreResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateDocumentStoreRequestBodySchema), DocumentStoreController.updateDocumentStore);
/* istanbul ignore next */
cov_1sozc211kw().s[7]++;
app.delete("/:id", describeRoute({
  operationId: "deleteDocumentStore",
  summary: "Delete a document",
  description: "Deletes a specific document by ID",
  tags: ["DocumentStore"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Document ID"
  }],
  responses: {
    200: {
      description: "Document deleted successfully",
      content: {
        "application/json": {
          schema: resolver(deleteDocumentStoreResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DocumentStoreController.deleteDocumentStore);
export default app;