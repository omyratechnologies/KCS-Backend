557e61fd2fe1a9c129ee71580ce393d7
/* istanbul ignore next */
function cov_2krb5in2mr() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/libs/cache/redis.ts";
  var hash = "7b27050679674c062f7bbf0586d8f57607d44feb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/libs/cache/redis.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 11
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 29
        }
      },
      "2": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 33,
          column: 2
        }
      },
      "3": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "4": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 17,
          column: 7
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "6": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "7": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "8": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 24,
          column: 7
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "10": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 64
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "16": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 60
        }
      },
      "17": {
        start: {
          line: 34,
          column: 0
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "18": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "19": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "20": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 18
        }
      },
      "21": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 23
        }
      },
      "22": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 43,
          column: 2
        }
      },
      "23": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "24": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "25": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 13
          },
          end: {
            line: 9,
            column: 14
          }
        },
        loc: {
          start: {
            line: 9,
            column: 19
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 19,
            column: 26
          }
        },
        loc: {
          start: {
            line: 19,
            column: 31
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 16
          }
        },
        loc: {
          start: {
            line: 26,
            column: 21
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 20
          },
          end: {
            line: 34,
            column: 21
          }
        },
        loc: {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        loc: {
          start: {
            line: 41,
            column: 34
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        loc: {
          start: {
            line: 44,
            column: 27
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 44
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 30
          }
        }, {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 27,
            column: 61
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7b27050679674c062f7bbf0586d8f57607d44feb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2krb5in2mr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2krb5in2mr();
var _a;
import { Redis } from "ioredis";
import log, { LogTypes } from "@/libs/logger";
import { config } from "@/utils/env";
export class Cache {}
/* istanbul ignore next */
cov_2krb5in2mr().s[0]++;
_a = Cache;
/* istanbul ignore next */
cov_2krb5in2mr().s[1]++;
Cache.statusReported = false;
/* istanbul ignore next */
cov_2krb5in2mr().s[2]++;
Cache.init = () => {
  /* istanbul ignore next */
  cov_2krb5in2mr().f[0]++;
  cov_2krb5in2mr().s[3]++;
  _a.redis = new Redis(config.REDIS_URI);
  // Only show connection status once after initial attempt
  /* istanbul ignore next */
  cov_2krb5in2mr().s[4]++;
  _a.redis.on("ready", () => {
    /* istanbul ignore next */
    cov_2krb5in2mr().f[1]++;
    cov_2krb5in2mr().s[5]++;
    if (!_a.statusReported) {
      /* istanbul ignore next */
      cov_2krb5in2mr().b[0][0]++;
      cov_2krb5in2mr().s[6]++;
      log("Redis connected", LogTypes.LOGS, "Cache");
      /* istanbul ignore next */
      cov_2krb5in2mr().s[7]++;
      _a.statusReported = true;
    } else
    /* istanbul ignore next */
    {
      cov_2krb5in2mr().b[0][1]++;
    }
  });
  // Show disconnection only if we were previously connected
  /* istanbul ignore next */
  cov_2krb5in2mr().s[8]++;
  _a.redis.on("close", () => {
    /* istanbul ignore next */
    cov_2krb5in2mr().f[2]++;
    cov_2krb5in2mr().s[9]++;
    if (_a.statusReported) {
      /* istanbul ignore next */
      cov_2krb5in2mr().b[1][0]++;
      cov_2krb5in2mr().s[10]++;
      log("Redis disconnected", LogTypes.ERROR, "Cache");
      /* istanbul ignore next */
      cov_2krb5in2mr().s[11]++;
      _a.statusReported = false;
    } else
    /* istanbul ignore next */
    {
      cov_2krb5in2mr().b[1][1]++;
    }
  });
  // Show connection failure after initial timeout
  /* istanbul ignore next */
  cov_2krb5in2mr().s[12]++;
  setTimeout(() => {
    /* istanbul ignore next */
    cov_2krb5in2mr().f[3]++;
    cov_2krb5in2mr().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_2krb5in2mr().b[3][0]++, !_a.statusReported) &&
    /* istanbul ignore next */
    (cov_2krb5in2mr().b[3][1]++, _a.redis.status !== "ready")) {
      /* istanbul ignore next */
      cov_2krb5in2mr().b[2][0]++;
      cov_2krb5in2mr().s[14]++;
      log("Redis not connected", LogTypes.ERROR, "Cache");
      /* istanbul ignore next */
      cov_2krb5in2mr().s[15]++;
      _a.statusReported = true;
    } else
    /* istanbul ignore next */
    {
      cov_2krb5in2mr().b[2][1]++;
    }
  }, 1000);
  /* istanbul ignore next */
  cov_2krb5in2mr().s[16]++;
  log("Redis client initialized", LogTypes.LOGS, "Cache");
};
/* istanbul ignore next */
cov_2krb5in2mr().s[17]++;
Cache.getInstance = () => {
  /* istanbul ignore next */
  cov_2krb5in2mr().f[4]++;
  cov_2krb5in2mr().s[18]++;
  if (!_a.instance) {
    /* istanbul ignore next */
    cov_2krb5in2mr().b[4][0]++;
    cov_2krb5in2mr().s[19]++;
    _a.instance = new _a();
    /* istanbul ignore next */
    cov_2krb5in2mr().s[20]++;
    _a.init();
  } else
  /* istanbul ignore next */
  {
    cov_2krb5in2mr().b[4][1]++;
  }
  cov_2krb5in2mr().s[21]++;
  return _a.instance;
};
/* istanbul ignore next */
cov_2krb5in2mr().s[22]++;
Cache.set = async (key, value) => {
  /* istanbul ignore next */
  cov_2krb5in2mr().f[5]++;
  cov_2krb5in2mr().s[23]++;
  return await _a.redis.set(key, value);
};
/* istanbul ignore next */
cov_2krb5in2mr().s[24]++;
Cache.get = async key => {
  /* istanbul ignore next */
  cov_2krb5in2mr().f[6]++;
  cov_2krb5in2mr().s[25]++;
  return await _a.redis.get(key);
};