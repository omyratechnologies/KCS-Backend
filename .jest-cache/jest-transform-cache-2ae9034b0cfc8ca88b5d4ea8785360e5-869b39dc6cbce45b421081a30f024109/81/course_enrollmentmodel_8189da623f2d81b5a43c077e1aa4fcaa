9991dc536364ffcddff4a6f8e787edf8
/* istanbul ignore next */
function cov_1mow2bwbf9() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/course_enrollment.model.ts";
  var hash = "660b624bec31e4b003514c0406751453957e8135";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/course_enrollment.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "1": {
        start: {
          line: 18,
          column: 50
        },
        end: {
          line: 18,
          column: 60
        }
      },
      "2": {
        start: {
          line: 52,
          column: 45
        },
        end: {
          line: 52,
          column: 55
        }
      },
      "3": {
        start: {
          line: 53,
          column: 45
        },
        end: {
          line: 53,
          column: 55
        }
      },
      "4": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 66
        }
      },
      "5": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 62
        }
      },
      "6": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 58,
          column: 66
        }
      },
      "7": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 61,
          column: 2
        }
      },
      "8": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 62,
          column: 72
        }
      },
      "9": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 63,
          column: 76
        }
      },
      "10": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 84
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 44
          },
          end: {
            line: 18,
            column: 45
          }
        },
        loc: {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 18,
            column: 60
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 39
          },
          end: {
            line: 52,
            column: 40
          }
        },
        loc: {
          start: {
            line: 52,
            column: 45
          },
          end: {
            line: 52,
            column: 55
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 53,
            column: 40
          }
        },
        loc: {
          start: {
            line: 53,
            column: 45
          },
          end: {
            line: 53,
            column: 55
          }
        },
        line: 53
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "660b624bec31e4b003514c0406751453957e8135"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mow2bwbf9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mow2bwbf9();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const CourseEnrollmentSchema =
/* istanbul ignore next */
(cov_1mow2bwbf9().s[0]++, new Schema({
  course_id: {
    type: String,
    required: true
  },
  user_id: {
    type: String,
    required: true
  },
  campus_id: {
    type: String,
    required: true
  },
  enrollment_type: {
    type: String,
    enum: ["free", "paid", "admin_assigned", "bulk_enrollment"],
    default: "free"
  },
  enrollment_status: {
    type: String,
    enum: ["active", "completed", "dropped", "suspended", "expired"],
    default: "active"
  },
  progress_percentage: {
    type: Number,
    default: 0
  },
  enrollment_date: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1mow2bwbf9().f[0]++;
      cov_1mow2bwbf9().s[1]++;
      return new Date();
    }
  },
  completion_date: {
    type: Date
  },
  expiry_date: {
    type: Date
  },
  last_accessed_at: {
    type: Date
  },
  payment_status: {
    type: String,
    enum: ["pending", "completed", "failed", "refunded"]
  },
  payment_reference: {
    type: String
  },
  certificate_issued: {
    type: Boolean,
    default: false
  },
  certificate_id: {
    type: String
  },
  certificate_issued_at: {
    type: Date
  },
  grade: {
    type: Number
  },
  completion_time_hours: {
    type: Number
  },
  access_details: {
    type: Object,
    default: {
      total_lectures: 0,
      completed_lectures: 0,
      completed_lecture_ids: [],
      bookmarked_lectures: [],
      notes_count: 0,
      quiz_attempts: 0,
      assignment_submissions: 0
    }
  },
  enrollment_source: {
    type: String,
    enum: ["web", "mobile", "admin", "api", "bulk_import"],
    default: "web"
  },
  referral_code: {
    type: String
  },
  discount_applied: {
    type: Object
  },
  meta_data: {
    type: Object,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1mow2bwbf9().f[1]++;
      cov_1mow2bwbf9().s[2]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1mow2bwbf9().f[2]++;
      cov_1mow2bwbf9().s[3]++;
      return new Date();
    }
  }
}));
// Compound indexes for efficient queries
/* istanbul ignore next */
cov_1mow2bwbf9().s[4]++;
CourseEnrollmentSchema.index.findByCourseId = {
  by: "course_id"
};
/* istanbul ignore next */
cov_1mow2bwbf9().s[5]++;
CourseEnrollmentSchema.index.findByUserId = {
  by: "user_id"
};
/* istanbul ignore next */
cov_1mow2bwbf9().s[6]++;
CourseEnrollmentSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_1mow2bwbf9().s[7]++;
CourseEnrollmentSchema.index.findByUserAndCourse = {
  by: ["user_id", "course_id"]
};
/* istanbul ignore next */
cov_1mow2bwbf9().s[8]++;
CourseEnrollmentSchema.index.findByStatus = {
  by: "enrollment_status"
};
/* istanbul ignore next */
cov_1mow2bwbf9().s[9]++;
CourseEnrollmentSchema.index.findByPaymentStatus = {
  by: "payment_status"
};
const CourseEnrollment =
/* istanbul ignore next */
(cov_1mow2bwbf9().s[10]++, ottoman.model("course_enrollments", CourseEnrollmentSchema));
export { CourseEnrollment };