cfeb373002e87afeb5e89cdc6552c16f
/* istanbul ignore next */
function cov_bid34vjxm() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/document_store.model.ts";
  var hash = "649b1ed2ae8cb71fdc5974955d72f6178cb9fdd1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/document_store.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "1": {
        start: {
          line: 14,
          column: 45
        },
        end: {
          line: 14,
          column: 55
        }
      },
      "2": {
        start: {
          line: 15,
          column: 45
        },
        end: {
          line: 15,
          column: 55
        }
      },
      "3": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 63
        }
      },
      "4": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 71
        }
      },
      "5": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 71
        }
      },
      "6": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "7": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "8": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 74
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 14,
            column: 40
          }
        },
        loc: {
          start: {
            line: 14,
            column: 45
          },
          end: {
            line: 14,
            column: 55
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 15,
            column: 40
          }
        },
        loc: {
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 15,
            column: 55
          }
        },
        line: 15
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "649b1ed2ae8cb71fdc5974955d72f6178cb9fdd1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bid34vjxm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bid34vjxm();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const DocumentStoreSchema =
/* istanbul ignore next */
(cov_bid34vjxm().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  document_name: {
    type: String,
    required: true
  },
  document_type: {
    type: String,
    required: true
  },
  document_meta_data: {
    type: Object,
    required: true
  },
  issued_to: {
    type: String,
    required: true
  },
  issued_type: {
    type: String,
    required: true
  },
  issuer_id: {
    type: String,
    required: true
  },
  issuer_type: {
    type: String,
    required: true
  },
  is_active: {
    type: Boolean,
    required: true
  },
  is_deleted: {
    type: Boolean,
    required: true
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_bid34vjxm().f[0]++;
      cov_bid34vjxm().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_bid34vjxm().f[1]++;
      cov_bid34vjxm().s[2]++;
      return new Date();
    }
  }
}));
/* istanbul ignore next */
cov_bid34vjxm().s[3]++;
DocumentStoreSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_bid34vjxm().s[4]++;
DocumentStoreSchema.index.findByDocumentName = {
  by: "document_name"
};
/* istanbul ignore next */
cov_bid34vjxm().s[5]++;
DocumentStoreSchema.index.findByDocumentType = {
  by: "document_type"
};
/* istanbul ignore next */
cov_bid34vjxm().s[6]++;
DocumentStoreSchema.index.findByIssuedTo = {
  by: "issued_to"
};
/* istanbul ignore next */
cov_bid34vjxm().s[7]++;
DocumentStoreSchema.index.findByIssuerId = {
  by: "issuer_id"
};
const DocumentStore =
/* istanbul ignore next */
(cov_bid34vjxm().s[8]++, ottoman.model("document_store", DocumentStoreSchema));
export { DocumentStore };