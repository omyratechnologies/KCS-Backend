dc5f9a6a7d7dd56607fe5b4a196880f0
/* istanbul ignore next */
function cov_tg745eier() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/services/auth.service.ts";
  var hash = "b7173d325352a2a9ca020cca8702c9b007c6442b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/services/auth.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 17
        }
      },
      "1": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "2": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "3": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 82
        }
      },
      "4": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "5": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 28
        }
      },
      "6": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "8": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 94
        }
      },
      "9": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 44
        }
      },
      "11": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 61
        }
      },
      "12": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "13": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 32,
          column: 7
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 7
        }
      },
      "15": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 41,
          column: 6
        }
      },
      "16": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 65,
          column: 2
        }
      },
      "17": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 46,
          column: 6
        }
      },
      "18": {
        start: {
          line: 47,
          column: 17
        },
        end: {
          line: 47,
          column: 28
        }
      },
      "19": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 42
        }
      },
      "21": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "22": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 57,
          column: 7
        }
      },
      "23": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "24": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 64,
          column: 6
        }
      },
      "25": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 118,
          column: 2
        }
      },
      "26": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 69,
          column: 6
        }
      },
      "27": {
        start: {
          line: 70,
          column: 17
        },
        end: {
          line: 70,
          column: 28
        }
      },
      "28": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "29": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 42
        }
      },
      "30": {
        start: {
          line: 74,
          column: 21
        },
        end: {
          line: 76,
          column: 6
        }
      },
      "31": {
        start: {
          line: 77,
          column: 18
        },
        end: {
          line: 77,
          column: 30
        }
      },
      "32": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "33": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 49
        }
      },
      "34": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "35": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 39
        }
      },
      "36": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 49
        }
      },
      "37": {
        start: {
          line: 86,
          column: 17
        },
        end: {
          line: 86,
          column: 55
        }
      },
      "38": {
        start: {
          line: 87,
          column: 17
        },
        end: {
          line: 87,
          column: 86
        }
      },
      "39": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 92,
          column: 7
        }
      },
      "40": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "41": {
        start: {
          line: 95,
          column: 26
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "42": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 70
        }
      },
      "43": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 82
        }
      },
      "44": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 117,
          column: 6
        }
      },
      "45": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 136,
          column: 2
        }
      },
      "46": {
        start: {
          line: 120,
          column: 23
        },
        end: {
          line: 122,
          column: 6
        }
      },
      "47": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 34
        }
      },
      "48": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "49": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 49
        }
      },
      "50": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 129,
          column: 6
        }
      },
      "51": {
        start: {
          line: 130,
          column: 17
        },
        end: {
          line: 130,
          column: 28
        }
      },
      "52": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 135,
          column: 6
        }
      },
      "53": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 150,
          column: 2
        }
      },
      "54": {
        start: {
          line: 139,
          column: 23
        },
        end: {
          line: 141,
          column: 6
        }
      },
      "55": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 34
        }
      },
      "56": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "57": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 43
        }
      },
      "58": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "59": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 43
        }
      },
      "60": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 149,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 21
          }
        },
        loc: {
          start: {
            line: 11,
            column: 54
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 43,
            column: 30
          }
        },
        loc: {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 28
          },
          end: {
            line: 66,
            column: 29
          }
        },
        loc: {
          start: {
            line: 66,
            column: 65
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 119,
            column: 27
          },
          end: {
            line: 119,
            column: 28
          }
        },
        loc: {
          start: {
            line: 119,
            column: 56
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 119
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 138,
            column: 36
          },
          end: {
            line: 138,
            column: 37
          }
        },
        loc: {
          start: {
            line: 138,
            column: 71
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 138
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 19
          },
          end: {
            line: 13,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 39
          },
          end: {
            line: 13,
            column: 58
          }
        }, {
          start: {
            line: 13,
            column: 61
          },
          end: {
            line: 13,
            column: 82
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "8": {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "9": {
        loc: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b7173d325352a2a9ca020cca8702c9b007c6442b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tg745eier = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tg745eier();
var _a;
import crypto from "node:crypto";
import { onForgotPassword, sendPasswordResetSuccessEmail } from "@/libs/mailer";
import { LoginSession } from "@/models/login_session.model";
import { PasswordResets } from "@/models/password_reset.model";
import { User } from "@/models/user.model";
import { genOTP } from "@/utils/random";
export class AuthService {}
/* istanbul ignore next */
cov_tg745eier().s[0]++;
_a = AuthService;
/* istanbul ignore next */
cov_tg745eier().s[1]++;
AuthService.login = async ({
  login_id,
  password
}) => {
  /* istanbul ignore next */
  cov_tg745eier().f[0]++;
  const is_login_id_email =
  /* istanbul ignore next */
  (cov_tg745eier().s[2]++, login_id.includes("@"));
  const filter =
  /* istanbul ignore next */
  (cov_tg745eier().s[3]++, is_login_id_email ?
  /* istanbul ignore next */
  (cov_tg745eier().b[0][0]++, {
    email: login_id
  }) :
  /* istanbul ignore next */
  (cov_tg745eier().b[0][1]++, {
    user_id: login_id
  }));
  const dbUser =
  /* istanbul ignore next */
  (cov_tg745eier().s[4]++, await User.find(filter));
  const user =
  /* istanbul ignore next */
  (cov_tg745eier().s[5]++, dbUser.rows);
  /* istanbul ignore next */
  cov_tg745eier().s[6]++;
  if (user.length === 0) {
    /* istanbul ignore next */
    cov_tg745eier().b[1][0]++;
    cov_tg745eier().s[7]++;
    throw new Error("User not found");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[1][1]++;
  }
  const hash =
  /* istanbul ignore next */
  (cov_tg745eier().s[8]++, crypto.pbkdf2Sync(password, user[0].salt, 1000, 64, "sha512").toString("hex"));
  /* istanbul ignore next */
  cov_tg745eier().s[9]++;
  if (!crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(user[0].hash))) {
    /* istanbul ignore next */
    cov_tg745eier().b[2][0]++;
    cov_tg745eier().s[10]++;
    throw new Error("Invalid password");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[2][1]++;
  }
  // create a login session
  const session_id =
  /* istanbul ignore next */
  (cov_tg745eier().s[11]++, crypto.randomBytes(16).toString("hex"));
  const refresh_token =
  /* istanbul ignore next */
  (cov_tg745eier().s[12]++, crypto.randomBytes(32).toString("hex"));
  /* istanbul ignore next */
  cov_tg745eier().s[13]++;
  await LoginSession.create({
    user_id: user[0].id,
    session_id,
    refresh_token,
    created_at: new Date(),
    updated_at: new Date()
  });
  // Update last login details
  /* istanbul ignore next */
  cov_tg745eier().s[14]++;
  await User.updateById(user[0].id, {
    last_login: new Date()
  });
  /* istanbul ignore next */
  cov_tg745eier().s[15]++;
  return {
    user: user[0],
    session_id,
    refresh_token
  };
};
/* istanbul ignore next */
cov_tg745eier().s[16]++;
AuthService.forgotPassword = async ({
  email
}) => {
  /* istanbul ignore next */
  cov_tg745eier().f[1]++;
  const dbUser =
  /* istanbul ignore next */
  (cov_tg745eier().s[17]++, await User.find({
    email
  }));
  const user =
  /* istanbul ignore next */
  (cov_tg745eier().s[18]++, dbUser.rows);
  /* istanbul ignore next */
  cov_tg745eier().s[19]++;
  if (user.length === 0) {
    /* istanbul ignore next */
    cov_tg745eier().b[3][0]++;
    cov_tg745eier().s[20]++;
    throw new Error("User not found");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[3][1]++;
  }
  const otp =
  /* istanbul ignore next */
  (cov_tg745eier().s[21]++, genOTP(6));
  /* istanbul ignore next */
  cov_tg745eier().s[22]++;
  await PasswordResets.create({
    user_id: user[0].id,
    reset_token: otp.toString(),
    created_at: new Date(),
    updated_at: new Date()
  });
  // send email with OTP
  /* istanbul ignore next */
  cov_tg745eier().s[23]++;
  await onForgotPassword(user[0].email, {
    code: otp.toString()
  });
  /* istanbul ignore next */
  cov_tg745eier().s[24]++;
  return {
    message: "Password reset email sent"
  };
};
/* istanbul ignore next */
cov_tg745eier().s[25]++;
AuthService.resetPassword = async ({
  email,
  otp,
  password
}) => {
  /* istanbul ignore next */
  cov_tg745eier().f[2]++;
  const dbUser =
  /* istanbul ignore next */
  (cov_tg745eier().s[26]++, await User.find({
    email
  }));
  const user =
  /* istanbul ignore next */
  (cov_tg745eier().s[27]++, dbUser.rows);
  /* istanbul ignore next */
  cov_tg745eier().s[28]++;
  if (user.length === 0) {
    /* istanbul ignore next */
    cov_tg745eier().b[4][0]++;
    cov_tg745eier().s[29]++;
    throw new Error("User not found");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[4][1]++;
  }
  const dbReset =
  /* istanbul ignore next */
  (cov_tg745eier().s[30]++, await PasswordResets.find({
    user_id: user[0].id
  }));
  const reset =
  /* istanbul ignore next */
  (cov_tg745eier().s[31]++, dbReset.rows);
  /* istanbul ignore next */
  cov_tg745eier().s[32]++;
  if (reset.length === 0) {
    /* istanbul ignore next */
    cov_tg745eier().b[5][0]++;
    cov_tg745eier().s[33]++;
    throw new Error("Reset token not found");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[5][1]++;
  }
  cov_tg745eier().s[34]++;
  if (reset[0].reset_token !== otp) {
    /* istanbul ignore next */
    cov_tg745eier().b[6][0]++;
    cov_tg745eier().s[35]++;
    throw new Error("Invalid OTP");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[6][1]++;
  }
  // delete the reset token
  cov_tg745eier().s[36]++;
  await PasswordResets.removeById(reset[0].id);
  const salt =
  /* istanbul ignore next */
  (cov_tg745eier().s[37]++, crypto.randomBytes(16).toString("hex"));
  const hash =
  /* istanbul ignore next */
  (cov_tg745eier().s[38]++, crypto.pbkdf2Sync(password, salt, 1000, 64, "sha512").toString("hex"));
  /* istanbul ignore next */
  cov_tg745eier().s[39]++;
  await User.updateById(user[0].id, {
    salt,
    hash,
    updated_at: new Date()
  });
  // Send password reset success email
  /* istanbul ignore next */
  cov_tg745eier().s[40]++;
  try {
    const resetData =
    /* istanbul ignore next */
    (cov_tg745eier().s[41]++, {
      email: user[0].email,
      reset_date: new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric"
      }),
      reset_time: new Date().toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit",
        timeZoneName: "short"
      }),
      ip_address: "Unknown" // TODO: Get actual IP from request context
    });
    /* istanbul ignore next */
    cov_tg745eier().s[42]++;
    await sendPasswordResetSuccessEmail(user[0].email, resetData);
  } catch (emailError) {
    /* istanbul ignore next */
    cov_tg745eier().s[43]++;
    // Log email error but don't fail the password reset
    console.error("Failed to send password reset success email:", emailError);
  }
  /* istanbul ignore next */
  cov_tg745eier().s[44]++;
  return {
    message: "Password reset successful"
  };
};
/* istanbul ignore next */
cov_tg745eier().s[45]++;
AuthService.refreshToken = async ({
  refresh_token
}) => {
  /* istanbul ignore next */
  cov_tg745eier().f[3]++;
  const dbSession =
  /* istanbul ignore next */
  (cov_tg745eier().s[46]++, await LoginSession.find({
    refresh_token
  }));
  const session =
  /* istanbul ignore next */
  (cov_tg745eier().s[47]++, dbSession.rows);
  /* istanbul ignore next */
  cov_tg745eier().s[48]++;
  if (session.length === 0) {
    /* istanbul ignore next */
    cov_tg745eier().b[7][0]++;
    cov_tg745eier().s[49]++;
    throw new Error("Invalid refresh token");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[7][1]++;
  }
  const dbUser =
  /* istanbul ignore next */
  (cov_tg745eier().s[50]++, await User.find({
    user_id: session[0].user_id
  }));
  const user =
  /* istanbul ignore next */
  (cov_tg745eier().s[51]++, dbUser.rows);
  // use existing session_id
  /* istanbul ignore next */
  cov_tg745eier().s[52]++;
  return {
    user: user[0],
    session_id: session[0].session_id
  };
};
// Check if session is valid
/* istanbul ignore next */
cov_tg745eier().s[53]++;
AuthService.checkIfSessionIsValid = async ({
  user_id,
  session_id
}) => {
  /* istanbul ignore next */
  cov_tg745eier().f[4]++;
  const dbSession =
  /* istanbul ignore next */
  (cov_tg745eier().s[54]++, await LoginSession.find({
    session_id
  }));
  const session =
  /* istanbul ignore next */
  (cov_tg745eier().s[55]++, dbSession.rows);
  /* istanbul ignore next */
  cov_tg745eier().s[56]++;
  if (session.length === 0) {
    /* istanbul ignore next */
    cov_tg745eier().b[8][0]++;
    cov_tg745eier().s[57]++;
    throw new Error("Invalid session");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[8][1]++;
  }
  cov_tg745eier().s[58]++;
  if (session[0].user_id !== user_id) {
    /* istanbul ignore next */
    cov_tg745eier().b[9][0]++;
    cov_tg745eier().s[59]++;
    throw new Error("Invalid session");
  } else
  /* istanbul ignore next */
  {
    cov_tg745eier().b[9][1]++;
  }
  cov_tg745eier().s[60]++;
  return true;
};