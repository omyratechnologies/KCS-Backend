d4870974ace899e587cc390d7f5c8326
/* istanbul ignore next */
function cov_1tqmd6zdbh() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/syllabus.route.ts";
  var hash = "937794b4bf6bd1759994e654fc737977e7f96f79";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/syllabus.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 30,
          column: 92
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 54,
          column: 41
        }
      },
      "3": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 87,
          column: 40
        }
      },
      "4": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 120,
          column: 96
        }
      },
      "5": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 153,
          column: 43
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "937794b4bf6bd1759994e654fc737977e7f96f79"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1tqmd6zdbh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1tqmd6zdbh();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { SyllabusController } from "@/controllers/syllabus.controller";
import { createSyllabusRequestBodySchema, createSyllabusResponseSchema, errorResponseSchema, getSyllabusesResponseSchema, syllabusSchema, updateSyllabusRequestBodySchema, updateSyllabusResponseSchema } from "@/schema/syllabus";
const app =
/* istanbul ignore next */
(cov_1tqmd6zdbh().s[0]++, new Hono());
/* istanbul ignore next */
cov_1tqmd6zdbh().s[1]++;
app.post("/", describeRoute({
  operationId: "createSyllabus",
  summary: "Create a syllabus",
  description: "Creates a new syllabus for a subject",
  tags: ["Syllabus"],
  responses: {
    200: {
      description: "Syllabus created successfully",
      content: {
        "application/json": {
          schema: resolver(createSyllabusResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", createSyllabusRequestBodySchema), SyllabusController.createSyllabus);
/* istanbul ignore next */
cov_1tqmd6zdbh().s[2]++;
app.get("/", describeRoute({
  operationId: "getAllSyllabuses",
  summary: "Get all syllabuses",
  description: "Retrieves all syllabuses for the current campus",
  tags: ["Syllabus"],
  responses: {
    200: {
      description: "List of syllabuses",
      content: {
        "application/json": {
          schema: resolver(getSyllabusesResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), SyllabusController.getAllSyllabuses);
/* istanbul ignore next */
cov_1tqmd6zdbh().s[3]++;
app.get("/:id", describeRoute({
  operationId: "getSyllabusById",
  summary: "Get syllabus by ID",
  description: "Retrieves a specific syllabus by ID",
  tags: ["Syllabus"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Syllabus ID"
  }],
  responses: {
    200: {
      description: "Syllabus details",
      content: {
        "application/json": {
          schema: resolver(syllabusSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), SyllabusController.getSyllabusById);
/* istanbul ignore next */
cov_1tqmd6zdbh().s[4]++;
app.put("/:id", describeRoute({
  operationId: "updateSyllabusById",
  summary: "Update syllabus",
  description: "Updates a specific syllabus by ID",
  tags: ["Syllabus"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Syllabus ID"
  }],
  responses: {
    200: {
      description: "Syllabus updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateSyllabusResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateSyllabusRequestBodySchema), SyllabusController.updateSyllabusById);
/* istanbul ignore next */
cov_1tqmd6zdbh().s[5]++;
app.delete("/:id", describeRoute({
  operationId: "deleteSyllabusById",
  summary: "Delete syllabus",
  description: "Deletes a specific syllabus by ID (soft delete)",
  tags: ["Syllabus"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Syllabus ID"
  }],
  responses: {
    200: {
      description: "Syllabus deleted successfully",
      content: {
        "application/json": {
          schema: resolver(syllabusSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), SyllabusController.deleteSyllabusById);
export default app;