8bc28f45dfd5212e19436121f893fecd
/* istanbul ignore next */
function cov_j0huv4ete() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/fee.model.ts";
  var hash = "9c518d503100d59fbb744b83fe4775103252e310";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/fee.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "1": {
        start: {
          line: 54,
          column: 45
        },
        end: {
          line: 54,
          column: 55
        }
      },
      "2": {
        start: {
          line: 55,
          column: 45
        },
        end: {
          line: 55,
          column: 55
        }
      },
      "3": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "4": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 58,
          column: 49
        }
      },
      "5": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 59,
          column: 53
        }
      },
      "6": {
        start: {
          line: 60,
          column: 0
        },
        end: {
          line: 60,
          column: 51
        }
      },
      "7": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 61,
          column: 61
        }
      },
      "8": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 62,
          column: 63
        }
      },
      "9": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 63,
          column: 59
        }
      },
      "10": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 64,
          column: 59
        }
      },
      "11": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 65,
          column: 64
        }
      },
      "12": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 66,
          column: 75
        }
      },
      "13": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 67,
          column: 77
        }
      },
      "14": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "15": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 54,
            column: 39
          },
          end: {
            line: 54,
            column: 40
          }
        },
        loc: {
          start: {
            line: 54,
            column: 45
          },
          end: {
            line: 54,
            column: 55
          }
        },
        line: 54
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 55,
            column: 39
          },
          end: {
            line: 55,
            column: 40
          }
        },
        loc: {
          start: {
            line: 55,
            column: 45
          },
          end: {
            line: 55,
            column: 55
          }
        },
        line: 55
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c518d503100d59fbb744b83fe4775103252e310"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_j0huv4ete = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_j0huv4ete();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const FeeSchema =
/* istanbul ignore next */
(cov_j0huv4ete().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  user_id: {
    type: String,
    required: true
  },
  // student_id
  parent_id: {
    type: String,
    required: false
  },
  class_id: {
    type: String,
    required: true
  },
  academic_year: {
    type: String,
    required: true
  },
  fee_template_id: {
    type: String,
    required: false
  },
  items: [{
    category_id: {
      type: String,
      required: true
    },
    fee_type: {
      type: String,
      required: true
    },
    amount: {
      type: Number,
      required: true
    },
    name: {
      type: String,
      required: true
    },
    due_date: {
      type: Date,
      required: true
    },
    is_mandatory: {
      type: Boolean,
      required: true,
      default: true
    },
    late_fee_applicable: {
      type: Boolean,
      required: true,
      default: true
    }
  }],
  total_amount: {
    type: Number,
    required: true
  },
  paid_amount: {
    type: Number,
    required: false,
    default: 0
  },
  due_amount: {
    type: Number,
    required: true
  },
  discount_amount: {
    type: Number,
    required: false,
    default: 0
  },
  late_fee_amount: {
    type: Number,
    required: false,
    default: 0
  },
  payment_status: {
    type: String,
    required: true,
    enum: ["unpaid", "partial", "paid", "overdue"],
    default: "unpaid"
  },
  is_paid: {
    type: Boolean,
    required: true,
    default: false
  },
  payment_date: {
    type: Date,
    required: false
  },
  payment_mode: {
    type: String,
    required: false
  },
  installments_allowed: {
    type: Boolean,
    required: true,
    default: false
  },
  installment_plan: {
    type: Object,
    required: false
  },
  auto_late_fee: {
    type: Boolean,
    required: true,
    default: true
  },
  reminder_sent: {
    type: Object,
    required: true,
    default: {
      email_count: 0,
      sms_count: 0
    }
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_j0huv4ete().f[0]++;
      cov_j0huv4ete().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_j0huv4ete().f[1]++;
      cov_j0huv4ete().s[2]++;
      return new Date();
    }
  }
}));
/* istanbul ignore next */
cov_j0huv4ete().s[3]++;
FeeSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_j0huv4ete().s[4]++;
FeeSchema.index.findByUserId = {
  by: "user_id"
};
/* istanbul ignore next */
cov_j0huv4ete().s[5]++;
FeeSchema.index.findByParentId = {
  by: "parent_id"
};
/* istanbul ignore next */
cov_j0huv4ete().s[6]++;
FeeSchema.index.findByClassId = {
  by: "class_id"
};
/* istanbul ignore next */
cov_j0huv4ete().s[7]++;
FeeSchema.index.findByAcademicYear = {
  by: "academic_year"
};
/* istanbul ignore next */
cov_j0huv4ete().s[8]++;
FeeSchema.index.findByPaymentStatus = {
  by: "payment_status"
};
/* istanbul ignore next */
cov_j0huv4ete().s[9]++;
FeeSchema.index.findByPaymentDate = {
  by: "payment_date"
};
/* istanbul ignore next */
cov_j0huv4ete().s[10]++;
FeeSchema.index.findByPaymentMode = {
  by: "payment_mode"
};
/* istanbul ignore next */
cov_j0huv4ete().s[11]++;
FeeSchema.index.findByFeeTemplateId = {
  by: "fee_template_id"
};
/* istanbul ignore next */
cov_j0huv4ete().s[12]++;
FeeSchema.index.findByCampusIdAndUserId = {
  by: ["campus_id", "user_id"]
};
/* istanbul ignore next */
cov_j0huv4ete().s[13]++;
FeeSchema.index.findByCampusIdAndClassId = {
  by: ["campus_id", "class_id"]
};
/* istanbul ignore next */
cov_j0huv4ete().s[14]++;
FeeSchema.index.findByCampusIdAndAcademicYear = {
  by: ["campus_id", "academic_year"]
};
const Fee =
/* istanbul ignore next */
(cov_j0huv4ete().s[15]++, ottoman.model("fee", FeeSchema));
export { Fee };