f14c624203ff7484a48135874c472d28
/* istanbul ignore next */
function cov_1hgf6vos7() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/middlewares/auth.middleware.ts";
  var hash = "b56d512c5fff0669c441d08e37347ec7c047764e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/middlewares/auth.middleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 37,
          column: 6
        }
      },
      "2": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 121
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 11,
          column: 9
        }
      },
      "4": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 65
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 45
        }
      },
      "6": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 74
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "8": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "9": {
        start: {
          line: 17,
          column: 28
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "10": {
        start: {
          line: 18,
          column: 51
        },
        end: {
          line: 18,
          column: 58
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "12": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 59
        }
      },
      "13": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "14": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 66
        }
      },
      "15": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 49
        }
      },
      "16": {
        start: {
          line: 26,
          column: 13
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "17": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 61
        }
      },
      "18": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "19": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 36
        }
      },
      "20": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "21": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "22": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 5,
            column: 31
          }
        },
        loc: {
          start: {
            line: 5,
            column: 36
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 12
          }
        },
        loc: {
          start: {
            line: 6,
            column: 32
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 6
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 8,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 8,
            column: 87
          },
          end: {
            line: 8,
            column: 89
          }
        }, {
          start: {
            line: 8,
            column: 92
          },
          end: {
            line: 8,
            column: 121
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 8,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 8,
            column: 67
          }
        }, {
          start: {
            line: 8,
            column: 71
          },
          end: {
            line: 8,
            column: 84
          }
        }],
        line: 8
      },
      "2": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 11,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 11,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: 26,
            column: 13
          },
          end: {
            line: 28,
            column: 9
          }
        }],
        line: 19
      },
      "5": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "6": {
        loc: {
          start: {
            line: 26,
            column: 13
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 13
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b56d512c5fff0669c441d08e37347ec7c047764e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hgf6vos7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hgf6vos7();
import { decode, verify } from "hono/jwt";
import { AuthService } from "@/services/auth.service";
import { UserService } from "@/services/users.service";
import { config } from "@/utils/env";
/* istanbul ignore next */
cov_1hgf6vos7().s[0]++;
export const authMiddleware = () => {
  /* istanbul ignore next */
  cov_1hgf6vos7().f[0]++;
  cov_1hgf6vos7().s[1]++;
  return async (ctx, next) => {
    /* istanbul ignore next */
    cov_1hgf6vos7().f[1]++;
    var _a;
    let token =
    /* istanbul ignore next */
    (cov_1hgf6vos7().s[2]++,
    /* istanbul ignore next */
    (cov_1hgf6vos7().b[1][0]++, (_a = ctx.req.header("Authorization")) !== null) &&
    /* istanbul ignore next */
    (cov_1hgf6vos7().b[1][1]++, _a !== void 0) ?
    /* istanbul ignore next */
    (cov_1hgf6vos7().b[0][0]++, _a) :
    /* istanbul ignore next */
    (cov_1hgf6vos7().b[0][1]++, ctx.req.query("access_token")));
    /* istanbul ignore next */
    cov_1hgf6vos7().s[3]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1hgf6vos7().b[2][0]++;
      cov_1hgf6vos7().s[4]++;
      return ctx.json({
        error: "No token provided"
      }, 401);
    } else
    /* istanbul ignore next */
    {
      cov_1hgf6vos7().b[2][1]++;
    }
    cov_1hgf6vos7().s[5]++;
    token = token.replace("Bearer ", "");
    const token_data =
    /* istanbul ignore next */
    (cov_1hgf6vos7().s[6]++, await verify(token, config.JWT_SECRET, "HS512"));
    /* istanbul ignore next */
    cov_1hgf6vos7().s[7]++;
    if (token_data instanceof Error) {
      /* istanbul ignore next */
      cov_1hgf6vos7().b[3][0]++;
      cov_1hgf6vos7().s[8]++;
      return ctx.json({
        error: token_data.message
      }, 401);
    } else
    /* istanbul ignore next */
    {
      cov_1hgf6vos7().b[3][1]++;
    }
    const {
      payload
    } =
    /* istanbul ignore next */
    (cov_1hgf6vos7().s[9]++, decode(token));
    const {
      user_id,
      user_type,
      session_id
    } =
    /* istanbul ignore next */
    (cov_1hgf6vos7().s[10]++, payload);
    /* istanbul ignore next */
    cov_1hgf6vos7().s[11]++;
    if (user_type !== "Super Admin") {
      /* istanbul ignore next */
      cov_1hgf6vos7().b[4][0]++;
      const user =
      /* istanbul ignore next */
      (cov_1hgf6vos7().s[12]++, await UserService.getUser(user_id));
      /* istanbul ignore next */
      cov_1hgf6vos7().s[13]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1hgf6vos7().b[5][0]++;
        cov_1hgf6vos7().s[14]++;
        return ctx.json({
          error: "User not found"
        }, 401);
      } else
      /* istanbul ignore next */
      {
        cov_1hgf6vos7().b[5][1]++;
      }
      cov_1hgf6vos7().s[15]++;
      ctx.set("campus_id", user.campus_id);
    } else {
      /* istanbul ignore next */
      cov_1hgf6vos7().b[4][1]++;
      cov_1hgf6vos7().s[16]++;
      if (ctx.req.query("campus_id")) {
        /* istanbul ignore next */
        cov_1hgf6vos7().b[6][0]++;
        cov_1hgf6vos7().s[17]++;
        ctx.set("campus_id", ctx.req.query("campus_id"));
      } else
      /* istanbul ignore next */
      {
        cov_1hgf6vos7().b[6][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1hgf6vos7().s[18]++;
    ctx.set("token", token);
    /* istanbul ignore next */
    cov_1hgf6vos7().s[19]++;
    ctx.set("user_id", user_id);
    /* istanbul ignore next */
    cov_1hgf6vos7().s[20]++;
    ctx.set("user_type", user_type);
    /* istanbul ignore next */
    cov_1hgf6vos7().s[21]++;
    await AuthService.checkIfSessionIsValid({
      user_id,
      session_id
    });
    /* istanbul ignore next */
    cov_1hgf6vos7().s[22]++;
    await next();
  };
};