641158f1db8dabbc7e44554ee1f8a227
/* istanbul ignore next */
function cov_1un1abi3fd() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/payment_settlement.controller.ts";
  var hash = "f066f14ccd8e855a20287d427a8865cc3b1c831e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/payment_settlement.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 96
        }
      },
      "1": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "2": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 33
        }
      },
      "3": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 79,
          column: 2
        }
      },
      "4": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "5": {
        start: {
          line: 37,
          column: 26
        },
        end: {
          line: 37,
          column: 46
        }
      },
      "6": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 42
        }
      },
      "7": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 39,
          column: 46
        }
      },
      "8": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "9": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "10": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 81
        }
      },
      "11": {
        start: {
          line: 48,
          column: 54
        },
        end: {
          line: 48,
          column: 74
        }
      },
      "12": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "13": {
        start: {
          line: 50,
          column: 26
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "14": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 81
        }
      },
      "15": {
        start: {
          line: 55,
          column: 27
        },
        end: {
          line: 55,
          column: 170
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "17": {
        start: {
          line: 71,
          column: 30
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "18": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 112
        }
      },
      "19": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 121,
          column: 2
        }
      },
      "20": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "21": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 46
        }
      },
      "22": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 46
        }
      },
      "23": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "24": {
        start: {
          line: 89,
          column: 26
        },
        end: {
          line: 89,
          column: 69
        }
      },
      "25": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 81
        }
      },
      "26": {
        start: {
          line: 92,
          column: 89
        },
        end: {
          line: 92,
          column: 104
        }
      },
      "27": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "28": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "29": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 118,
          column: 10
        }
      },
      "30": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 112
        }
      },
      "31": {
        start: {
          line: 125,
          column: 0
        },
        end: {
          line: 154,
          column: 2
        }
      },
      "32": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "33": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 46
        }
      },
      "34": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 128,
          column: 46
        }
      },
      "35": {
        start: {
          line: 129,
          column: 34
        },
        end: {
          line: 129,
          column: 49
        }
      },
      "36": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "37": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 132,
          column: 69
        }
      },
      "38": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 81
        }
      },
      "39": {
        start: {
          line: 136,
          column: 34
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "40": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "41": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 151,
          column: 10
        }
      },
      "42": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 112
        }
      },
      "43": {
        start: {
          line: 160,
          column: 0
        },
        end: {
          line: 200,
          column: 2
        }
      },
      "44": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "45": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 43
        }
      },
      "46": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 163,
          column: 49
        }
      },
      "47": {
        start: {
          line: 164,
          column: 26
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "48": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "49": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "50": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 178,
          column: 20
        }
      },
      "51": {
        start: {
          line: 180,
          column: 23
        },
        end: {
          line: 180,
          column: 128
        }
      },
      "52": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "53": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 58
        }
      },
      "54": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 198,
          column: 16
        }
      },
      "55": {
        start: {
          line: 206,
          column: 0
        },
        end: {
          line: 240,
          column: 2
        }
      },
      "56": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "57": {
        start: {
          line: 208,
          column: 26
        },
        end: {
          line: 208,
          column: 46
        }
      },
      "58": {
        start: {
          line: 209,
          column: 26
        },
        end: {
          line: 209,
          column: 46
        }
      },
      "59": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "60": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 215,
          column: 14
        }
      },
      "61": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 81
        }
      },
      "62": {
        start: {
          line: 218,
          column: 28
        },
        end: {
          line: 218,
          column: 90
        }
      },
      "63": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "64": {
        start: {
          line: 234,
          column: 30
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "65": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 112
        }
      },
      "66": {
        start: {
          line: 244,
          column: 0
        },
        end: {
          line: 284,
          column: 2
        }
      },
      "67": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 283,
          column: 5
        }
      },
      "68": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 246,
          column: 46
        }
      },
      "69": {
        start: {
          line: 247,
          column: 26
        },
        end: {
          line: 247,
          column: 46
        }
      },
      "70": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "71": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 250,
          column: 69
        }
      },
      "72": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 81
        }
      },
      "73": {
        start: {
          line: 253,
          column: 93
        },
        end: {
          line: 253,
          column: 108
        }
      },
      "74": {
        start: {
          line: 255,
          column: 31
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "75": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "76": {
        start: {
          line: 278,
          column: 30
        },
        end: {
          line: 281,
          column: 10
        }
      },
      "77": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 112
        }
      },
      "78": {
        start: {
          line: 288,
          column: 0
        },
        end: {
          line: 342,
          column: 2
        }
      },
      "79": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 341,
          column: 5
        }
      },
      "80": {
        start: {
          line: 290,
          column: 26
        },
        end: {
          line: 290,
          column: 46
        }
      },
      "81": {
        start: {
          line: 291,
          column: 26
        },
        end: {
          line: 291,
          column: 46
        }
      },
      "82": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "83": {
        start: {
          line: 294,
          column: 26
        },
        end: {
          line: 294,
          column: 69
        }
      },
      "84": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 81
        }
      },
      "85": {
        start: {
          line: 297,
          column: 118
        },
        end: {
          line: 297,
          column: 133
        }
      },
      "86": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "87": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 310,
          column: 15
        }
      },
      "88": {
        start: {
          line: 313,
          column: 26
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "89": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 333,
          column: 11
        }
      },
      "90": {
        start: {
          line: 336,
          column: 30
        },
        end: {
          line: 339,
          column: 10
        }
      },
      "91": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 112
        }
      },
      "92": {
        start: {
          line: 347,
          column: 0
        },
        end: {
          line: 389,
          column: 2
        }
      },
      "93": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 388,
          column: 5
        }
      },
      "94": {
        start: {
          line: 349,
          column: 26
        },
        end: {
          line: 349,
          column: 46
        }
      },
      "95": {
        start: {
          line: 350,
          column: 24
        },
        end: {
          line: 350,
          column: 42
        }
      },
      "96": {
        start: {
          line: 351,
          column: 26
        },
        end: {
          line: 351,
          column: 46
        }
      },
      "97": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "98": {
        start: {
          line: 354,
          column: 26
        },
        end: {
          line: 354,
          column: 69
        }
      },
      "99": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 81
        }
      },
      "100": {
        start: {
          line: 357,
          column: 52
        },
        end: {
          line: 357,
          column: 72
        }
      },
      "101": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "102": {
        start: {
          line: 359,
          column: 26
        },
        end: {
          line: 364,
          column: 14
        }
      },
      "103": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 81
        }
      },
      "104": {
        start: {
          line: 367,
          column: 30
        },
        end: {
          line: 367,
          column: 137
        }
      },
      "105": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "106": {
        start: {
          line: 383,
          column: 30
        },
        end: {
          line: 386,
          column: 10
        }
      },
      "107": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 112
        }
      },
      "108": {
        start: {
          line: 393,
          column: 0
        },
        end: {
          line: 425,
          column: 2
        }
      },
      "109": {
        start: {
          line: 394,
          column: 4
        },
        end: {
          line: 424,
          column: 5
        }
      },
      "110": {
        start: {
          line: 395,
          column: 26
        },
        end: {
          line: 395,
          column: 46
        }
      },
      "111": {
        start: {
          line: 396,
          column: 26
        },
        end: {
          line: 396,
          column: 46
        }
      },
      "112": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "113": {
        start: {
          line: 399,
          column: 26
        },
        end: {
          line: 399,
          column: 69
        }
      },
      "114": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 81
        }
      },
      "115": {
        start: {
          line: 403,
          column: 31
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "116": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 416,
          column: 11
        }
      },
      "117": {
        start: {
          line: 419,
          column: 30
        },
        end: {
          line: 422,
          column: 10
        }
      },
      "118": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 423,
          column: 112
        }
      },
      "119": {
        start: {
          line: 430,
          column: 0
        },
        end: {
          line: 467,
          column: 2
        }
      },
      "120": {
        start: {
          line: 431,
          column: 4
        },
        end: {
          line: 466,
          column: 5
        }
      },
      "121": {
        start: {
          line: 432,
          column: 26
        },
        end: {
          line: 432,
          column: 46
        }
      },
      "122": {
        start: {
          line: 433,
          column: 26
        },
        end: {
          line: 433,
          column: 46
        }
      },
      "123": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "124": {
        start: {
          line: 436,
          column: 26
        },
        end: {
          line: 439,
          column: 14
        }
      },
      "125": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 81
        }
      },
      "126": {
        start: {
          line: 442,
          column: 70
        },
        end: {
          line: 442,
          column: 85
        }
      },
      "127": {
        start: {
          line: 444,
          column: 27
        },
        end: {
          line: 453,
          column: 9
        }
      },
      "128": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 458,
          column: 11
        }
      },
      "129": {
        start: {
          line: 461,
          column: 30
        },
        end: {
          line: 464,
          column: 10
        }
      },
      "130": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 465,
          column: 112
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 46
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 35,
            column: 54
          },
          end: {
            line: 35,
            column: 55
          }
        },
        loc: {
          start: {
            line: 35,
            column: 69
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 35
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 83,
            column: 51
          },
          end: {
            line: 83,
            column: 52
          }
        },
        loc: {
          start: {
            line: 83,
            column: 66
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 83
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 125,
            column: 51
          },
          end: {
            line: 125,
            column: 52
          }
        },
        loc: {
          start: {
            line: 125,
            column: 66
          },
          end: {
            line: 154,
            column: 1
          }
        },
        line: 125
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 160,
            column: 54
          },
          end: {
            line: 160,
            column: 55
          }
        },
        loc: {
          start: {
            line: 160,
            column: 69
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 160
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 206,
            column: 51
          },
          end: {
            line: 206,
            column: 52
          }
        },
        loc: {
          start: {
            line: 206,
            column: 66
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 206
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 244,
            column: 48
          },
          end: {
            line: 244,
            column: 49
          }
        },
        loc: {
          start: {
            line: 244,
            column: 63
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 244
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 288,
            column: 43
          },
          end: {
            line: 288,
            column: 44
          }
        },
        loc: {
          start: {
            line: 288,
            column: 58
          },
          end: {
            line: 342,
            column: 1
          }
        },
        line: 288
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 347,
            column: 47
          },
          end: {
            line: 347,
            column: 48
          }
        },
        loc: {
          start: {
            line: 347,
            column: 62
          },
          end: {
            line: 389,
            column: 1
          }
        },
        line: 347
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 393,
            column: 55
          },
          end: {
            line: 393,
            column: 56
          }
        },
        loc: {
          start: {
            line: 393,
            column: 70
          },
          end: {
            line: 425,
            column: 1
          }
        },
        line: 393
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 430,
            column: 55
          },
          end: {
            line: 430,
            column: 56
          }
        },
        loc: {
          start: {
            line: 430,
            column: 70
          },
          end: {
            line: 467,
            column: 1
          }
        },
        line: 430
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 114
          },
          end: {
            line: 55,
            column: 169
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 132
          },
          end: {
            line: 55,
            column: 157
          }
        }, {
          start: {
            line: 55,
            column: 160
          },
          end: {
            line: 55,
            column: 169
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "4": {
        loc: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 23
          },
          end: {
            line: 92,
            column: 24
          }
        }],
        line: 92
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 26
          },
          end: {
            line: 92,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 92,
            column: 34
          },
          end: {
            line: 92,
            column: 36
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "7": {
        loc: {
          start: {
            line: 164,
            column: 26
          },
          end: {
            line: 168,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 26
          },
          end: {
            line: 164,
            column: 63
          }
        }, {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 165,
            column: 50
          }
        }, {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 46
          }
        }, {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 167,
            column: 50
          }
        }, {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 14
          }
        }],
        line: 164
      },
      "8": {
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 34
          }
        }, {
          start: {
            line: 170,
            column: 38
          },
          end: {
            line: 170,
            column: 71
          }
        }, {
          start: {
            line: 170,
            column: 75
          },
          end: {
            line: 170,
            column: 84
          }
        }],
        line: 170
      },
      "9": {
        loc: {
          start: {
            line: 171,
            column: 24
          },
          end: {
            line: 171,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 24
          },
          end: {
            line: 171,
            column: 52
          }
        }, {
          start: {
            line: 171,
            column: 56
          },
          end: {
            line: 171,
            column: 65
          }
        }],
        line: 171
      },
      "10": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "11": {
        loc: {
          start: {
            line: 183,
            column: 18
          },
          end: {
            line: 188,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 18
          },
          end: {
            line: 187,
            column: 17
          }
        }, {
          start: {
            line: 188,
            column: 18
          },
          end: {
            line: 188,
            column: 22
          }
        }],
        line: 183
      },
      "12": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "13": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "14": {
        loc: {
          start: {
            line: 253,
            column: 46
          },
          end: {
            line: 253,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 53
          },
          end: {
            line: 253,
            column: 54
          }
        }],
        line: 253
      },
      "15": {
        loc: {
          start: {
            line: 253,
            column: 56
          },
          end: {
            line: 253,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 253,
            column: 64
          },
          end: {
            line: 253,
            column: 66
          }
        }],
        line: 253
      },
      "16": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "17": {
        loc: {
          start: {
            line: 297,
            column: 54
          },
          end: {
            line: 297,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 297,
            column: 61
          },
          end: {
            line: 297,
            column: 62
          }
        }],
        line: 297
      },
      "18": {
        loc: {
          start: {
            line: 297,
            column: 64
          },
          end: {
            line: 297,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 297,
            column: 72
          },
          end: {
            line: 297,
            column: 75
          }
        }],
        line: 297
      },
      "19": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "20": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 35
          }
        }, {
          start: {
            line: 299,
            column: 39
          },
          end: {
            line: 299,
            column: 62
          }
        }],
        line: 299
      },
      "21": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "22": {
        loc: {
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "23": {
        loc: {
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 358,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 358,
            column: 29
          }
        }, {
          start: {
            line: 358,
            column: 33
          },
          end: {
            line: 358,
            column: 47
          }
        }],
        line: 358
      },
      "24": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "25": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 441,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "26": {
        loc: {
          start: {
            line: 442,
            column: 51
          },
          end: {
            line: 442,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 442,
            column: 60
          },
          end: {
            line: 442,
            column: 65
          }
        }],
        line: 442
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0, 0, 0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f066f14ccd8e855a20287d427a8865cc3b1c831e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1un1abi3fd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1un1abi3fd();
var _a;
import crypto from "node:crypto";
import PaymentErrorHandler from "@/services/payment_error_handler.service";
import { PaymentSettlementService } from "@/services/payment_settlement.service";
/**
 * Enhanced Payment Settlement Controller
 * Handles secure payment operations, settlements, and compliance monitoring
 */
export class PaymentSettlementController {
  // ========================= PRIVATE HELPER METHODS =========================
  /**
   * Export audit logs in various formats
   */
  static async exportAuditLogs(ctx, params) {
    /* istanbul ignore next */
    cov_1un1abi3fd().f[0]++;
    // Implementation for exporting audit logs
    const exportUrl =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[0]++, `https://your-app.com/exports/${crypto.randomUUID()}.${params.format}`);
    /* istanbul ignore next */
    cov_1un1abi3fd().s[1]++;
    return ctx.json({
      success: true,
      data: {
        export_url: exportUrl,
        format: params.format,
        expires_at: new Date(Date.now() + 60 * 60 * 1000),
        // 1 hour
        estimated_records: 0
      },
      message: `Audit logs export initiated in ${params.format} format`
    });
  }
}
/* istanbul ignore next */
cov_1un1abi3fd().s[2]++;
_a = PaymentSettlementController;
// ========================= SETTLEMENT MANAGEMENT =========================
/**
 * Trigger manual settlement for a specific gateway
 * Only accessible by Super Admin
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[3]++;
PaymentSettlementController.triggerManualSettlement = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[1]++;
  cov_1un1abi3fd().s[4]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[5]++, ctx.get("campus_id"));
    const user_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[6]++, ctx.get("user_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[7]++, ctx.get("user_type"));
    // Only Super Admin can trigger manual settlements
    /* istanbul ignore next */
    cov_1un1abi3fd().s[8]++;
    if (user_type !== "Super Admin") {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[0][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[9]++, PaymentErrorHandler.createError("AUTH_002", {
        required_role: "Super Admin",
        current_role: user_type
      }));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[10]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[0][1]++;
    }
    const {
      gateway_provider,
      settlement_date
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[11]++, await ctx.req.json());
    /* istanbul ignore next */
    cov_1un1abi3fd().s[12]++;
    if (!gateway_provider) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[1][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[13]++, PaymentErrorHandler.createError("VAL_001", {
        missing_fields: {
          gateway_provider: true
        }
      }));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[14]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 400);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[1][1]++;
    }
    const settlement =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[15]++, await PaymentSettlementService.processAutomaticSettlement(campus_id, gateway_provider, settlement_date ?
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[2][0]++, new Date(settlement_date)) :
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[2][1]++, undefined)));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[16]++;
    return ctx.json({
      success: true,
      data: {
        settlement_id: settlement.id,
        settlement_batch_id: settlement.settlement_batch_id,
        net_settlement_amount: settlement.net_settlement_amount,
        currency: settlement.currency,
        status: settlement.settlement_status,
        gateway_provider: settlement.gateway_provider,
        transaction_count: settlement.transaction_summary.total_transactions
      },
      message: "Settlement initiated successfully"
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[17]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "triggerManualSettlement",
      user_id: ctx.get("user_id"),
      campus_id: ctx.get("campus_id")
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[18]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
/**
 * Get settlement history for the campus
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[19]++;
PaymentSettlementController.getSettlementHistory = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[2]++;
  cov_1un1abi3fd().s[20]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[21]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[22]++, ctx.get("user_type"));
    // Only Admin and Super Admin can view settlement history
    /* istanbul ignore next */
    cov_1un1abi3fd().s[23]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[3][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[24]++, PaymentErrorHandler.createError("AUTH_002"));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[25]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[3][1]++;
    }
    const {
      page =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[4][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[5][0]++, 20),
      status,
      gateway_provider,
      start_date,
      end_date
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[26]++, ctx.req.query());
    // This would be implemented in PaymentSettlementService
    const settlements =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[27]++, {
      settlements: [],
      pagination: {
        page: Number.parseInt(String(page)),
        limit: Number.parseInt(String(limit)),
        total: 0,
        pages: 0
      },
      summary: {
        total_settlements: 0,
        total_amount_settled: 0,
        pending_settlements: 0,
        failed_settlements: 0
      }
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[28]++;
    return ctx.json({
      success: true,
      data: settlements
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[29]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "getSettlementHistory"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[30]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
/**
 * Get detailed settlement information by ID
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[31]++;
PaymentSettlementController.getSettlementDetails = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[3]++;
  cov_1un1abi3fd().s[32]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[33]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[34]++, ctx.get("user_type"));
    const {
      settlement_id
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[35]++, ctx.req.param());
    // Only Admin and Super Admin can view settlement details
    /* istanbul ignore next */
    cov_1un1abi3fd().s[36]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[6][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[37]++, PaymentErrorHandler.createError("AUTH_002"));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[38]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[6][1]++;
    }
    // This would fetch from PaymentSettlementService
    const settlementDetails =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[39]++, {
      settlement_id,
      campus_id,
      status: "completed"
      // ... other settlement details
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[40]++;
    return ctx.json({
      success: true,
      data: settlementDetails
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[41]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "getSettlementDetails"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[42]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
// ========================= WEBHOOK HANDLERS =========================
/**
 * Handle settlement webhooks from payment gateways
 * This endpoint is called by payment gateways to update settlement status
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[43]++;
PaymentSettlementController.handleSettlementWebhook = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[4]++;
  cov_1un1abi3fd().s[44]++;
  try {
    const {
      gateway
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[45]++, ctx.req.param());
    const webhook_data =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[46]++, await ctx.req.json());
    const signature =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[47]++,
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[7][0]++, ctx.req.header("x-webhook-signature")) ||
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[7][1]++, ctx.req.header("x-razorpay-signature")) ||
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[7][2]++, ctx.req.header("x-payu-signature")) ||
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[7][3]++, ctx.req.header("x-cashfree-signature")) ||
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[7][4]++, ""));
    const request_context =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[48]++, {
      ip_address:
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[8][0]++, ctx.env.ip) ||
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[8][1]++, ctx.req.header("x-forwarded-for")) ||
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[8][2]++, "unknown"),
      user_agent:
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[9][0]++, ctx.req.header("user-agent")) ||
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[9][1]++, "unknown"),
      request_id: crypto.randomUUID()
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[49]++;
    if (!["razorpay", "payu", "cashfree"].includes(gateway)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[10][0]++;
      cov_1un1abi3fd().s[50]++;
      return ctx.json({
        success: false,
        error: "Unsupported gateway"
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[10][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[51]++, await PaymentSettlementService.handleSettlementWebhook(gateway, webhook_data, signature, request_context));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[52]++;
    return ctx.json({
      success: result.success,
      data: result.settlement ?
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[11][0]++, {
        settlement_id: result.settlement.id,
        status: result.settlement.settlement_status
      }) :
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[11][1]++, null)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1un1abi3fd().s[53]++;
    // For webhook errors, we should still return 200 to prevent retries
    // but log the error internally
    console.error("Webhook processing error:", error);
    /* istanbul ignore next */
    cov_1un1abi3fd().s[54]++;
    return ctx.json({
      success: false,
      error: "Webhook processing failed"
    }, 200); // Return 200 to prevent gateway retries
  }
};
// ========================= SECURITY & COMPLIANCE =========================
/**
 * Perform comprehensive security audit
 * Only accessible by Super Admin
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[55]++;
PaymentSettlementController.performSecurityAudit = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[5]++;
  cov_1un1abi3fd().s[56]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[57]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[58]++, ctx.get("user_type"));
    // Only Super Admin can perform security audits
    /* istanbul ignore next */
    cov_1un1abi3fd().s[59]++;
    if (user_type !== "Super Admin") {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[12][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[60]++, PaymentErrorHandler.createError("AUTH_002", {
        required_role: "Super Admin",
        current_role: user_type
      }));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[61]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[12][1]++;
    }
    const auditResult =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[62]++, await PaymentSettlementService.performSecurityAudit(campus_id));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[63]++;
    return ctx.json({
      success: true,
      data: {
        audit_report_id: auditResult.audit_report_id,
        overall_security_score: auditResult.overall_score,
        compliance_status: auditResult.compliance_status,
        security_issues: auditResult.security_issues,
        recommendations: auditResult.recommendations,
        audit_timestamp: new Date(),
        next_audit_due: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days
      },
      message: `Security audit completed. Overall score: ${auditResult.overall_score}/100`
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[64]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "performSecurityAudit"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[65]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
/**
 * Get security events and monitoring data
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[66]++;
PaymentSettlementController.getSecurityEvents = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[6]++;
  cov_1un1abi3fd().s[67]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[68]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[69]++, ctx.get("user_type"));
    // Only Admin and Super Admin can view security events
    /* istanbul ignore next */
    cov_1un1abi3fd().s[70]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[13][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[71]++, PaymentErrorHandler.createError("AUTH_002"));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[72]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[13][1]++;
    }
    const {
      severity,
      event_type,
      status,
      page =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[14][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[15][0]++, 50),
      start_date,
      end_date
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[73]++, ctx.req.query());
    // This would be implemented to fetch from PaymentSecurityEvent model
    const securityEvents =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[74]++, {
      events: [],
      pagination: {
        page: Number.parseInt(String(page)),
        limit: Number.parseInt(String(limit)),
        total: 0,
        pages: 0
      },
      summary: {
        critical_events: 0,
        high_severity_events: 0,
        medium_severity_events: 0,
        low_severity_events: 0,
        open_investigations: 0,
        resolved_incidents: 0
      }
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[75]++;
    return ctx.json({
      success: true,
      data: securityEvents
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[76]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "getSecurityEvents"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[77]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
/**
 * Get audit logs for compliance reporting
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[78]++;
PaymentSettlementController.getAuditLogs = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[7]++;
  cov_1un1abi3fd().s[79]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[80]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[81]++, ctx.get("user_type"));
    // Only Admin and Super Admin can view audit logs
    /* istanbul ignore next */
    cov_1un1abi3fd().s[82]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[16][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[83]++, PaymentErrorHandler.createError("AUTH_002"));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[84]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[16][1]++;
    }
    const {
      event_category,
      event_type,
      severity,
      page =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[17][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[18][0]++, 100),
      start_date,
      end_date,
      export_format
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[85]++, ctx.req.query());
    // Handle export request
    /* istanbul ignore next */
    cov_1un1abi3fd().s[86]++;
    if (
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[20][0]++, export_format === "csv") ||
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[20][1]++, export_format === "pdf")) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[19][0]++;
      cov_1un1abi3fd().s[87]++;
      return await _a.exportAuditLogs(ctx, {
        campus_id,
        format: export_format,
        filters: {
          event_category,
          event_type,
          severity,
          start_date,
          end_date
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[19][1]++;
    }
    // This would be implemented to fetch from PaymentAuditLog model
    const auditLogs =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[88]++, {
      logs: [],
      pagination: {
        page: Number.parseInt(String(page)),
        limit: Number.parseInt(String(limit)),
        total: 0,
        pages: 0
      },
      summary: {
        total_events: 0,
        payment_events: 0,
        settlement_events: 0,
        security_events: 0,
        configuration_events: 0,
        compliance_events: 0
      }
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[89]++;
    return ctx.json({
      success: true,
      data: auditLogs
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[90]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "getAuditLogs"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[91]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
// ========================= GATEWAY CONFIGURATION =========================
/**
 * Configure payment gateway with enhanced security
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[92]++;
PaymentSettlementController.configureGateway = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[8]++;
  cov_1un1abi3fd().s[93]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[94]++, ctx.get("campus_id"));
    const user_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[95]++, ctx.get("user_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[96]++, ctx.get("user_type"));
    // Only Admin and Super Admin can configure gateways
    /* istanbul ignore next */
    cov_1un1abi3fd().s[97]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[21][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[98]++, PaymentErrorHandler.createError("AUTH_002"));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[99]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[21][1]++;
    }
    const {
      gateway_provider,
      configuration
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[100]++, await ctx.req.json());
    /* istanbul ignore next */
    cov_1un1abi3fd().s[101]++;
    if (
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[23][0]++, !gateway_provider) ||
    /* istanbul ignore next */
    (cov_1un1abi3fd().b[23][1]++, !configuration)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[22][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[102]++, PaymentErrorHandler.createError("VAL_001", {
        missing_fields: {
          gateway_provider: !gateway_provider,
          configuration: !configuration
        }
      }));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[103]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 400);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[22][1]++;
    }
    const gatewayConfig =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[104]++, await PaymentSettlementService.configurePaymentGateway(campus_id, gateway_provider, configuration, user_id));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[105]++;
    return ctx.json({
      success: true,
      data: {
        configuration_id: gatewayConfig.id,
        gateway_provider: gatewayConfig.gateway_provider,
        status: gatewayConfig.status,
        is_primary: gatewayConfig.is_primary,
        gateway_mode: gatewayConfig.gateway_mode,
        configured_at: gatewayConfig.configuration_details.configured_at,
        test_status: gatewayConfig.testing_details.last_test_status
      },
      message: `${gateway_provider} gateway configured successfully`
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[106]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "configureGateway"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[107]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
/**
 * Get gateway configurations and status
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[108]++;
PaymentSettlementController.getGatewayConfigurations = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[9]++;
  cov_1un1abi3fd().s[109]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[110]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[111]++, ctx.get("user_type"));
    // Only Admin and Super Admin can view gateway configurations
    /* istanbul ignore next */
    cov_1un1abi3fd().s[112]++;
    if (!["Admin", "Super Admin"].includes(user_type)) {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[24][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[113]++, PaymentErrorHandler.createError("AUTH_002"));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[114]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[24][1]++;
    }
    // This would be implemented to fetch from PaymentGatewayConfiguration model
    const configurations =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[115]++, {
      gateways: [],
      summary: {
        total_configured: 0,
        active_gateways: 0,
        primary_gateway: null,
        test_mode_gateways: 0,
        live_mode_gateways: 0
      }
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[116]++;
    return ctx.json({
      success: true,
      data: configurations
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[117]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "getGatewayConfigurations"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[118]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};
// ========================= COMPLIANCE & REPORTING =========================
/**
 * Generate compliance report
 */
/* istanbul ignore next */
cov_1un1abi3fd().s[119]++;
PaymentSettlementController.generateComplianceReport = async ctx => {
  /* istanbul ignore next */
  cov_1un1abi3fd().f[10]++;
  cov_1un1abi3fd().s[120]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[121]++, ctx.get("campus_id"));
    const user_type =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[122]++, ctx.get("user_type"));
    // Only Super Admin can generate compliance reports
    /* istanbul ignore next */
    cov_1un1abi3fd().s[123]++;
    if (user_type !== "Super Admin") {
      /* istanbul ignore next */
      cov_1un1abi3fd().b[25][0]++;
      const error =
      /* istanbul ignore next */
      (cov_1un1abi3fd().s[124]++, PaymentErrorHandler.createError("AUTH_002", {
        required_role: "Super Admin",
        current_role: user_type
      }));
      /* istanbul ignore next */
      cov_1un1abi3fd().s[125]++;
      return ctx.json(PaymentErrorHandler.formatErrorResponse(error), 403);
    } else
    /* istanbul ignore next */
    {
      cov_1un1abi3fd().b[25][1]++;
    }
    const {
      report_type,
      start_date,
      end_date,
      format =
      /* istanbul ignore next */
      (cov_1un1abi3fd().b[26][0]++, "pdf")
    } =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[126]++, ctx.req.query());
    // This would generate various compliance reports
    const reportData =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[127]++, {
      report_id: crypto.randomUUID(),
      report_type,
      campus_id,
      generated_at: new Date(),
      period: {
        start_date,
        end_date
      },
      format,
      download_url: `https://your-app.com/reports/${crypto.randomUUID()}.${format}`,
      expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours
    });
    /* istanbul ignore next */
    cov_1un1abi3fd().s[128]++;
    return ctx.json({
      success: true,
      data: reportData,
      message: `${report_type} compliance report generated successfully`
    });
  } catch (error) {
    const errorHandling =
    /* istanbul ignore next */
    (cov_1un1abi3fd().s[129]++, PaymentErrorHandler.handleError(error, {
      controller: "PaymentSettlementController",
      method: "generateComplianceReport"
    }));
    /* istanbul ignore next */
    cov_1un1abi3fd().s[130]++;
    return ctx.json(PaymentErrorHandler.formatErrorResponse(errorHandling.error), errorHandling.httpStatus);
  }
};