7fbd481e0ee29dc5504f5a201138c279
/* istanbul ignore next */
function cov_29nvshfpfd() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/fee.route.ts";
  var hash = "801ac1c4a5ac755389c9a3767698bce260fe2f5e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/fee.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "2": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 72,
          column: 77
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "801ac1c4a5ac755389c9a3767698bce260fe2f5e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29nvshfpfd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29nvshfpfd();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { FeeController } from "@/controllers/fee.controller";
import { errorResponseSchema, getFeesResponseSchema, updateFeeRequestBodySchema, updateFeeResponseSchema } from "@/schema/fee";
const app =
/* istanbul ignore next */
(cov_29nvshfpfd().s[0]++, new Hono());
/* istanbul ignore next */
cov_29nvshfpfd().s[1]++;
app.get("/:user_id", describeRoute({
  operationId: "getFeeByUserId",
  summary: "Get fees by user ID",
  description: "Retrieves all unpaid fees for a specific user",
  tags: ["Fee"],
  parameters: [{
    name: "user_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "User ID"
  }],
  responses: {
    200: {
      description: "List of user fees",
      content: {
        "application/json": {
          schema: resolver(getFeesResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), FeeController.getFeeByUserId);
/* istanbul ignore next */
cov_29nvshfpfd().s[2]++;
app.patch("/:id", describeRoute({
  operationId: "updateFee",
  summary: "Update a fee",
  description: "Updates a specific fee record by ID (e.g., mark as paid)",
  tags: ["Fee"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Fee ID"
  }],
  responses: {
    200: {
      description: "Fee updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateFeeResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateFeeRequestBodySchema), FeeController.updateFee);
export default app;