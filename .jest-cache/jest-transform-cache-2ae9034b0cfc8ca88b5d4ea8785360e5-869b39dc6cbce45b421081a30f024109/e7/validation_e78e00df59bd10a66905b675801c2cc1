9c053acfa50f0d60febd89943431cdd7
/* istanbul ignore next */
function cov_231mx5684a() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/utils/validation.ts";
  var hash = "c5778066c324bc143a7fe3d40014dac3e2a4a737";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/utils/validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 10,
          column: 100
        }
      },
      "1": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 111
        }
      },
      "2": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 33
        }
      },
      "3": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 17,
          column: 94
        }
      },
      "4": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 18,
          column: 89
        }
      },
      "5": {
        start: {
          line: 19,
          column: 22
        },
        end: {
          line: 19,
          column: 115
        }
      },
      "6": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "7": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "8": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 118
        }
      },
      "9": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 41,
          column: 2
        }
      },
      "10": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 87
        }
      },
      "11": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 62,
          column: 2
        }
      },
      "12": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 87
        }
      },
      "13": {
        start: {
          line: 60,
          column: 22
        },
        end: {
          line: 60,
          column: 50
        }
      },
      "14": {
        start: {
          line: 64,
          column: 36
        },
        end: {
          line: 66,
          column: 2
        }
      },
      "15": {
        start: {
          line: 68,
          column: 35
        },
        end: {
          line: 74,
          column: 2
        }
      },
      "16": {
        start: {
          line: 76,
          column: 33
        },
        end: {
          line: 78,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 15
          }
        },
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 38,
            column: 19
          },
          end: {
            line: 38,
            column: 20
          }
        },
        loc: {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 87
          }
        },
        line: 38
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 20
          }
        },
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 87
          }
        },
        line: 54
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        loc: {
          start: {
            line: 60,
            column: 22
          },
          end: {
            line: 60,
            column: 50
          }
        },
        line: 60
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 62
          },
          end: {
            line: 38,
            column: 81
          }
        }, {
          start: {
            line: 38,
            column: 84
          },
          end: {
            line: 38,
            column: 87
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 32
          }
        }, {
          start: {
            line: 38,
            column: 36
          },
          end: {
            line: 38,
            column: 59
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 62
          },
          end: {
            line: 54,
            column: 81
          }
        }, {
          start: {
            line: 54,
            column: 84
          },
          end: {
            line: 54,
            column: 87
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 32
          }
        }, {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 59
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c5778066c324bc143a7fe3d40014dac3e2a4a737"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_231mx5684a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_231mx5684a();
import { z } from "zod";
/**
 * Validation schemas for user operations
 */
// Base schemas for reusable components
const userIdSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[0]++, z.string().min(1, "User ID is required").max(50, "User ID must be less than 50 characters").regex(/^[\w-]+$/, "User ID can only contain alphanumeric characters, underscores, and hyphens"));
const emailSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[1]++, z.string().email("Invalid email format").max(255, "Email must be less than 255 characters"));
const passwordSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[2]++, z.string());
const nameSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[3]++, z.string().min(1, "Name is required").max(100, "Name must be less than 100 characters").regex(/^[\s'a-z-]+$/i, "Name can only contain letters, spaces, hyphens, and apostrophes"));
const phoneSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[4]++, z.string().regex(/^\+?[1-9]\d{1,14}$/, "Invalid phone number format"));
const addressSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[5]++, z.string().min(1, "Address is required").max(500, "Address must be less than 500 characters"));
const userTypeSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[6]++, z.enum(["Student", "Teacher", "Parent", "Admin", "Super Admin"], {
  errorMap: () => {
    /* istanbul ignore next */
    cov_231mx5684a().f[0]++;
    cov_231mx5684a().s[7]++;
    return {
      message: "Invalid user type. Must be one of: Student, Teacher, Parent, Admin, Super Admin"
    };
  }
}));
const campusIdSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[8]++, z.string().min(1, "Campus ID is required").max(50, "Campus ID must be less than 50 characters"));
// Create user validation schema
export const createUserSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[9]++, z.object({
  user_id: userIdSchema,
  email: emailSchema,
  password: passwordSchema,
  first_name: nameSchema,
  last_name: nameSchema,
  phone: phoneSchema,
  address: addressSchema,
  meta_data: z.union([z.string(), z.record(z.any())]).optional().transform(val => {
    /* istanbul ignore next */
    cov_231mx5684a().f[1]++;
    cov_231mx5684a().s[10]++;
    return /* istanbul ignore next */(cov_231mx5684a().b[1][0]++, val) &&
    /* istanbul ignore next */
    (cov_231mx5684a().b[1][1]++, typeof val !== "string") ?
    /* istanbul ignore next */
    (cov_231mx5684a().b[0][0]++, JSON.stringify(val)) :
    /* istanbul ignore next */
    (cov_231mx5684a().b[0][1]++, val);
  }),
  user_type: userTypeSchema,
  campus_id: campusIdSchema.optional()
}));
// Update user validation schema
export const updateUserSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[11]++, z.object({
  user_id: userIdSchema.optional(),
  email: emailSchema.optional(),
  first_name: nameSchema.optional(),
  last_name: nameSchema.optional(),
  phone: phoneSchema.optional(),
  address: addressSchema.optional(),
  meta_data: z.union([z.string(), z.record(z.any())]).optional().transform(val => {
    /* istanbul ignore next */
    cov_231mx5684a().f[2]++;
    cov_231mx5684a().s[12]++;
    return /* istanbul ignore next */(cov_231mx5684a().b[3][0]++, val) &&
    /* istanbul ignore next */
    (cov_231mx5684a().b[3][1]++, typeof val !== "string") ?
    /* istanbul ignore next */
    (cov_231mx5684a().b[2][0]++, JSON.stringify(val)) :
    /* istanbul ignore next */
    (cov_231mx5684a().b[2][1]++, val);
  }),
  is_active: z.boolean().optional(),
  is_deleted: z.boolean().optional(),
  user_type: userTypeSchema.optional(),
  campus_id: campusIdSchema.optional()
}).refine(data => {
  /* istanbul ignore next */
  cov_231mx5684a().f[3]++;
  cov_231mx5684a().s[13]++;
  return Object.keys(data).length > 0;
}, {
  message: "At least one field must be provided for update"
}));
// Update password validation schema
export const updatePasswordSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[14]++, z.object({
  password: passwordSchema
}));
// Query parameters validation schema
export const getUsersQuerySchema =
/* istanbul ignore next */
(cov_231mx5684a().s[15]++, z.object({
  campus_id: campusIdSchema.optional(),
  user_type: userTypeSchema.optional(),
  is_active: z.boolean().optional(),
  limit: z.number().min(1).max(1000).default(100),
  skip: z.number().min(0).default(0)
}));
// ID parameter validation
export const userIdParamSchema =
/* istanbul ignore next */
(cov_231mx5684a().s[16]++, z.object({
  id: z.string().min(1, "User ID is required")
}));