ba14118b91a4e3bff46bb1a3aff1b367
/* istanbul ignore next */
function cov_sh7bodzsn() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/upload.controller.ts";
  var hash = "08bd850704bce4ab87ae7da65e3071d3bc366d9c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/upload.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "2": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "3": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "4": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "5": {
        start: {
          line: 11,
          column: 25
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "8": {
        start: {
          line: 19,
          column: 24
        },
        end: {
          line: 19,
          column: 41
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "10": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 24,
          column: 20
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "12": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 55
        }
      },
      "13": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "14": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 85
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 45,
          column: 20
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 16
        }
      },
      "19": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 71,
          column: 2
        }
      },
      "20": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "21": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 42
        }
      },
      "22": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 56,
          column: 69
        }
      },
      "23": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 33
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "26": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 16
        }
      },
      "27": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 90,
          column: 2
        }
      },
      "28": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "29": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 74,
          column: 52
        }
      },
      "30": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 75,
          column: 65
        }
      },
      "31": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "32": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "33": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 20
        }
      },
      "34": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 88,
          column: 16
        }
      },
      "35": {
        start: {
          line: 91,
          column: 0
        },
        end: {
          line: 109,
          column: 2
        }
      },
      "36": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "37": {
        start: {
          line: 93,
          column: 26
        },
        end: {
          line: 93,
          column: 46
        }
      },
      "38": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 72
        }
      },
      "39": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 32
        }
      },
      "40": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "41": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 102,
          column: 20
        }
      },
      "42": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 33
          }
        },
        loc: {
          start: {
            line: 7,
            column: 47
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 53,
            column: 30
          },
          end: {
            line: 53,
            column: 31
          }
        },
        loc: {
          start: {
            line: 53,
            column: 45
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 53
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 72,
            column: 29
          },
          end: {
            line: 72,
            column: 30
          }
        },
        loc: {
          start: {
            line: 72,
            column: 44
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 72
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 37
          },
          end: {
            line: 91,
            column: 38
          }
        },
        loc: {
          start: {
            line: 91,
            column: 52
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 91
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 17
          }
        }, {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 12,
            column: 45
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "08bd850704bce4ab87ae7da65e3071d3bc366d9c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sh7bodzsn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sh7bodzsn();
var _a;
import { UploadFactory } from "@/libs/s3/upload.factory";
import { UploadService } from "@/services/upload.service";
export class UploadController {}
/* istanbul ignore next */
cov_sh7bodzsn().s[0]++;
_a = UploadController;
/* istanbul ignore next */
cov_sh7bodzsn().s[1]++;
UploadController.createUpload = async ctx => {
  /* istanbul ignore next */
  cov_sh7bodzsn().f[0]++;
  cov_sh7bodzsn().s[2]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[3]++, ctx.get("campus_id"));
    const user_id =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[4]++, ctx.get("user_id"));
    const {
      file
    } =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[5]++, await ctx.req.parseBody());
    /* istanbul ignore next */
    cov_sh7bodzsn().s[6]++;
    if (
    /* istanbul ignore next */
    (cov_sh7bodzsn().b[1][0]++, !file) ||
    /* istanbul ignore next */
    (cov_sh7bodzsn().b[1][1]++, typeof file === "string")) {
      /* istanbul ignore next */
      cov_sh7bodzsn().b[0][0]++;
      cov_sh7bodzsn().s[7]++;
      return ctx.json({
        success: false,
        message: "No file uploaded"
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_sh7bodzsn().b[0][1]++;
    }
    // Validate file size (max 100MB)
    const maxSize =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[8]++, 100 * 1024 * 1024); // 100MB in bytes
    /* istanbul ignore next */
    cov_sh7bodzsn().s[9]++;
    if (file.size > maxSize) {
      /* istanbul ignore next */
      cov_sh7bodzsn().b[2][0]++;
      cov_sh7bodzsn().s[10]++;
      return ctx.json({
        success: false,
        message: "File too large. Maximum size allowed is 100MB"
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_sh7bodzsn().b[2][1]++;
    }
    // Initialize S3 client
    cov_sh7bodzsn().s[11]++;
    UploadFactory.createUploadClient();
    const s3Data =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[12]++, await UploadFactory.upload(file));
    const fileData =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[13]++, {
      file_size: file.size,
      file_type: file.type,
      original_file_name: file.name,
      stored_file_name: s3Data.file_name,
      s3_url: s3Data.url,
      meta_data: {}
    });
    const upload =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[14]++, await UploadService.createUpload(campus_id, user_id, fileData));
    /* istanbul ignore next */
    cov_sh7bodzsn().s[15]++;
    return ctx.json(upload);
  } catch (error) {
    /* istanbul ignore next */
    cov_sh7bodzsn().s[16]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_sh7bodzsn().b[3][0]++;
      cov_sh7bodzsn().s[17]++;
      return ctx.json({
        success: false,
        message: error.message
      }, 500);
    } else
    /* istanbul ignore next */
    {
      cov_sh7bodzsn().b[3][1]++;
    }
    cov_sh7bodzsn().s[18]++;
    return ctx.json({
      success: false,
      message: "An unexpected error occurred"
    }, 500);
  }
};
/* istanbul ignore next */
cov_sh7bodzsn().s[19]++;
UploadController.getUploads = async ctx => {
  /* istanbul ignore next */
  cov_sh7bodzsn().f[1]++;
  cov_sh7bodzsn().s[20]++;
  try {
    const user_id =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[21]++, ctx.get("user_id"));
    const uploads =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[22]++, await UploadService.getFilesByUserId(user_id));
    /* istanbul ignore next */
    cov_sh7bodzsn().s[23]++;
    return ctx.json(uploads);
  } catch (error) {
    /* istanbul ignore next */
    cov_sh7bodzsn().s[24]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_sh7bodzsn().b[4][0]++;
      cov_sh7bodzsn().s[25]++;
      return ctx.json({
        success: false,
        message: error.message
      }, 500);
    } else
    /* istanbul ignore next */
    {
      cov_sh7bodzsn().b[4][1]++;
    }
    cov_sh7bodzsn().s[26]++;
    return ctx.json({
      success: false,
      message: "An unexpected error occurred"
    }, 500);
  }
};
/* istanbul ignore next */
cov_sh7bodzsn().s[27]++;
UploadController.getUpload = async ctx => {
  /* istanbul ignore next */
  cov_sh7bodzsn().f[2]++;
  cov_sh7bodzsn().s[28]++;
  try {
    const upload_id =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[29]++, ctx.req.param("upload_id"));
    const upload =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[30]++, await UploadService.getFileById(upload_id));
    /* istanbul ignore next */
    cov_sh7bodzsn().s[31]++;
    return ctx.json(upload);
  } catch (error) {
    /* istanbul ignore next */
    cov_sh7bodzsn().s[32]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_sh7bodzsn().b[5][0]++;
      cov_sh7bodzsn().s[33]++;
      return ctx.json({
        success: false,
        message: error.message
      }, 500);
    } else
    /* istanbul ignore next */
    {
      cov_sh7bodzsn().b[5][1]++;
    }
    cov_sh7bodzsn().s[34]++;
    return ctx.json({
      success: false,
      message: "An unexpected error occurred"
    }, 500);
  }
};
/* istanbul ignore next */
cov_sh7bodzsn().s[35]++;
UploadController.getUploadByCampus = async ctx => {
  /* istanbul ignore next */
  cov_sh7bodzsn().f[3]++;
  cov_sh7bodzsn().s[36]++;
  try {
    const campus_id =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[37]++, ctx.get("campus_id"));
    const upload =
    /* istanbul ignore next */
    (cov_sh7bodzsn().s[38]++, await UploadService.getFilesByCampusId(campus_id));
    /* istanbul ignore next */
    cov_sh7bodzsn().s[39]++;
    return ctx.json(upload);
  } catch (error) {
    /* istanbul ignore next */
    cov_sh7bodzsn().s[40]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_sh7bodzsn().b[6][0]++;
      cov_sh7bodzsn().s[41]++;
      return ctx.json({
        success: false,
        message: error.message
      }, 500);
    } else
    /* istanbul ignore next */
    {
      cov_sh7bodzsn().b[6][1]++;
    }
    cov_sh7bodzsn().s[42]++;
    return ctx.json({
      success: false,
      message: "An unexpected error occurred"
    }, 500);
  }
};