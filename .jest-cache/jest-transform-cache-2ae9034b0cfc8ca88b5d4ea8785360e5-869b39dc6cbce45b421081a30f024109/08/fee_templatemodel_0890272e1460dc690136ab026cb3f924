dfe3c74c140f36964c82f4bf62aa2349
/* istanbul ignore next */
function cov_1jl9g4zqfe() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/fee_template.model.ts";
  var hash = "5563708a91e4fd33bb16b34074d6a9035d023ef0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/fee_template.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "1": {
        start: {
          line: 21,
          column: 45
        },
        end: {
          line: 21,
          column: 55
        }
      },
      "2": {
        start: {
          line: 22,
          column: 45
        },
        end: {
          line: 22,
          column: 55
        }
      },
      "3": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 61
        }
      },
      "4": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "5": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "6": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "7": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 32,
          column: 2
        }
      },
      "8": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 21,
            column: 40
          }
        },
        loc: {
          start: {
            line: 21,
            column: 45
          },
          end: {
            line: 21,
            column: 55
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 22,
            column: 40
          }
        },
        loc: {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 22,
            column: 55
          }
        },
        line: 22
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5563708a91e4fd33bb16b34074d6a9035d023ef0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jl9g4zqfe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jl9g4zqfe();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const FeeTemplateSchema =
/* istanbul ignore next */
(cov_1jl9g4zqfe().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  template_name: {
    type: String,
    required: true
  },
  class_id: {
    type: String,
    required: true
  },
  academic_year: {
    type: String,
    required: true
  },
  fee_structure: {
    type: [Object],
    required: true
  },
  total_amount: {
    type: Number,
    required: true
  },
  applicable_students: {
    type: [String],
    required: true,
    default: []
  },
  validity_period: {
    type: Object,
    required: true
  },
  auto_generate: {
    type: Boolean,
    required: true,
    default: false
  },
  is_active: {
    type: Boolean,
    required: true,
    default: true
  },
  meta_data: {
    type: Object,
    required: true,
    default: {}
  },
  created_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1jl9g4zqfe().f[0]++;
      cov_1jl9g4zqfe().s[1]++;
      return new Date();
    }
  },
  updated_at: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_1jl9g4zqfe().f[1]++;
      cov_1jl9g4zqfe().s[2]++;
      return new Date();
    }
  }
}));
/* istanbul ignore next */
cov_1jl9g4zqfe().s[3]++;
FeeTemplateSchema.index.findByCampusId = {
  by: "campus_id"
};
/* istanbul ignore next */
cov_1jl9g4zqfe().s[4]++;
FeeTemplateSchema.index.findByClassId = {
  by: "class_id"
};
/* istanbul ignore next */
cov_1jl9g4zqfe().s[5]++;
FeeTemplateSchema.index.findByAcademicYear = {
  by: "academic_year"
};
/* istanbul ignore next */
cov_1jl9g4zqfe().s[6]++;
FeeTemplateSchema.index.findByCampusIdAndClassId = {
  by: ["campus_id", "class_id"]
};
/* istanbul ignore next */
cov_1jl9g4zqfe().s[7]++;
FeeTemplateSchema.index.findByCampusIdAndAcademicYear = {
  by: ["campus_id", "academic_year"]
};
const FeeTemplate =
/* istanbul ignore next */
(cov_1jl9g4zqfe().s[8]++, ottoman.model("fee_templates", FeeTemplateSchema));
export { FeeTemplate };