25d235b14e0fe6820d23302a06515172
/* istanbul ignore next */
function cov_1v37nsobfg() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/exam.route.ts";
  var hash = "de66e0dd6cf1e926296634e300f8cdb15ee2aa16";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/exam.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 31,
          column: 88
        }
      },
      "2": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 55,
          column: 33
        }
      },
      "3": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 88,
          column: 36
        }
      },
      "4": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 121,
          column: 88
        }
      },
      "5": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 154,
          column: 35
        }
      },
      "6": {
        start: {
          line: 156,
          column: 0
        },
        end: {
          line: 179,
          column: 36
        }
      },
      "7": {
        start: {
          line: 180,
          column: 0
        },
        end: {
          line: 212,
          column: 94
        }
      },
      "8": {
        start: {
          line: 213,
          column: 0
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "9": {
        start: {
          line: 246,
          column: 0
        },
        end: {
          line: 278,
          column: 94
        }
      },
      "10": {
        start: {
          line: 279,
          column: 0
        },
        end: {
          line: 311,
          column: 38
        }
      },
      "11": {
        start: {
          line: 312,
          column: 0
        },
        end: {
          line: 344,
          column: 48
        }
      },
      "12": {
        start: {
          line: 345,
          column: 0
        },
        end: {
          line: 377,
          column: 47
        }
      },
      "13": {
        start: {
          line: 378,
          column: 0
        },
        end: {
          line: 410,
          column: 42
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "de66e0dd6cf1e926296634e300f8cdb15ee2aa16"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v37nsobfg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v37nsobfg();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { ExamController } from "@/controllers/exam.controller";
import { createExaminationRequestBodySchema, createExaminationResponseSchema, createExamTermRequestBodySchema, createExamTermResponseSchema, errorResponseSchema, examinationSchema, examTermSchema, getExaminationsResponseSchema, getExamTermsResponseSchema, updateExaminationRequestBodySchema, updateExaminationResponseSchema, updateExamTermRequestBodySchema, updateExamTermResponseSchema } from "@/schema/exam";
const app =
/* istanbul ignore next */
(cov_1v37nsobfg().s[0]++, new Hono());
// Exam Term routes
/* istanbul ignore next */
cov_1v37nsobfg().s[1]++;
app.post("/", describeRoute({
  operationId: "createExamTerm",
  summary: "Create a new exam term",
  description: "Creates a new exam term (e.g., Midterm, Final) in the system",
  tags: ["Exam"],
  responses: {
    200: {
      description: "Exam term created successfully",
      content: {
        "application/json": {
          schema: resolver(createExamTermResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", createExamTermRequestBodySchema), ExamController.createExamTerm);
/* istanbul ignore next */
cov_1v37nsobfg().s[2]++;
app.get("/", describeRoute({
  operationId: "getExamTerms",
  summary: "Get all exam terms",
  description: "Retrieves all exam terms for a campus",
  tags: ["Exam"],
  responses: {
    200: {
      description: "List of exam terms",
      content: {
        "application/json": {
          schema: resolver(getExamTermsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExamTerms);
/* istanbul ignore next */
cov_1v37nsobfg().s[3]++;
app.get("/:id", describeRoute({
  operationId: "getExamTermById",
  summary: "Get exam term by ID",
  description: "Retrieves a specific exam term by ID",
  tags: ["Exam"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Exam Term ID"
  }],
  responses: {
    200: {
      description: "Exam term details",
      content: {
        "application/json": {
          schema: resolver(examTermSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExamTermById);
/* istanbul ignore next */
cov_1v37nsobfg().s[4]++;
app.patch("/:id", describeRoute({
  operationId: "updateExamTerm",
  summary: "Update an exam term",
  description: "Updates a specific exam term by ID",
  tags: ["Exam"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Exam Term ID"
  }],
  responses: {
    200: {
      description: "Exam term updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateExamTermResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateExamTermRequestBodySchema), ExamController.updateExamTerm);
/* istanbul ignore next */
cov_1v37nsobfg().s[5]++;
app.delete("/:id", describeRoute({
  operationId: "deleteExamTerm",
  summary: "Delete an exam term",
  description: "Deletes a specific exam term by ID",
  tags: ["Exam"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Exam Term ID"
  }],
  responses: {
    200: {
      description: "Exam term deleted successfully",
      content: {
        "application/json": {
          schema: resolver(examTermSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.deleteExamTerm);
// Examination routes
/* istanbul ignore next */
cov_1v37nsobfg().s[6]++;
app.get("/e/examinations", describeRoute({
  operationId: "getExaminations",
  summary: "Get all examinations",
  description: "Retrieves all examinations for a campus",
  tags: ["Exam"],
  responses: {
    200: {
      description: "List of examinations",
      content: {
        "application/json": {
          schema: resolver(getExaminationsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExaminations);
/* istanbul ignore next */
cov_1v37nsobfg().s[7]++;
app.post("/examinations/:exam_term_id", describeRoute({
  operationId: "createExamination",
  summary: "Create a new examination",
  description: "Creates a new examination for a specific exam term",
  tags: ["Exam"],
  parameters: [{
    name: "exam_term_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Exam Term ID"
  }],
  responses: {
    200: {
      description: "Examination created successfully",
      content: {
        "application/json": {
          schema: resolver(createExaminationResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", createExaminationRequestBodySchema), ExamController.createExamination);
/* istanbul ignore next */
cov_1v37nsobfg().s[8]++;
app.get("/examinations/:id", describeRoute({
  operationId: "getExaminationById",
  summary: "Get examination by ID",
  description: "Retrieves a specific examination by ID",
  tags: ["Exam"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Examination ID"
  }],
  responses: {
    200: {
      description: "Examination details",
      content: {
        "application/json": {
          schema: resolver(examinationSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExaminationById);
/* istanbul ignore next */
cov_1v37nsobfg().s[9]++;
app.patch("/examinations/:id", describeRoute({
  operationId: "updateExamination",
  summary: "Update an examination",
  description: "Updates a specific examination by ID",
  tags: ["Exam"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Examination ID"
  }],
  responses: {
    200: {
      description: "Examination updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateExaminationResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateExaminationRequestBodySchema), ExamController.updateExamination);
/* istanbul ignore next */
cov_1v37nsobfg().s[10]++;
app.delete("/examinations/:id", describeRoute({
  operationId: "deleteExamination",
  summary: "Delete an examination",
  description: "Deletes a specific examination by ID",
  tags: ["Exam"],
  parameters: [{
    name: "id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Examination ID"
  }],
  responses: {
    200: {
      description: "Examination deleted successfully",
      content: {
        "application/json": {
          schema: resolver(examinationSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.deleteExamination);
/* istanbul ignore next */
cov_1v37nsobfg().s[11]++;
app.get("/examinations/exam_term/:exam_term_id", describeRoute({
  operationId: "getExaminationsByExamTermId",
  summary: "Get examinations by exam term ID",
  description: "Retrieves all examinations for a specific exam term",
  tags: ["Exam"],
  parameters: [{
    name: "exam_term_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Exam Term ID"
  }],
  responses: {
    200: {
      description: "List of examinations for the exam term",
      content: {
        "application/json": {
          schema: resolver(getExaminationsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExaminationsByExamTermId);
/* istanbul ignore next */
cov_1v37nsobfg().s[12]++;
app.get("/examinations/subject/:subject_id", describeRoute({
  operationId: "getExaminationsBySubjectId",
  summary: "Get examinations by subject ID",
  description: "Retrieves all examinations for a specific subject",
  tags: ["Exam"],
  parameters: [{
    name: "subject_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Subject ID"
  }],
  responses: {
    200: {
      description: "List of examinations for the subject",
      content: {
        "application/json": {
          schema: resolver(getExaminationsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExaminationsBySubjectId);
/* istanbul ignore next */
cov_1v37nsobfg().s[13]++;
app.get("/examinations/date/:date", describeRoute({
  operationId: "getExaminationsByDate",
  summary: "Get examinations by date",
  description: "Retrieves all examinations scheduled for a specific date",
  tags: ["Exam"],
  parameters: [{
    name: "date",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Examination date (YYYY-MM-DD)"
  }],
  responses: {
    200: {
      description: "List of examinations for the date",
      content: {
        "application/json": {
          schema: resolver(getExaminationsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ExamController.getExaminationsByDate);
export default app;