ab80336cce34740a7b78d3b4e5a60e69
/* istanbul ignore next */
function cov_1zylghtnhj() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/parent.controller.ts";
  var hash = "c9ad76e8f44279d8e71842d8dc13bd069cf020b0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/controllers/parent.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "2": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "3": {
        start: {
          line: 9,
          column: 31
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "4": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "7": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 18,
          column: 15
        }
      },
      "8": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "9": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "10": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 45
        }
      },
      "11": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 73
        }
      },
      "12": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 39
          },
          end: {
            line: 7,
            column: 40
          }
        },
        loc: {
          start: {
            line: 7,
            column: 54
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 23,
            column: 40
          }
        },
        loc: {
          start: {
            line: 23,
            column: 54
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 23
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c9ad76e8f44279d8e71842d8dc13bd069cf020b0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zylghtnhj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zylghtnhj();
var _a;
import { UserService } from "@/services/users.service";
export class ParentController {}
/* istanbul ignore next */
cov_1zylghtnhj().s[0]++;
_a = ParentController;
// Get Parent for student id
/* istanbul ignore next */
cov_1zylghtnhj().s[1]++;
ParentController.getParentForStudent = async ctx => {
  /* istanbul ignore next */
  cov_1zylghtnhj().f[0]++;
  cov_1zylghtnhj().s[2]++;
  try {
    const {
      student_id
    } =
    /* istanbul ignore next */
    (cov_1zylghtnhj().s[3]++, ctx.req.param());
    const parents =
    /* istanbul ignore next */
    (cov_1zylghtnhj().s[4]++, await UserService.getParentForStudent(student_id));
    /* istanbul ignore next */
    cov_1zylghtnhj().s[5]++;
    return ctx.json(parents);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zylghtnhj().s[6]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1zylghtnhj().b[0][0]++;
      cov_1zylghtnhj().s[7]++;
      return ctx.json({
        success: false,
        message: error.message
      });
    } else
    /* istanbul ignore next */
    {
      cov_1zylghtnhj().b[0][1]++;
    }
  }
};
// Get Student for parent id
/* istanbul ignore next */
cov_1zylghtnhj().s[8]++;
ParentController.getStudentForParent = async ctx => {
  /* istanbul ignore next */
  cov_1zylghtnhj().f[1]++;
  cov_1zylghtnhj().s[9]++;
  try {
    const {
      parent_id
    } =
    /* istanbul ignore next */
    (cov_1zylghtnhj().s[10]++, ctx.req.param());
    const students =
    /* istanbul ignore next */
    (cov_1zylghtnhj().s[11]++, await UserService.getStudentForParent(parent_id));
    /* istanbul ignore next */
    cov_1zylghtnhj().s[12]++;
    return ctx.json(students);
  } catch (error) {
    /* istanbul ignore next */
    cov_1zylghtnhj().s[13]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1zylghtnhj().b[1][0]++;
      cov_1zylghtnhj().s[14]++;
      return ctx.json({
        success: false,
        message: error.message
      }, 400);
    } else
    /* istanbul ignore next */
    {
      cov_1zylghtnhj().b[1][1]++;
    }
  }
};