657774991259b5368b1f0c83319b51b7
/* istanbul ignore next */
function cov_fg0toyeyq() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/parent.route.ts";
  var hash = "da023b66b628c88536b3d5859c825160dd2ff7d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/parent.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 39,
          column: 42
        }
      },
      "2": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 72,
          column: 42
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "da023b66b628c88536b3d5859c825160dd2ff7d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fg0toyeyq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fg0toyeyq();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver } from "hono-openapi/zod";
import { ParentController } from "@/controllers/parent.controller";
import { errorResponseSchema, getParentForStudentResponseSchema, getStudentForParentResponseSchema } from "@/schema/parent";
const app =
/* istanbul ignore next */
(cov_fg0toyeyq().s[0]++, new Hono());
/* istanbul ignore next */
cov_fg0toyeyq().s[1]++;
app.get("/by-student/:student_id", describeRoute({
  operationId: "getParentForStudent",
  summary: "Get parents for a student",
  description: "Retrieves all parents associated with a specific student",
  tags: ["Parent"],
  parameters: [{
    name: "student_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Student ID"
  }],
  responses: {
    200: {
      description: "List of parents",
      content: {
        "application/json": {
          schema: resolver(getParentForStudentResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ParentController.getParentForStudent);
/* istanbul ignore next */
cov_fg0toyeyq().s[2]++;
app.get("/by-parent/:parent_id", describeRoute({
  operationId: "getStudentForParent",
  summary: "Get students for a parent",
  description: "Retrieves all students associated with a specific parent",
  tags: ["Parent"],
  parameters: [{
    name: "parent_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Parent ID"
  }],
  responses: {
    200: {
      description: "List of students",
      content: {
        "application/json": {
          schema: resolver(getStudentForParentResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), ParentController.getStudentForParent);
export default app;