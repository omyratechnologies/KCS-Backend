6b34db1ab6d193cf96b160a91c9939a7
/* istanbul ignore next */
function cov_1h9s71v0i8() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/dashboard.route.ts";
  var hash = "e23f999ddb0a69b90eff678715248bdc1c4d2607";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/dashboard.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 31,
          column: 45
        }
      },
      "2": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 56,
          column: 45
        }
      },
      "3": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "4": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "5": {
        start: {
          line: 108,
          column: 0
        },
        end: {
          line: 131,
          column: 39
        }
      },
      "6": {
        start: {
          line: 133,
          column: 0
        },
        end: {
          line: 165,
          column: 45
        }
      },
      "7": {
        start: {
          line: 167,
          column: 0
        },
        end: {
          line: 190,
          column: 49
        }
      },
      "8": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 224,
          column: 43
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e23f999ddb0a69b90eff678715248bdc1c4d2607"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1h9s71v0i8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1h9s71v0i8();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver } from "hono-openapi/zod";
import { DashboardController } from "@/controllers/dashboard.controller";
import { adminDashboardResponseSchema, errorResponseSchema, notificationsSummaryResponseSchema, parentDashboardResponseSchema, quickStatsResponseSchema, recentActivitiesResponseSchema, studentDashboardResponseSchema, teacherDashboardResponseSchema, upcomingEventsResponseSchema } from "@/schema/dashboard";
const app =
/* istanbul ignore next */
(cov_1h9s71v0i8().s[0]++, new Hono());
// Student Dashboard
/* istanbul ignore next */
cov_1h9s71v0i8().s[1]++;
app.get("/student", describeRoute({
  operationId: "getStudentDashboard",
  summary: "Get student dashboard",
  description: "Retrieves comprehensive dashboard data for a student including profile, classes, assignments, attendance, and notifications",
  tags: ["Dashboard"],
  responses: {
    200: {
      description: "Student dashboard data",
      content: {
        "application/json": {
          schema: resolver(studentDashboardResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getStudentDashboard);
// Teacher Dashboard
/* istanbul ignore next */
cov_1h9s71v0i8().s[2]++;
app.get("/teacher", describeRoute({
  operationId: "getTeacherDashboard",
  summary: "Get teacher dashboard",
  description: "Retrieves comprehensive dashboard data for a teacher including profile, classes, subjects, assignments, and notifications",
  tags: ["Dashboard"],
  responses: {
    200: {
      description: "Teacher dashboard data",
      content: {
        "application/json": {
          schema: resolver(teacherDashboardResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getTeacherDashboard);
// Parent Dashboard
/* istanbul ignore next */
cov_1h9s71v0i8().s[3]++;
app.get("/parent", describeRoute({
  operationId: "getParentDashboard",
  summary: "Get parent dashboard",
  description: "Retrieves comprehensive dashboard data for a parent including children's information and notifications",
  tags: ["Dashboard"],
  responses: {
    200: {
      description: "Parent dashboard data",
      content: {
        "application/json": {
          schema: resolver(parentDashboardResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getParentDashboard);
// Admin Dashboard
/* istanbul ignore next */
cov_1h9s71v0i8().s[4]++;
app.get("/admin", describeRoute({
  operationId: "getAdminDashboard",
  summary: "Get admin dashboard",
  description: "Retrieves comprehensive dashboard data for administrators including campus statistics and notifications",
  tags: ["Dashboard"],
  responses: {
    200: {
      description: "Admin dashboard data",
      content: {
        "application/json": {
          schema: resolver(adminDashboardResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getAdminDashboard);
// Quick Stats
/* istanbul ignore next */
cov_1h9s71v0i8().s[5]++;
app.get("/stats", describeRoute({
  operationId: "getQuickStats",
  summary: "Get quick statistics",
  description: "Retrieves essential statistics and counts for the current user",
  tags: ["Dashboard"],
  responses: {
    200: {
      description: "Quick statistics",
      content: {
        "application/json": {
          schema: resolver(quickStatsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getQuickStats);
// Recent Activities
/* istanbul ignore next */
cov_1h9s71v0i8().s[6]++;
app.get("/activities", describeRoute({
  operationId: "getRecentActivities",
  summary: "Get recent activities",
  description: "Retrieves recent activities relevant to the current user",
  tags: ["Dashboard"],
  parameters: [{
    name: "limit",
    in: "query",
    required: false,
    schema: {
      type: "number",
      default: 10
    },
    description: "Maximum number of activities to return"
  }],
  responses: {
    200: {
      description: "Recent activities",
      content: {
        "application/json": {
          schema: resolver(recentActivitiesResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getRecentActivities);
// Notifications Summary
/* istanbul ignore next */
cov_1h9s71v0i8().s[7]++;
app.get("/notifications", describeRoute({
  operationId: "getNotificationsSummary",
  summary: "Get notifications summary",
  description: "Retrieves notifications summary including unread count and recent notifications",
  tags: ["Dashboard"],
  responses: {
    200: {
      description: "Notifications summary",
      content: {
        "application/json": {
          schema: resolver(notificationsSummaryResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getNotificationsSummary);
// Upcoming Events
/* istanbul ignore next */
cov_1h9s71v0i8().s[8]++;
app.get("/events", describeRoute({
  operationId: "getUpcomingEvents",
  summary: "Get upcoming events",
  description: "Retrieves upcoming events and deadlines for the specified number of days",
  tags: ["Dashboard"],
  parameters: [{
    name: "days",
    in: "query",
    required: false,
    schema: {
      type: "number",
      default: 7
    },
    description: "Number of days to look ahead for events"
  }],
  responses: {
    200: {
      description: "Upcoming events",
      content: {
        "application/json": {
          schema: resolver(upcomingEventsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), DashboardController.getUpcomingEvents);
export default app;