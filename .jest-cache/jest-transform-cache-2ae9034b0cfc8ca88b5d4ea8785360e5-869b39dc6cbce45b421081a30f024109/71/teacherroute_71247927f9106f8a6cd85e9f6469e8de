c9ef5a657127957f1ce3abd5d90c7c32
/* istanbul ignore next */
function cov_274x0j15o5() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/teacher.route.ts";
  var hash = "a38c8c520415a2551e215fbb891e8006b52656f3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/teacher.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 30,
          column: 89
        }
      },
      "2": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 54,
          column: 38
        }
      },
      "3": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 87,
          column: 38
        }
      },
      "4": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 120,
          column: 89
        }
      },
      "5": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 153,
          column: 37
        }
      },
      "6": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 186,
          column: 48
        }
      },
      "7": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 219,
          column: 49
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a38c8c520415a2551e215fbb891e8006b52656f3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_274x0j15o5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_274x0j15o5();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { TeacherController } from "@/controllers/teacher.controller";
import { createTeacherRequestBodySchema, createTeacherResponseSchema, errorResponseSchema, getTeacherClassesResponseSchema, getTeachersResponseSchema, getTeacherSubjectsResponseSchema, teacherSchema, teacherWithProfileSchema, updateTeacherRequestBodySchema, updateTeacherResponseSchema } from "@/schema/teacher";
const app =
/* istanbul ignore next */
(cov_274x0j15o5().s[0]++, new Hono());
/* istanbul ignore next */
cov_274x0j15o5().s[1]++;
app.post("/", describeRoute({
  operationId: "createTeacher",
  summary: "Create a teacher",
  description: "Creates a new teacher profile",
  tags: ["Teacher"],
  responses: {
    200: {
      description: "Teacher created successfully",
      content: {
        "application/json": {
          schema: resolver(createTeacherResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", createTeacherRequestBodySchema), TeacherController.createTeacher);
/* istanbul ignore next */
cov_274x0j15o5().s[2]++;
app.get("/", describeRoute({
  operationId: "getAllTeachers",
  summary: "Get all teachers",
  description: "Retrieves all teachers for the current campus",
  tags: ["Teacher"],
  responses: {
    200: {
      description: "List of teachers",
      content: {
        "application/json": {
          schema: resolver(getTeachersResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), TeacherController.getAllTeachers);
/* istanbul ignore next */
cov_274x0j15o5().s[3]++;
app.get("/:teacher_id", describeRoute({
  operationId: "getTeacherById",
  summary: "Get teacher by ID",
  description: "Retrieves a specific teacher by ID",
  tags: ["Teacher"],
  parameters: [{
    name: "teacher_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Teacher ID"
  }],
  responses: {
    200: {
      description: "Teacher details",
      content: {
        "application/json": {
          schema: resolver(teacherWithProfileSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), TeacherController.getTeacherById);
/* istanbul ignore next */
cov_274x0j15o5().s[4]++;
app.put("/:teacher_id", describeRoute({
  operationId: "updateTeacher",
  summary: "Update teacher",
  description: "Updates a specific teacher by ID",
  tags: ["Teacher"],
  parameters: [{
    name: "teacher_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Teacher ID"
  }],
  responses: {
    200: {
      description: "Teacher updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateTeacherResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), zValidator("json", updateTeacherRequestBodySchema), TeacherController.updateTeacher);
/* istanbul ignore next */
cov_274x0j15o5().s[5]++;
app.delete("/:teacher_id", describeRoute({
  operationId: "deleteTeacher",
  summary: "Delete teacher",
  description: "Deletes a specific teacher by ID",
  tags: ["Teacher"],
  parameters: [{
    name: "teacher_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Teacher ID"
  }],
  responses: {
    200: {
      description: "Teacher deleted successfully",
      content: {
        "application/json": {
          schema: resolver(teacherSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), TeacherController.deleteTeacher);
/* istanbul ignore next */
cov_274x0j15o5().s[6]++;
app.get("/:teacher_id/classes", describeRoute({
  operationId: "getAllClassesByTeacherId",
  summary: "Get all classes by teacher ID",
  description: "Retrieves all classes assigned to a specific teacher",
  tags: ["Teacher"],
  parameters: [{
    name: "teacher_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Teacher ID"
  }],
  responses: {
    200: {
      description: "List of classes",
      content: {
        "application/json": {
          schema: resolver(getTeacherClassesResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), TeacherController.getAllClassesByTeacherId);
/* istanbul ignore next */
cov_274x0j15o5().s[7]++;
app.get("/:teacher_id/subjects", describeRoute({
  operationId: "getAllSubjectsByTeacherId",
  summary: "Get all subjects by teacher ID",
  description: "Retrieves all subjects assigned to a specific teacher",
  tags: ["Teacher"],
  parameters: [{
    name: "teacher_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Teacher ID"
  }],
  responses: {
    200: {
      description: "List of subjects",
      content: {
        "application/json": {
          schema: resolver(getTeacherSubjectsResponseSchema)
        }
      }
    },
    400: {
      description: "Bad request",
      content: {
        "application/json": {
          schema: resolver(errorResponseSchema)
        }
      }
    }
  }
}), TeacherController.getAllSubjectsByTeacherId);
export default app;