87768a86d162f5ad5bfab9d38ade4543
/* istanbul ignore next */
function cov_18vwa4zeo2() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/subject.route.ts";
  var hash = "7fe3992ca3d2e6b0348fb25c3434eb77c2a30054";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/routes/subject.route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 12
        },
        end: {
          line: 6,
          column: 22
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 35,
          column: 89
        }
      },
      "2": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 64,
          column: 38
        }
      },
      "3": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 102,
          column: 38
        }
      },
      "4": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 140,
          column: 89
        }
      },
      "5": {
        start: {
          line: 141,
          column: 0
        },
        end: {
          line: 178,
          column: 37
        }
      },
      "6": {
        start: {
          line: 179,
          column: 0
        },
        end: {
          line: 216,
          column: 52
        }
      },
      "7": {
        start: {
          line: 217,
          column: 0
        },
        end: {
          line: 254,
          column: 52
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7fe3992ca3d2e6b0348fb25c3434eb77c2a30054"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18vwa4zeo2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18vwa4zeo2();
import { Hono } from "hono";
import { describeRoute } from "hono-openapi";
import { resolver, validator as zValidator } from "hono-openapi/zod";
import { SubjectController } from "@/controllers/subject.controller";
import { createSubjectRequestBodySchema, createSubjectResponseSchema, deleteSubjectResponseSchema, getClassesForSubjectResponseSchema, getSubjectsResponseSchema, getTeachersForSubjectResponseSchema, subjectSchema, updateSubjectRequestBodySchema, updateSubjectResponseSchema } from "@/schema/subject";
const app =
/* istanbul ignore next */
(cov_18vwa4zeo2().s[0]++, new Hono());
/* istanbul ignore next */
cov_18vwa4zeo2().s[1]++;
app.post("/", describeRoute({
  tags: ["Subject"],
  operationId: "createSubject",
  summary: "Create a new subject",
  description: "Creates a new subject in the system",
  responses: {
    200: {
      description: "Subject created successfully",
      content: {
        "application/json": {
          schema: resolver(createSubjectResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), zValidator("json", createSubjectRequestBodySchema), SubjectController.createSubject);
/* istanbul ignore next */
cov_18vwa4zeo2().s[2]++;
app.get("/", describeRoute({
  tags: ["Subject"],
  operationId: "getAllSubjects",
  summary: "Get all subjects",
  description: "Retrieves all subjects for a campus",
  responses: {
    200: {
      description: "List of subjects",
      content: {
        "application/json": {
          schema: resolver(getSubjectsResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), SubjectController.getAllSubjects);
/* istanbul ignore next */
cov_18vwa4zeo2().s[3]++;
app.get("/:subject_id", describeRoute({
  tags: ["Subject"],
  operationId: "getSubjectById",
  summary: "Get subject by ID",
  description: "Retrieves a specific subject by ID",
  parameters: [{
    name: "subject_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Subject ID"
  }],
  responses: {
    200: {
      description: "Subject details",
      content: {
        "application/json": {
          schema: resolver(subjectSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), SubjectController.getSubjectById);
/* istanbul ignore next */
cov_18vwa4zeo2().s[4]++;
app.put("/:subject_id", describeRoute({
  tags: ["Subject"],
  operationId: "updateSubject",
  summary: "Update a subject",
  description: "Updates a specific subject by ID",
  parameters: [{
    name: "subject_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Subject ID"
  }],
  responses: {
    200: {
      description: "Subject updated successfully",
      content: {
        "application/json": {
          schema: resolver(updateSubjectResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), zValidator("json", updateSubjectRequestBodySchema), SubjectController.updateSubject);
/* istanbul ignore next */
cov_18vwa4zeo2().s[5]++;
app.delete("/:subject_id", describeRoute({
  tags: ["Subject"],
  operationId: "deleteSubject",
  summary: "Delete a subject",
  description: "Deletes a specific subject by ID",
  parameters: [{
    name: "subject_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Subject ID"
  }],
  responses: {
    200: {
      description: "Subject deleted successfully",
      content: {
        "application/json": {
          schema: resolver(deleteSubjectResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), SubjectController.deleteSubject);
/* istanbul ignore next */
cov_18vwa4zeo2().s[6]++;
app.get("/:subject_id/teachers", describeRoute({
  tags: ["Subject"],
  operationId: "getAllTeacherForASubjectById",
  summary: "Get all teachers for a subject",
  description: "Retrieves all teachers assigned to a specific subject",
  parameters: [{
    name: "subject_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Subject ID"
  }],
  responses: {
    200: {
      description: "List of teachers",
      content: {
        "application/json": {
          schema: resolver(getTeachersForSubjectResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), SubjectController.getAllTeacherForASubjectById);
/* istanbul ignore next */
cov_18vwa4zeo2().s[7]++;
app.get("/:subject_id/classes", describeRoute({
  tags: ["Subject"],
  operationId: "getAllClassesForASubjectById",
  summary: "Get all classes for a subject",
  description: "Retrieves all classes that include a specific subject",
  parameters: [{
    name: "subject_id",
    in: "path",
    required: true,
    schema: {
      type: "string"
    },
    description: "Subject ID"
  }],
  responses: {
    200: {
      description: "List of classes",
      content: {
        "application/json": {
          schema: resolver(getClassesForSubjectResponseSchema)
        }
      }
    },
    500: {
      description: "Server error",
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              data: {
                type: "string"
              }
            }
          }
        }
      }
    }
  }
}), SubjectController.getAllClassesForASubjectById);
export default app;