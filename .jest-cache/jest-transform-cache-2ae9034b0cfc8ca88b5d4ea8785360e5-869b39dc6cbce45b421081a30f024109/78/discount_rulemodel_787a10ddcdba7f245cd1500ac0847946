af8f7d1983a9b518a8ff17703cda0686
/* istanbul ignore next */
function cov_240px7k8nw() {
  var path = "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/discount_rule.model.ts";
  var hash = "8997039d530f1eeb0ea755d76a4a54013bdde2d9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/avinashgantala/Development/KCS-Project/KCS-Backend/src/models/discount_rule.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 27
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "1": {
        start: {
          line: 57,
          column: 34
        },
        end: {
          line: 82,
          column: 2
        }
      },
      "2": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 77
        }
      },
      "3": {
        start: {
          line: 84,
          column: 35
        },
        end: {
          line: 84,
          column: 98
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8997039d530f1eeb0ea755d76a4a54013bdde2d9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_240px7k8nw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_240px7k8nw();
import { Schema } from "ottoman";
import { ottoman } from "../libs/db";
const DiscountRuleSchema =
/* istanbul ignore next */
(cov_240px7k8nw().s[0]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  name: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  discount_type: {
    type: String,
    required: true,
    enum: ["percentage", "fixed_amount", "bulk_discount", "early_bird", "sibling_discount", "merit_based"]
  },
  conditions: {
    applicable_fee_categories: [String],
    applicable_classes: [String],
    academic_year: String,
    min_amount: Number,
    max_amount: Number,
    valid_from: Date,
    valid_until: Date,
    early_payment_days: Number,
    student_criteria: {
      performance_grade: {
        type: String,
        enum: ["A+", "A", "B+", "B", "C"]
      },
      attendance_percentage: Number,
      previous_year_performance: Boolean
    },
    bulk_criteria: {
      min_students: Number,
      same_class: Boolean,
      payment_together: Boolean
    },
    sibling_criteria: {
      min_siblings: Number,
      discount_per_sibling: Number,
      max_discount_percentage: Number
    }
  },
  discount_value: {
    type: Number,
    required: true
  },
  max_discount_amount: Number,
  is_stackable: {
    type: Boolean,
    default: false
  },
  priority: {
    type: Number,
    default: 0
  },
  usage_limit: Number,
  used_count: {
    type: Number,
    default: 0
  },
  auto_apply: {
    type: Boolean,
    default: false
  },
  requires_approval: {
    type: Boolean,
    default: true
  },
  is_active: {
    type: Boolean,
    default: true
  },
  created_by: {
    type: String,
    required: true
  },
  approved_by: String,
  approved_at: Date,
  created_at: {
    type: Date,
    default: Date.now
  },
  updated_at: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
}));
const DiscountApplicationSchema =
/* istanbul ignore next */
(cov_240px7k8nw().s[1]++, new Schema({
  campus_id: {
    type: String,
    required: true
  },
  discount_rule_id: {
    type: String,
    required: true
  },
  fee_id: {
    type: String,
    required: true
  },
  student_id: {
    type: String,
    required: true
  },
  parent_id: String,
  discount_amount: {
    type: Number,
    required: true
  },
  applied_percentage: {
    type: Number,
    required: true
  },
  original_amount: {
    type: Number,
    required: true
  },
  discounted_amount: {
    type: Number,
    required: true
  },
  status: {
    type: String,
    required: true,
    enum: ["pending", "approved", "rejected", "applied"],
    default: "pending"
  },
  application_reason: String,
  applied_by: {
    type: String,
    required: true
  },
  approved_by: String,
  approved_at: Date,
  rejection_reason: String,
  created_at: {
    type: Date,
    default: Date.now
  },
  updated_at: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
}));
export const DiscountRule =
/* istanbul ignore next */
(cov_240px7k8nw().s[2]++, ottoman.model("DiscountRule", DiscountRuleSchema));
export const DiscountApplication =
/* istanbul ignore next */
(cov_240px7k8nw().s[3]++, ottoman.model("DiscountApplication", DiscountApplicationSchema));