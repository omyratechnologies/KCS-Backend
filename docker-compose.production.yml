version: "3.8"

services:
    # KCS Backend Application
    kcs-backend:
        image: omyratechnologies/kcs-backend:${BUILD_TAG:-latest}
        container_name: kcs-backend-production
        restart: unless-stopped
        ports:
            - "4500:4500"
            - "4501:4501"
        environment:
            - NODE_ENV=production
        env_file:
            - .env.production
        volumes:
            - ./logs:/app/logs
            - ./uploads:/app/uploads
            - ./backups:/app/backups
        networks:
            - kcs-network
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 4G
                reservations:
                    cpus: "1.0"
                    memory: 2G
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:4500/api/health"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "5"

    # Nginx Reverse Proxy with SSL
    nginx:
        image: nginx:alpine
        container_name: kcs-nginx-production
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - ./ssl:/etc/ssl/certs:ro
            - ./logs/nginx:/var/log/nginx
            - /etc/letsencrypt:/etc/letsencrypt:ro
        depends_on:
            - kcs-backend
        networks:
            - kcs-network
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M
                reservations:
                    cpus: "0.2"
                    memory: 256M
        healthcheck:
            test: ["CMD", "nginx", "-t"]
            interval: 30s
            timeout: 5s
            retries: 3
        logging:
            driver: "json-file"
            options:
                max-size: "50m"
                max-file: "3"

    # Backup Service
    backup:
        image: alpine:latest
        container_name: kcs-backup-production
        restart: "no"
        volumes:
            - ./backups:/backups
            - ./logs:/app/logs:ro
            - ./uploads:/app/uploads:ro
        environment:
            - AWS_ACCESS_KEY_ID=${S3_ACCESS_KEY}
            - AWS_SECRET_ACCESS_KEY=${S3_SECRET_KEY}
            - S3_BUCKET=${BACKUP_S3_BUCKET}
        command: |
            sh -c "
            apk add --no-cache aws-cli curl &&
            while true; do
              echo 'Starting backup at $(date)'
              tar -czf /backups/kcs-backup-$(date +%Y%m%d_%H%M%S).tar.gz /app/logs /app/uploads
              aws s3 cp /backups/ s3://$$S3_BUCKET/backups/ --recursive --exclude '*' --include '*.tar.gz'
              find /backups -name '*.tar.gz' -mtime +7 -delete
              echo 'Backup completed at $(date)'
              sleep 86400
            done"
        networks:
            - kcs-network

    # Log Management
    logrotate:
        image: blacklabelops/logrotate
        container_name: kcs-logrotate-production
        restart: unless-stopped
        volumes:
            - ./logs:/var/log/docker
        environment:
            - LOGS_DIRECTORIES=/var/log/docker
            - LOGROTATE_INTERVAL=daily
            - LOGROTATE_COPIES=30
            - LOGROTATE_SIZE=500M
            - LOGROTATE_COMPRESSION=gzip
        networks:
            - kcs-network

    # Monitoring - Prometheus (Optional)
    prometheus:
        image: prom/prometheus:latest
        container_name: kcs-prometheus-production
        restart: unless-stopped
        ports:
            - "127.0.0.1:9090:9090"
        volumes:
            - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
            - prometheus_data:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=30d"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--web.enable-lifecycle"
            - "--web.external-url=https://devapi.letscatchup-kcs.com/prometheus"
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 1G
                reservations:
                    cpus: "0.2"
                    memory: 512M
        networks:
            - kcs-network

    # Grafana Dashboard (Optional)
    grafana:
        image: grafana/grafana:latest
        container_name: kcs-grafana-production
        restart: unless-stopped
        ports:
            - "127.0.0.1:3000:3000"
        volumes:
            - grafana_data:/var/lib/grafana
            - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
            - GF_SERVER_ROOT_URL=https://devapi.letscatchup-kcs.com/grafana
            - GF_SERVER_SERVE_FROM_SUB_PATH=true
        depends_on:
            - prometheus
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M
                reservations:
                    cpus: "0.2"
                    memory: 256M
        networks:
            - kcs-network

    # Watchtower for Auto-updates (Optional)
    watchtower:
        image: containrrr/watchtower
        container_name: kcs-watchtower-production
        restart: unless-stopped
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - WATCHTOWER_CLEANUP=true
            - WATCHTOWER_POLL_INTERVAL=3600
            - WATCHTOWER_INCLUDE_STOPPED=true
            - WATCHTOWER_NOTIFICATIONS=slack
            - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}
        command: --interval 3600 --cleanup
        networks:
            - kcs-network

volumes:
    prometheus_data:
        driver: local
    grafana_data:
        driver: local

networks:
    kcs-network:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.21.0.0/16
